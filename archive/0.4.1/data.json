{
    "project": {
        "name": "PencilBlue",
        "description": "PencilBlue: Full stack online publishing for Node.js",
        "version": "0.4.1",
        "url": "http://pencilblue.org/",
        "logo": "http://pencilblue.org/img/pb_logo.png"
    },
    "files": {
        "controllers\\api\\api_action_controller.js": {
            "name": "controllers\\api\\api_action_controller.js",
            "modules": {},
            "classes": {
                "ApiActionController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\base_api_controller.js": {
            "name": "controllers\\api\\base_api_controller.js",
            "modules": {},
            "classes": {
                "BaseApiController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\base_controller.js": {
            "name": "controllers\\base_controller.js",
            "modules": {},
            "classes": {
                "BaseController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\delete_controller.js": {
            "name": "controllers\\delete_controller.js",
            "modules": {},
            "classes": {
                "DeleteController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\form_controller.js": {
            "name": "controllers\\form_controller.js",
            "modules": {},
            "classes": {
                "FormController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\view_controller.js": {
            "name": "controllers\\view_controller.js",
            "modules": {},
            "classes": {
                "View Controller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\mongo\\ttl_index_helper.js": {
            "name": "include\\dao\\mongo\\ttl_index_helper.js",
            "modules": {},
            "classes": {
                "TTLIndexHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\cache.js": {
            "name": "include\\dao\\cache.js",
            "modules": {
                "dao": 1
            },
            "classes": {
                "CacheFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\dao.js": {
            "name": "include\\dao\\dao.js",
            "modules": {
                "Database": 1
            },
            "classes": {
                "DAO": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\db_manager.js": {
            "name": "include\\dao\\db_manager.js",
            "modules": {},
            "classes": {
                "DBManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\error\\formatters\\error_formatters.js": {
            "name": "include\\error\\formatters\\error_formatters.js",
            "modules": {},
            "classes": {
                "ErrorFormatters": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\error\\errors_over_time.js": {
            "name": "include\\error\\errors_over_time.js",
            "modules": {},
            "classes": {
                "ErrorsOverTime": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\error\\pb_error.js": {
            "name": "include\\error\\pb_error.js",
            "modules": {
                "ErrorSuccess": 1
            },
            "classes": {
                "PBError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\http\\parsers\\index.js": {
            "name": "include\\http\\parsers\\index.js",
            "modules": {},
            "classes": {
                "BaseBodyParser": 1,
                "FormBodyParser": 1,
                "JsonBodyParser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\http\\request_handler.js": {
            "name": "include\\http\\request_handler.js",
            "modules": {},
            "classes": {
                "RequestHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\model\\create_document.js": {
            "name": "include\\model\\create_document.js",
            "modules": {
                "Model": 1
            },
            "classes": {
                "DocumentCreator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\security\\authentication\\index.js": {
            "name": "include\\security\\authentication\\index.js",
            "modules": {},
            "classes": {
                "UsernamePasswordAuthentication": 1,
                "FormAuthentication": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\admin\\admin_subnav_service.js": {
            "name": "include\\service\\admin\\admin_subnav_service.js",
            "modules": {},
            "classes": {
                "AdminSubnavService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\content\\article_renderer.js": {
            "name": "include\\service\\entities\\content\\article_renderer.js",
            "modules": {},
            "classes": {
                "ArticleRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\content\\article_service_v2.js": {
            "name": "include\\service\\entities\\content\\article_service_v2.js",
            "modules": {},
            "classes": {
                "ArticleServiceV2": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\content\\content_object_service.js": {
            "name": "include\\service\\entities\\content\\content_object_service.js",
            "modules": {},
            "classes": {
                "ContentObjectService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\content\\content_view_loader.js": {
            "name": "include\\service\\entities\\content\\content_view_loader.js",
            "modules": {},
            "classes": {
                "ContentViewLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\content\\page_renderer.js": {
            "name": "include\\service\\entities\\content\\page_renderer.js",
            "modules": {},
            "classes": {
                "PageRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\content\\page_service.js": {
            "name": "include\\service\\entities\\content\\page_service.js",
            "modules": {},
            "classes": {
                "PageService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\article_service.js": {
            "name": "include\\service\\entities\\article_service.js",
            "modules": {},
            "classes": {
                "ArticleService": 1,
                "MediaLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\custom_object_service.js": {
            "name": "include\\service\\entities\\custom_object_service.js",
            "modules": {},
            "classes": {
                "CustomObjectService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\job_service.js": {
            "name": "include\\service\\entities\\job_service.js",
            "modules": {},
            "classes": {
                "JobService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\media_service.js": {
            "name": "include\\service\\entities\\media_service.js",
            "modules": {
                "Entities": 1
            },
            "classes": {
                "MediaService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\plugin_service.js": {
            "name": "include\\service\\entities\\plugin_service.js",
            "modules": {},
            "classes": {
                "PluginService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\section_service.js": {
            "name": "include\\service\\entities\\section_service.js",
            "modules": {},
            "classes": {
                "SectionService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\template_service.js": {
            "name": "include\\service\\entities\\template_service.js",
            "modules": {},
            "classes": {
                "TemplateService": 1,
                "TemplateValue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\topic_service.js": {
            "name": "include\\service\\entities\\topic_service.js",
            "modules": {},
            "classes": {
                "TopicService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\url_service.js": {
            "name": "include\\service\\entities\\url_service.js",
            "modules": {},
            "classes": {
                "UrlService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\user_service.js": {
            "name": "include\\service\\entities\\user_service.js",
            "modules": {},
            "classes": {
                "UserService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\async_job_runner.js": {
            "name": "include\\service\\jobs\\async_job_runner.js",
            "modules": {},
            "classes": {
                "AsyncJobRunner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\cluster_job_runner.js": {
            "name": "include\\service\\jobs\\cluster_job_runner.js",
            "modules": {},
            "classes": {
                "ClusterJobRunner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\job_runner.js": {
            "name": "include\\service\\jobs\\job_runner.js",
            "modules": {},
            "classes": {
                "JobRunner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\locks\\providers\\cache_lock_provider.js": {
            "name": "include\\service\\locks\\providers\\cache_lock_provider.js",
            "modules": {},
            "classes": {
                "CacheLockProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\locks\\providers\\db_lock_provider.js": {
            "name": "include\\service\\locks\\providers\\db_lock_provider.js",
            "modules": {},
            "classes": {
                "DbLockProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\locks\\lock_service.js": {
            "name": "include\\service\\locks\\lock_service.js",
            "modules": {},
            "classes": {
                "LockService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\audio_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\base_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\base_media_renderer.js",
            "modules": {},
            "classes": {
                "BaseMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\daily_motion_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "modules": {},
            "classes": {
                "DailyMotionMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\image_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\image_media_renderer.js",
            "modules": {},
            "classes": {
                "ImageMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\instagram_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "modules": {},
            "classes": {
                "InstagramMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\kickstarter_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "modules": {},
            "classes": {
                "KickStarterMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\slideshare_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "modules": {},
            "classes": {
                "SlideShareMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\storify_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "modules": {},
            "classes": {
                "StorifyMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\trinket_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "modules": {},
            "classes": {
                "TrinketMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\video_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\video_media_renderer.js",
            "modules": {},
            "classes": {
                "VideoMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\vimeo_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "modules": {},
            "classes": {
                "VimeoMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\vine_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "modules": {},
            "classes": {
                "VineMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\renderers\\youtube_media_renderer.js": {
            "name": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "modules": {},
            "classes": {
                "YouTubeMediaRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\fs_media_provider.js": {
            "name": "include\\service\\media\\fs_media_provider.js",
            "modules": {},
            "classes": {
                "FsMediaProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\media\\mongo_media_provider.js": {
            "name": "include\\service\\media\\mongo_media_provider.js",
            "modules": {},
            "classes": {
                "MongoMediaProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\base_object_service.js": {
            "name": "include\\service\\base_object_service.js",
            "modules": {},
            "classes": {
                "BaseObjectService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\cache_entity_service.js": {
            "name": "include\\service\\cache_entity_service.js",
            "modules": {
                "Storage": 1
            },
            "classes": {
                "CacheEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\db_entity_service.js": {
            "name": "include\\service\\db_entity_service.js",
            "modules": {},
            "classes": {
                "DbEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\fs_entity_service.js": {
            "name": "include\\service\\fs_entity_service.js",
            "modules": {},
            "classes": {
                "FSEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\json_fs_entity_service.js": {
            "name": "include\\service\\json_fs_entity_service.js",
            "modules": {},
            "classes": {
                "JSONFSEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\memory_entity_service.js": {
            "name": "include\\service\\memory_entity_service.js",
            "modules": {},
            "classes": {
                "MemoryEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\read_only_simple_layered_service.js": {
            "name": "include\\service\\read_only_simple_layered_service.js",
            "modules": {},
            "classes": {
                "ReadOnlySimpleLayeredService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\simple_layered_service.js": {
            "name": "include\\service\\simple_layered_service.js",
            "modules": {},
            "classes": {
                "SimpleLayeredService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\template_entity_service.js": {
            "name": "include\\service\\template_entity_service.js",
            "modules": {},
            "classes": {
                "TemplateEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\storage\\mongo_session_store.js": {
            "name": "include\\session\\storage\\mongo_session_store.js",
            "modules": {
                "Session": 1
            },
            "classes": {
                "MongoSessionStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\storage\\redis_session_store.js": {
            "name": "include\\session\\storage\\redis_session_store.js",
            "modules": {},
            "classes": {
                "RedisSessionStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\session.js": {
            "name": "include\\session\\session.js",
            "modules": {},
            "classes": {
                "SessionHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\command\\command_service.js": {
            "name": "include\\system\\command\\command_service.js",
            "modules": {},
            "classes": {
                "CommandService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\command\\mongo_command_broker.js": {
            "name": "include\\system\\command\\mongo_command_broker.js",
            "modules": {},
            "classes": {
                "MongoCommandBroker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\command\\redis_command_broker.js": {
            "name": "include\\system\\command\\redis_command_broker.js",
            "modules": {},
            "classes": {
                "RedisCommandBroker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\registry\\mongo_registration_provider.js": {
            "name": "include\\system\\registry\\mongo_registration_provider.js",
            "modules": {},
            "classes": {
                "MongoRegistrationProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\registry\\redis_registration_provider.js": {
            "name": "include\\system\\registry\\redis_registration_provider.js",
            "modules": {},
            "classes": {
                "RedisRegistrationProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\analytics_manager.js": {
            "name": "include\\system\\analytics_manager.js",
            "modules": {},
            "classes": {
                "AnalyticsManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\call_home_service.js": {
            "name": "include\\system\\call_home_service.js",
            "modules": {},
            "classes": {
                "CallHomeService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\server_registration.js": {
            "name": "include\\system\\server_registration.js",
            "modules": {},
            "classes": {
                "ServerRegistration": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\settings.js": {
            "name": "include\\system\\settings.js",
            "modules": {},
            "classes": {
                "SettingsServiceFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\system.js": {
            "name": "include\\system\\system.js",
            "modules": {},
            "classes": {
                "System": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\theme\\comments.js": {
            "name": "include\\theme\\comments.js",
            "modules": {
                "Theme": 1
            },
            "classes": {
                "CommentService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\theme\\top_menu.js": {
            "name": "include\\theme\\top_menu.js",
            "modules": {},
            "classes": {
                "TopMenuService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\utils\\logging.js": {
            "name": "include\\utils\\logging.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\validation\\validation_service.js": {
            "name": "include\\validation\\validation_service.js",
            "modules": {},
            "classes": {
                "ValidationService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\access_management.js": {
            "name": "include\\access_management.js",
            "modules": {
                "Security": 1
            },
            "classes": {
                "SecurityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\admin_navigation.js": {
            "name": "include\\admin_navigation.js",
            "modules": {
                "Admin": 1
            },
            "classes": {
                "AdminNavigation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\client_js.js": {
            "name": "include\\client_js.js",
            "modules": {
                "Services": 1
            },
            "classes": {
                "ClientJs": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\config.js": {
            "name": "include\\config.js",
            "modules": {},
            "classes": {
                "Configuration": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\content.js": {
            "name": "include\\content.js",
            "modules": {},
            "classes": {
                "ContentService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\email.js": {
            "name": "include\\email.js",
            "modules": {},
            "classes": {
                "EmailService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\libraries.js": {
            "name": "include\\libraries.js",
            "modules": {},
            "classes": {
                "LibrariesService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\localization.js": {
            "name": "include\\localization.js",
            "modules": {},
            "classes": {
                "Localization": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\requirements.js": {
            "name": "include\\requirements.js",
            "modules": {},
            "classes": {
                "PB": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\util.js": {
            "name": "include\\util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "pencilblue.js": {
            "name": "pencilblue.js",
            "modules": {},
            "classes": {
                "PencilBlue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "sample.config.js": {
            "name": "sample.config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "dao": {
            "name": "dao",
            "submodules": {},
            "classes": {
                "ApiActionController": 1,
                "BaseApiController": 1,
                "BaseController": 1,
                "DeleteController": 1,
                "FormController": 1,
                "View Controller": 1,
                "TTLIndexHelper": 1,
                "CacheFactory": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "include\\dao\\cache.js",
            "line": 23,
            "description": "Creates the cache",
            "is_constructor": 1
        },
        "Database": {
            "name": "Database",
            "submodules": {},
            "classes": {
                "DAO": 1,
                "DBManager": 1,
                "ErrorFormatters": 1,
                "ErrorsOverTime": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\error\\errors_over_time.js",
            "line": 20,
            "description": "Controlls the data model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dbName",
                    "description": "Will default to the config.db.name DB when not\nprovided.",
                    "type": "String",
                    "optional": true
                }
            ],
            "itemtype": "main"
        },
        "ErrorSuccess": {
            "name": "ErrorSuccess",
            "submodules": {},
            "classes": {
                "PBError": 1,
                "BaseBodyParser": 1,
                "FormBodyParser": 1,
                "JsonBodyParser": 1,
                "RequestHandler": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\http\\request_handler.js",
            "line": 30,
            "description": "Specialized application error that knows what status code to return",
            "is_constructor": 1,
            "itemtype": "main"
        },
        "Model": {
            "name": "Model",
            "submodules": {},
            "classes": {
                "DocumentCreator": 1,
                "UsernamePasswordAuthentication": 1,
                "FormAuthentication": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\security\\authentication\\index.js",
            "line": 69,
            "description": "Creates structures for persistence and cleans various fields.",
            "is_constructor": 1,
            "itemtype": "main"
        },
        "Services": {
            "name": "Services",
            "submodules": {
                "Entities": 1,
                "Storage": 1,
                "Theme": 1,
                "Validation": 1,
                "Security": 1,
                "Admin": 1
            },
            "classes": {
                "AdminSubnavService": 1,
                "ArticleRenderer": 1,
                "ArticleServiceV2": 1,
                "ContentObjectService": 1,
                "ContentViewLoader": 1,
                "PageRenderer": 1,
                "PageService": 1,
                "ArticleService": 1,
                "MediaLoader": 1,
                "CustomObjectService": 1,
                "JobService": 1,
                "MediaService": 1,
                "PluginService": 1,
                "SectionService": 1,
                "TemplateService": 1,
                "TemplateValue": 1,
                "TopicService": 1,
                "UrlService": 1,
                "UserService": 1,
                "AsyncJobRunner": 1,
                "ClusterJobRunner": 1,
                "JobRunner": 1,
                "CacheLockProvider": 1,
                "DbLockProvider": 1,
                "LockService": 1,
                "VideoMediaRenderer": 1,
                "BaseMediaRenderer": 1,
                "DailyMotionMediaRenderer": 1,
                "ImageMediaRenderer": 1,
                "InstagramMediaRenderer": 1,
                "KickStarterMediaRenderer": 1,
                "SlideShareMediaRenderer": 1,
                "StorifyMediaRenderer": 1,
                "TrinketMediaRenderer": 1,
                "VimeoMediaRenderer": 1,
                "VineMediaRenderer": 1,
                "YouTubeMediaRenderer": 1,
                "FsMediaProvider": 1,
                "MongoMediaProvider": 1,
                "BaseObjectService": 1,
                "CacheEntityService": 1,
                "DbEntityService": 1,
                "FSEntityService": 1,
                "JSONFSEntityService": 1,
                "MemoryEntityService": 1,
                "ReadOnlySimpleLayeredService": 1,
                "SimpleLayeredService": 1,
                "TemplateEntityService": 1,
                "CommentService": 1,
                "TopMenuService": 1,
                "ValidationService": 1,
                "SecurityService": 1,
                "AdminNavigation": 1,
                "ClientJs": 1,
                "Configuration": 1,
                "ContentService": 1,
                "EmailService": 1,
                "LibrariesService": 1,
                "Localization": 1,
                "PB": 1,
                "Util": 1,
                "PencilBlue": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "pencilblue.js",
            "line": 28,
            "description": "Service for creating JavaScript tags",
            "is_constructor": 1,
            "params": [
                {
                    "name": "objType",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "valueField",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "keyField",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "The",
                    "description": "number of seconds that a value will remain in cache \nbefore expiry.",
                    "type": "Integer"
                }
            ]
        },
        "Entities": {
            "name": "Entities",
            "submodules": {},
            "classes": {
                "MediaLoader": 1,
                "MediaService": 1,
                "PluginService": 1,
                "TemplateService": 1,
                "TemplateValue": 1,
                "UrlService": 1,
                "UserService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\user_service.js",
            "line": 30,
            "description": "Provides information on media",
            "is_constructor": 1
        },
        "Storage": {
            "name": "Storage",
            "submodules": {},
            "classes": {
                "DbEntityService": 1,
                "FSEntityService": 1,
                "JSONFSEntityService": 1,
                "MemoryEntityService": 1,
                "ReadOnlySimpleLayeredService": 1,
                "SimpleLayeredService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\simple_layered_service.js",
            "line": 24,
            "description": "Services for managing storage",
            "is_constructor": 1,
            "params": [
                {
                    "name": "objType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "valueField",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "keyField",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "Session": {
            "name": "Session",
            "submodules": {},
            "classes": {
                "MongoSessionStore": 1,
                "RedisSessionStore": 1,
                "SessionHandler": 1,
                "CommandService": 1,
                "MongoCommandBroker": 1,
                "RedisCommandBroker": 1,
                "MongoRegistrationProvider": 1,
                "RedisRegistrationProvider": 1,
                "AnalyticsManager": 1,
                "CallHomeService": 1,
                "ServerRegistration": 1,
                "SettingsServiceFactory": 1,
                "System": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "include\\system\\system.js",
            "line": 26,
            "description": "Session storage backed by MongoDB",
            "is_constructor": 1,
            "params": [
                {
                    "name": "sesisonStore",
                    "description": "",
                    "type": "SessionStore"
                }
            ]
        },
        "Theme": {
            "name": "Theme",
            "submodules": {},
            "classes": {
                "CommentService": 1,
                "TopMenuService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\theme\\top_menu.js",
            "line": 27,
            "description": "Theme content services",
            "extends": "BaseObjectService",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "Validation": {
            "name": "Validation",
            "submodules": {},
            "classes": {
                "ValidationService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "description": "Provides a set of functions for common validations.",
            "file": "include\\validation\\validation_service.js",
            "line": 25
        },
        "Security": {
            "name": "Security",
            "submodules": {},
            "classes": {
                "SecurityService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\access_management.js",
            "line": 24,
            "description": "Service for managing user access",
            "is_constructor": 1
        },
        "Admin": {
            "name": "Admin",
            "submodules": {},
            "classes": {
                "AdminNavigation": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\admin_navigation.js",
            "line": 26,
            "description": "Provides function to construct the structure needed to display the navigation\nin the Admin section of the application.",
            "is_constructor": 1
        }
    },
    "classes": {
        "ApiActionController": {
            "name": "ApiActionController",
            "shortname": "ApiActionController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dao",
            "file": "controllers\\api\\api_action_controller.js",
            "line": 27,
            "description": "Controller interface used to map simple actions to handlers and provide\na flow for validation and error handling.",
            "deprecated": true,
            "deprecationMessage": "Since 0.4.1",
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "BaseApiController": {
            "name": "BaseApiController",
            "shortname": "BaseApiController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dao",
            "file": "controllers\\api\\base_api_controller.js",
            "line": 23,
            "is_constructor": 1
        },
        "BaseController": {
            "name": "BaseController",
            "shortname": "BaseController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dao",
            "file": "controllers\\base_controller.js",
            "line": 24,
            "description": "The base controller provides functions for the majority of\nthe heavy lifing for a controller. It accepts and provides access to\nextending controllers for items such as the request, response, session, etc.",
            "is_constructor": 1
        },
        "DeleteController": {
            "name": "DeleteController",
            "shortname": "DeleteController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dao",
            "file": "controllers\\delete_controller.js",
            "line": 24,
            "description": "Deletes objects from the database",
            "is_constructor": 1,
            "extends": "FormController"
        },
        "FormController": {
            "name": "FormController",
            "shortname": "FormController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dao",
            "file": "controllers\\form_controller.js",
            "line": 23,
            "description": "Provides the basic functionality for implementing a controller that\nneeds access to a posted form.",
            "extends": "BaseController",
            "is_constructor": 1
        },
        "View Controller": {
            "name": "View Controller",
            "shortname": "View Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dao",
            "file": "controllers\\view_controller.js",
            "line": 26,
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "TTLIndexHelper": {
            "name": "TTLIndexHelper",
            "shortname": "TTLIndexHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dao",
            "file": "include\\dao\\mongo\\ttl_index_helper.js",
            "line": 24,
            "description": "Used to change the TTL index on a collection without elevated permissions",
            "is_constructor": 1
        },
        "CacheFactory": {
            "name": "CacheFactory",
            "shortname": "CacheFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dao",
            "namespace": "",
            "file": "include\\dao\\cache.js",
            "line": 23,
            "description": "Creates the cache"
        },
        "DAO": {
            "name": "DAO",
            "shortname": "DAO",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\dao\\dao.js",
            "line": 24,
            "description": "Controlls the data model"
        },
        "DBManager": {
            "name": "DBManager",
            "shortname": "DBManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\dao\\db_manager.js",
            "line": 27,
            "description": "Wrapper that protects against direct access to the active connection pools\nand DB references."
        },
        "ErrorFormatters": {
            "name": "ErrorFormatters",
            "shortname": "ErrorFormatters",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 26,
            "description": "Provides functions and mechanisms to serialize errors",
            "is_constructor": 1
        },
        "ErrorsOverTime": {
            "name": "ErrorsOverTime",
            "shortname": "ErrorsOverTime",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\error\\errors_over_time.js",
            "line": 20,
            "description": "Wraps up code that allows developers the ability to time box errors.  In \nsome instances errors will occur.  It is only when a certain number of those \nerrors occur within a given time span that it is recognized that recovery is \nimprobable.  When the threshold is broken the code allows you to throw an \nerror that represents all others that contributed to the threshold breach.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "errorSpan",
                    "description": "The upper bound on the number of errors that can \noccur within the provided time frame before it is determined that recovery \nis not possible.",
                    "type": "Integer"
                },
                {
                    "name": "errorThreshold",
                    "description": "The upper bound on the amount of time, in \nmilliseconds, that errors can occur in before it is determined that recovery \nis not possible.",
                    "type": "Integer"
                },
                {
                    "name": "prefix",
                    "description": "The prefix to any error message that is generated \nby the instance",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "PBError": {
            "name": "PBError",
            "shortname": "PBError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ErrorSuccess",
            "namespace": "",
            "file": "include\\error\\pb_error.js",
            "line": 23,
            "description": "Specialized application error that knows what status code to return"
        },
        "BaseBodyParser": {
            "name": "BaseBodyParser",
            "shortname": "BaseBodyParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ErrorSuccess",
            "namespace": "",
            "file": "include\\http\\parsers\\index.js",
            "line": 24,
            "description": "Provides function to construct the structure needed to display the navigation\nin the Admin section of the application.",
            "is_constructor": 1
        },
        "FormBodyParser": {
            "name": "FormBodyParser",
            "shortname": "FormBodyParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ErrorSuccess",
            "namespace": "",
            "file": "include\\http\\parsers\\index.js",
            "line": 124,
            "description": "Parser for incoming form bodies.  The parser handles \napplication/x-www-form-urlencoded and multipart/form-data encoded data. Any \nuploaded files are stored locally and a descriptor object is passed as the \nparsed result.",
            "is_constructor": 1,
            "extends": "BaseBodyParser"
        },
        "JsonBodyParser": {
            "name": "JsonBodyParser",
            "shortname": "JsonBodyParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ErrorSuccess",
            "namespace": "",
            "file": "include\\http\\parsers\\index.js",
            "line": 156,
            "description": "Provides function to construct the structure needed to display the navigation\nin the Admin section of the application.",
            "is_constructor": 1,
            "extends": "BaseBodyParser"
        },
        "RequestHandler": {
            "name": "RequestHandler",
            "shortname": "RequestHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ErrorSuccess",
            "namespace": "",
            "file": "include\\http\\request_handler.js",
            "line": 30,
            "description": "Responsible for processing a single req by delegating it to the correct controllers",
            "is_constructor": 1,
            "params": [
                {
                    "name": "server",
                    "description": "The http server that the request came in on",
                    "type": "Server"
                },
                {
                    "name": "req",
                    "description": "The incoming request",
                    "type": "Request"
                },
                {
                    "name": "resp",
                    "description": "The outgoing response",
                    "type": "Response"
                }
            ]
        },
        "DocumentCreator": {
            "name": "DocumentCreator",
            "shortname": "DocumentCreator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Model",
            "namespace": "",
            "file": "include\\model\\create_document.js",
            "line": 22,
            "description": "Creates structures for persistence and cleans various fields."
        },
        "UsernamePasswordAuthentication": {
            "name": "UsernamePasswordAuthentication",
            "shortname": "UsernamePasswordAuthentication",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Model",
            "namespace": "",
            "file": "include\\security\\authentication\\index.js",
            "line": 23,
            "is_constructor": 1
        },
        "FormAuthentication": {
            "name": "FormAuthentication",
            "shortname": "FormAuthentication",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Model",
            "namespace": "",
            "file": "include\\security\\authentication\\index.js",
            "line": 69,
            "is_constructor": 1,
            "extends": "UsernamePasswordAuthentication"
        },
        "AdminSubnavService": {
            "name": "AdminSubnavService",
            "shortname": "AdminSubnavService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 22,
            "description": "Provides the ability to manage the admin section's sub-nav.  It manages\ncallbacks for specific areas of the admin section that will build a structure\nto represent the sub-nav.  This sub nav, when retrieved will combine all\nregistrants' pills into a single structure which can then be rendered in a UI."
        },
        "ArticleRenderer": {
            "name": "ArticleRenderer",
            "shortname": "ArticleRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 27,
            "description": "Retrieves the necessary data as well as prepares the layout so a view \nloader can complete the render of content",
            "is_constructor": 1
        },
        "ArticleServiceV2": {
            "name": "ArticleServiceV2",
            "shortname": "ArticleServiceV2",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 30,
            "description": "Provides functions to interact with articles",
            "is_constructor": 1,
            "extends": "BaseObjectService"
        },
        "ContentObjectService": {
            "name": "ContentObjectService",
            "shortname": "ContentObjectService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 31,
            "description": "Provides functions to interact with content such as articles and pages.  \nIt abstracts the heavy lifting away from specific implementations.  This \nprototype must be extended.",
            "is_constructor": 1,
            "extends": "BaseObjectService"
        },
        "ContentViewLoader": {
            "name": "ContentViewLoader",
            "shortname": "ContentViewLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 30,
            "description": "Renders a 1 or more pieces of content such as articles or pages",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "ts",
                            "description": "",
                            "type": "TemplateService"
                        },
                        {
                            "name": "ls",
                            "description": "",
                            "type": "Localization"
                        },
                        {
                            "name": "contentSettings",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "session",
                            "description": "",
                            "type": "Object"
                        },
                        {
                            "name": "service",
                            "description": "",
                            "type": "ContentObjectService"
                        },
                        {
                            "name": "activeTheme",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "PageRenderer": {
            "name": "PageRenderer",
            "shortname": "PageRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\content\\page_renderer.js",
            "line": 23,
            "description": "Retrieves the necessary data as well as prepares the layout so a view \nloader can complete the render of content",
            "is_constructor": 1
        },
        "PageService": {
            "name": "PageService",
            "shortname": "PageService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 29,
            "description": "Provides functions to interact with pages",
            "is_constructor": 1,
            "extends": "BaseObjectService"
        },
        "ArticleService": {
            "name": "ArticleService",
            "shortname": "ArticleService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\article_service.js",
            "line": 29,
            "description": "Retrieves articles and pages",
            "is_constructor": 1
        },
        "MediaLoader": {
            "name": "MediaLoader",
            "shortname": "MediaLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\article_service.js",
            "line": 538,
            "description": "Handles retrieval and injection of media in articles and pages",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "CustomObjectService": {
            "name": "CustomObjectService",
            "shortname": "CustomObjectService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 25,
            "description": "Provides a service to do the heavy lifting of retrieving custom objects with\nthe ability to eagerly fetch the related objects.",
            "is_constructor": 1
        },
        "JobService": {
            "name": "JobService",
            "shortname": "JobService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\job_service.js",
            "line": 22,
            "description": "Provides the ability to interact with jobs that have already been created.",
            "is_constructor": 1
        },
        "MediaService": {
            "name": "MediaService",
            "shortname": "MediaService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Entities",
            "namespace": "",
            "file": "include\\service\\entities\\media_service.js",
            "line": 27,
            "description": "Provides information on media"
        },
        "PluginService": {
            "name": "PluginService",
            "shortname": "PluginService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 30,
            "description": "PluginService - Provides functions for interacting with plugins.\nInstall/uninstall, setting retrieval, plugin retrieval, etc.",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "SectionService": {
            "name": "SectionService",
            "shortname": "SectionService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\section_service.js",
            "line": 25,
            "description": "Service for managing the site's navigation",
            "is_constructor": 1
        },
        "TemplateService": {
            "name": "TemplateService",
            "shortname": "TemplateService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\template_service.js",
            "line": 26,
            "description": "A templating engine that provides the ability to read in file snippets and\ncall back for data based on the flags in the template file.  The instance\ncan be provided a Localization instance which will be used to perform\ntranslations for localization flags are encountered.  Flags are marked in\nhtml files by the pattern ^xzy^.  The values provided here are not HTML\nencoded.  Any reserved characters must be manually encoded by any flag\ncall backs.",
            "submodule": "Entities",
            "is_constructor": 1,
            "params": [
                {
                    "name": "localizationService",
                    "description": "The localization service object",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "TemplateValue": {
            "name": "TemplateValue",
            "shortname": "TemplateValue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Entities",
            "namespace": "",
            "file": "include\\service\\entities\\template_service.js",
            "line": 759,
            "description": "A value that has special meaning to TemplateService.  It acts as a wrapper\nfor a value to be used in a template along with special processing\ninstructions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "The",
                    "description": "raw value to be included in the template processing",
                    "type": "String"
                },
                {
                    "name": "htmlEncode",
                    "description": "Indicates if the value should be\nencoded during serialization.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "TopicService": {
            "name": "TopicService",
            "shortname": "TopicService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\topic_service.js",
            "line": 35,
            "description": "Provides interactions with topics",
            "extends": "BaseObjectService",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "UrlService": {
            "name": "UrlService",
            "shortname": "UrlService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\url_service.js",
            "line": 24,
            "description": "A service that provides insight into the system's routes (URLs) along with\nother utility functions to assist in examining and constructing URLs for\nclients to use for interaction with the system.",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "UserService": {
            "name": "UserService",
            "shortname": "UserService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Entities",
            "namespace": "",
            "file": "include\\service\\entities\\user_service.js",
            "line": 30,
            "description": "Service for performing user specific operations."
        },
        "AsyncJobRunner": {
            "name": "AsyncJobRunner",
            "shortname": "AsyncJobRunner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 26,
            "description": "An abstract implementation of JobRunner that handles performing a series of\nasynchronous tasks.  The runner provides the ability to run the tasks in\nparallel or 1 after another.  The extending implementation must provides the\nset of tasks to execute",
            "is_constructor": 1,
            "extends": "JobRunner"
        },
        "ClusterJobRunner": {
            "name": "ClusterJobRunner",
            "shortname": "ClusterJobRunner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 23,
            "description": "Abstract prototype used to run a job against an entire cluster by running in\none of two modes:  initiator and worker.",
            "is_constructor": 1,
            "extends": "AsyncJobRunner"
        },
        "JobRunner": {
            "name": "JobRunner",
            "shortname": "JobRunner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 23,
            "description": "A base interface that system jobs can implement.  The premise is that every\njob will have an ID and a name.  The job is initialized by calling the\n\"init\" function and started by calling the \"run\" function.  The specific\nimplementation is also provided with functions to report the start, update,\nand end of the job run.  The advantage to extending this prototype is that\nthe provided functions allow for creating a persisted record of the job.  In\naddition, log statements generated by the job are also persisted (as long as\nthe provided \"log\" function is called).",
            "is_constructor": 1
        },
        "CacheLockProvider": {
            "name": "CacheLockProvider",
            "shortname": "CacheLockProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\locks\\providers\\cache_lock_provider.js",
            "line": 23,
            "description": "A lock provider that leverages the cache to create semaphores",
            "is_constructor": 1
        },
        "DbLockProvider": {
            "name": "DbLockProvider",
            "shortname": "DbLockProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\locks\\providers\\db_lock_provider.js",
            "line": 23,
            "description": "A lock provider that leverages the DB to create semaphores",
            "is_constructor": 1
        },
        "LockService": {
            "name": "LockService",
            "shortname": "LockService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\locks\\lock_service.js",
            "line": 24,
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "",
                    "type": "LockProvider",
                    "optional": true
                }
            ]
        },
        "VideoMediaRenderer": {
            "name": "VideoMediaRenderer",
            "shortname": "VideoMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 27,
            "is_constructor": 1
        },
        "BaseMediaRenderer": {
            "name": "BaseMediaRenderer",
            "shortname": "BaseMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\base_media_renderer.js",
            "line": 26,
            "description": "Provides functions to provide common functionality among media renderers",
            "is_constructor": 1
        },
        "DailyMotionMediaRenderer": {
            "name": "DailyMotionMediaRenderer",
            "shortname": "DailyMotionMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 27,
            "description": "Renders a media item that represents a DailyMotion video",
            "is_constructor": 1
        },
        "ImageMediaRenderer": {
            "name": "ImageMediaRenderer",
            "shortname": "ImageMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 24,
            "description": "Renders",
            "is_constructor": 1
        },
        "InstagramMediaRenderer": {
            "name": "InstagramMediaRenderer",
            "shortname": "InstagramMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 27,
            "is_constructor": 1
        },
        "KickStarterMediaRenderer": {
            "name": "KickStarterMediaRenderer",
            "shortname": "KickStarterMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 27,
            "is_constructor": 1
        },
        "SlideShareMediaRenderer": {
            "name": "SlideShareMediaRenderer",
            "shortname": "SlideShareMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 28,
            "is_constructor": 1
        },
        "StorifyMediaRenderer": {
            "name": "StorifyMediaRenderer",
            "shortname": "StorifyMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 28,
            "is_constructor": 1
        },
        "TrinketMediaRenderer": {
            "name": "TrinketMediaRenderer",
            "shortname": "TrinketMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 27,
            "is_constructor": 1
        },
        "VimeoMediaRenderer": {
            "name": "VimeoMediaRenderer",
            "shortname": "VimeoMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 28,
            "is_constructor": 1
        },
        "VineMediaRenderer": {
            "name": "VineMediaRenderer",
            "shortname": "VineMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 27,
            "is_constructor": 1
        },
        "YouTubeMediaRenderer": {
            "name": "YouTubeMediaRenderer",
            "shortname": "YouTubeMediaRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 27,
            "is_constructor": 1
        },
        "FsMediaProvider": {
            "name": "FsMediaProvider",
            "shortname": "FsMediaProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 27,
            "description": "A media provider that uses the underlying file system as the method of \nstorage.",
            "is_constructor": 1
        },
        "MongoMediaProvider": {
            "name": "MongoMediaProvider",
            "shortname": "MongoMediaProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 25,
            "description": "A media provider that uses Mongo's GridFS as the method of storage.",
            "is_constructor": 1
        },
        "BaseObjectService": {
            "name": "BaseObjectService",
            "shortname": "BaseObjectService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\base_object_service.js",
            "line": 29,
            "description": "Provides functionality to perform CRUD operations on collections.  It \nalso allows for plugins to register for events in order to interact with \nobjects as they are being processed.  This makes it possible to add, \nremove, or modify fields before they are passed to the entity that \ntriggered the operation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "CacheEntityService": {
            "name": "CacheEntityService",
            "shortname": "CacheEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\cache_entity_service.js",
            "line": 28,
            "description": "In-cache storage service"
        },
        "DbEntityService": {
            "name": "DbEntityService",
            "shortname": "DbEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\db_entity_service.js",
            "line": 23,
            "description": "Database storage service"
        },
        "FSEntityService": {
            "name": "FSEntityService",
            "shortname": "FSEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\fs_entity_service.js",
            "line": 35,
            "description": "File system storage service"
        },
        "JSONFSEntityService": {
            "name": "JSONFSEntityService",
            "shortname": "JSONFSEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 24,
            "description": "JSON file system storage service"
        },
        "MemoryEntityService": {
            "name": "MemoryEntityService",
            "shortname": "MemoryEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\memory_entity_service.js",
            "line": 23,
            "description": "Memory storage service"
        },
        "ReadOnlySimpleLayeredService": {
            "name": "ReadOnlySimpleLayeredService",
            "shortname": "ReadOnlySimpleLayeredService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\read_only_simple_layered_service.js",
            "line": 23,
            "description": "Service to set storage services as read only"
        },
        "SimpleLayeredService": {
            "name": "SimpleLayeredService",
            "shortname": "SimpleLayeredService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\simple_layered_service.js",
            "line": 24,
            "description": "Service for layering storage services"
        },
        "TemplateEntityService": {
            "name": "TemplateEntityService",
            "shortname": "TemplateEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\template_entity_service.js",
            "line": 23,
            "description": "Service that is used to load the HTML templates from the file system.  If\nthe template is available it is compiled."
        },
        "MongoSessionStore": {
            "name": "MongoSessionStore",
            "shortname": "MongoSessionStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 24,
            "description": "Session storage backed by MongoDB"
        },
        "RedisSessionStore": {
            "name": "RedisSessionStore",
            "shortname": "RedisSessionStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 26,
            "description": "Session storage backed by Redis",
            "is_constructor": 1
        },
        "SessionHandler": {
            "name": "SessionHandler",
            "shortname": "SessionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\session.js",
            "line": 30,
            "description": "Responsible for managing user sessions"
        },
        "CommandService": {
            "name": "CommandService",
            "shortname": "CommandService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\command\\command_service.js",
            "line": 26,
            "description": "Provides a mechanism to send commands to all members of the cluster or a\nspecific member.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "broker",
                    "description": "",
                    "type": "CommandBroker"
                }
            ]
        },
        "MongoCommandBroker": {
            "name": "MongoCommandBroker",
            "shortname": "MongoCommandBroker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 26,
            "description": "Brokers messages using Redis as the medium.  The implementation follows a\npublish/subscribe model that allows for listening for changes based on a a\nspecified channel.",
            "is_constructor": 1
        },
        "RedisCommandBroker": {
            "name": "RedisCommandBroker",
            "shortname": "RedisCommandBroker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 23,
            "description": "Brokers messages using Redis as the medium.  The implementation follows a\npublish/subscribe model that allows for listening for changes based on a a\nspecified channel.",
            "is_constructor": 1
        },
        "MongoRegistrationProvider": {
            "name": "MongoRegistrationProvider",
            "shortname": "MongoRegistrationProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 23,
            "description": "Implements the necessary functions in order to be able to create and manage\na service registry for PB processes in the cluster.  This provider uses MongoDB\nas the storage.  In addition, it leverages MongoDB's TTL collections.  The\nreaper for mongo runs every 60 seconds.  It is possible for dead processes to\nappear in the status list for up to that magical 60 second threshold.  The\nname of the collection used to store all statuses is determined by the\nconfiguration property: \"registry.key\".",
            "is_constructor": 1
        },
        "RedisRegistrationProvider": {
            "name": "RedisRegistrationProvider",
            "shortname": "RedisRegistrationProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 23,
            "description": "Implements the necessary functions in order to be able to create and manage\na service registry for PB processes in the cluster.  This provider uses Redis\nas the storage.  In addition, it leverages Redis's expiry functionality to\nexpire entries automatically if they have not been touched.  In order to\nretrieve all nodes/processes in the cluster the provider must execute\nRedis's \"keys\" function which is an expensive operation.  To lessen the\nimpact on production systems the provider creates and manages its own Redis\nclient and switches to DB 2 in order to minimize the number of keys that\nneed to be scanned since the rest of the PB system leverages DB 0.",
            "is_constructor": 1
        },
        "AnalyticsManager": {
            "name": "AnalyticsManager",
            "shortname": "AnalyticsManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\analytics_manager.js",
            "line": 25,
            "description": "Provides functionality to render HTML snippets to report metrics back to \nregistered analytics providers.",
            "is_constructor": 1
        },
        "CallHomeService": {
            "name": "CallHomeService",
            "shortname": "CallHomeService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\call_home_service.js",
            "line": 27,
            "is_constructor": 1
        },
        "ServerRegistration": {
            "name": "ServerRegistration",
            "shortname": "ServerRegistration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\server_registration.js",
            "line": 37,
            "description": "Service that provides the ability for the process/node to register itself so\nthat other nodes in the system can find it.  In addition, it helps with the\nhealth monitoring of the system.",
            "is_constructor": 1
        },
        "SettingsServiceFactory": {
            "name": "SettingsServiceFactory",
            "shortname": "SettingsServiceFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\settings.js",
            "line": 23,
            "description": "SettingServiceFactory - Creates a service that will provide access to settings",
            "is_constructor": 1
        },
        "System": {
            "name": "System",
            "shortname": "System",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\system.js",
            "line": 26,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pb",
                    "description": "The PencilBlue namespace",
                    "type": "Object"
                }
            ]
        },
        "CommentService": {
            "name": "CommentService",
            "shortname": "CommentService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Theme",
            "namespace": "",
            "file": "include\\theme\\comments.js",
            "line": 35,
            "description": "Retrieves comment information"
        },
        "TopMenuService": {
            "name": "TopMenuService",
            "shortname": "TopMenuService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Theme",
            "namespace": "",
            "file": "include\\theme\\top_menu.js",
            "line": 27,
            "description": "Service for top menu navigation.\nNOTE: This is not for administrative pages."
        },
        "ValidationService": {
            "name": "ValidationService",
            "shortname": "ValidationService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\validation\\validation_service.js",
            "line": 25,
            "description": "Provides a set of functions for common validations.",
            "submodule": "Validation",
            "is_constructor": 1
        },
        "SecurityService": {
            "name": "SecurityService",
            "shortname": "SecurityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Security",
            "namespace": "",
            "file": "include\\access_management.js",
            "line": 24,
            "description": "Service for managing user access"
        },
        "AdminNavigation": {
            "name": "AdminNavigation",
            "shortname": "AdminNavigation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Admin",
            "namespace": "",
            "file": "include\\admin_navigation.js",
            "line": 26,
            "description": "Provides function to construct the structure needed to display the navigation\nin the Admin section of the application."
        },
        "ClientJs": {
            "name": "ClientJs",
            "shortname": "ClientJs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\client_js.js",
            "line": 23,
            "description": "Service for creating JavaScript tags"
        },
        "Configuration": {
            "name": "Configuration",
            "shortname": "Configuration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\config.js",
            "line": 27,
            "description": "Default configuration.  The settings here should be overriden by taking the\nexample file \"sample.config.json\" and modifying it to override the properties\nshown below.  In order to properly override the default configuration do the\nfollowing:\n1) copy \"sample.config.json\" to \"/etc/pencilblue/config.json\"\n2) Override the properties as desired.\n3) Add any custom properties you wish to provide for your specific purposes.",
            "is_constructor": 1
        },
        "ContentService": {
            "name": "ContentService",
            "shortname": "ContentService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\content.js",
            "line": 22,
            "description": "Service for content settings retrieval"
        },
        "EmailService": {
            "name": "EmailService",
            "shortname": "EmailService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\email.js",
            "line": 24,
            "description": "Service for sending emails."
        },
        "LibrariesService": {
            "name": "LibrariesService",
            "shortname": "LibrariesService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\libraries.js",
            "line": 23,
            "description": "Service for library settings retrieval"
        },
        "Localization": {
            "name": "Localization",
            "shortname": "Localization",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\localization.js",
            "line": 29,
            "description": "Provides functions to translate items based on keys.  Also\nassists in the determination of the best language for the given user."
        },
        "PB": {
            "name": "PB",
            "shortname": "PB",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\requirements.js",
            "line": 21,
            "description": "Requirements - Responsible for declaring all of the system types and modules\nneeded to construct the system API object.",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The pb namespace",
                "type": "Object"
            }
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\util.js",
            "line": 27,
            "description": "Provides a set of utility functions used throughout the code base"
        },
        "PencilBlue": {
            "name": "PencilBlue",
            "shortname": "PencilBlue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "pencilblue.js",
            "line": 28,
            "description": "The main driver file for PencilBlue.  Provides the function necessary to\nstart up the master and/or child processes.  In addition, it is responsible\nfor ensuring that all system services are available by requiring the\n\"requirements.js\" file.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 38,
            "description": "Flag to indicate if the form should automatically sanitize the incoming\nvalues.  In this case sanitize means it will attempt to strip away any\nHTML tags to prevent HTML injection and XSS.",
            "itemtype": "property",
            "name": "autoSanitize",
            "type": "{Boolean}",
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 47,
            "description": "The entry point called by the RequestHandler.  Executes the calls to the\nvalidation framework then, if passes, executes the action handler.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 72,
            "description": "Provides the hash of all actions supported by this controller",
            "itemtype": "method",
            "name": "getActions",
            "return": {
                "description": "An empty hash of actions since this is meant to be\noverriden.",
                "type": "Object"
            },
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 82,
            "description": "Validates the query, path, and post parameters in parallel and calls back\nwith any validation errors.",
            "itemtype": "method",
            "name": "validateParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 141,
            "itemtype": "method",
            "name": "getAutoSanitize",
            "return": {
                "description": "{Boolean"
            },
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 149,
            "itemtype": "method",
            "name": "setAutoSanitize",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 157,
            "description": "Validates any path parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded. The default implementation examines the\nvalue for the action in the value returned by ApiActionController#getActions.\nIf the value evaluates to true then the implementation will validate that an\n\"id\" path parameter was passed.",
            "itemtype": "method",
            "name": "validatePathParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 178,
            "description": "Validates any query parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded. The default implementation passes an empty\nerror array.",
            "itemtype": "method",
            "name": "validateQueryParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 191,
            "description": "Validates any post parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded. The default implementation passes an empty\nerror array.",
            "itemtype": "method",
            "name": "validatePostParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "post",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 31,
            "description": "Indicates if a field should be part of the projection",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "FIELD_ON",
            "type": "{String}",
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 40,
            "description": "Indicates if a field should be part of the projection",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "FIELD_OFF",
            "type": "{String}",
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 49,
            "description": "Retrieves a resource by ID where :id is a path parameter",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 59,
            "description": "Retrieves one or more resources from a collection.  The endpoint \nsupports the following query string parameters:\n<ul>\n<li>$select - A comma separated list of key/value pairs where a value \nof 1 indicates the field will be returned and 0 indicates the \nabsensence.  $select=_id=1,name=1,description=0</li>\n<li>$order - A comma separated list of key/value pairs where a value of \n1 indicates ascending a value of 0 or less indicates descending. \n$order=name=1,created_date=0</li>\n<li>$limit - An integer representing the maximum number of results to \nreturn</li>\n<li>$offset - An integer representing the number of items to skip before \nreturning results</li>\n<li>$where - Currently not supported</li>\n</ul>",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 83,
            "description": "Prcoess the query string and builds the options for passing to the \nobject service",
            "itemtype": "method",
            "name": "processQuery",
            "return": {
                "description": "The options representing the query",
                "type": "Object"
            },
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 127,
            "description": "Processes the query string to develop the where clause for the query request",
            "itemtype": "method",
            "name": "processWhere",
            "params": [
                {
                    "name": "q",
                    "description": "The hash of all query parameters from the request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 144,
            "description": "Processes the value of a $order query string variable",
            "itemtype": "method",
            "name": "processOrder",
            "params": [
                {
                    "name": "rawOrder",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Contains the order statement and an array of failures",
                "type": "Object"
            },
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 183,
            "description": "Processes the value of a $select query string variable",
            "itemtype": "method",
            "name": "processSelect",
            "params": [
                {
                    "name": "rawSelect",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Contains the select statement and an array of failures",
                "type": "Object"
            },
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 220,
            "description": "Creates a resource",
            "itemtype": "method",
            "name": "post",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 230,
            "description": "Retrieves the request DTO.  The function ensures that the id field is \nremoved.",
            "itemtype": "method",
            "name": "getPostDto",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 242,
            "description": "Updates a resource with the ID specified in the body of the request.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 252,
            "description": "Deletes the resource with the specified ID from the URI path \":id\".",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 262,
            "description": "Creates a handler that can be used to prepare a response for GET \noperations.  When the result is NULL a 404 is generated.  Otherwise a 200 \nresponse along with the object serialized as JSON is the generated \nresponse",
            "itemtype": "method",
            "name": "handleDelete",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "That can prepare a response and execute the callback",
                "type": "Function"
            },
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 287,
            "description": "Creates a handler that can be used to prepare a response for POST or PUT \noperations. Upon successful create a 201 status code is returned. Upon \nsuccessful update a 200 status code is returned.  Validation errors are \nexpected to be handled by the global error handler and should return 400",
            "itemtype": "method",
            "name": "handleSave",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "That can prepare a response and execute the callback",
                "type": "Function"
            },
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 309,
            "description": "Creates a handler that can be used to prepare a response for DELETE \noperations. When the item cannot be found a 404 is issued.  When the \nobject is successfully delete a 204 status is provided",
            "itemtype": "method",
            "name": "handleDelete",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "That can prepare a response and execute the callback",
                "type": "Function"
            },
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\api\\base_api_controller.js",
            "line": 334,
            "description": "Calls back to the request handler with an error representing a 404 not \nfound",
            "itemtype": "method",
            "name": "notFound",
            "class": "BaseApiController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 34,
            "description": "The code for a successful API call",
            "static": 1,
            "itemtype": "property",
            "name": "API_SUCCESS",
            "type": "{Integer}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 42,
            "description": "The code for a failed API call",
            "static": 1,
            "itemtype": "property",
            "name": "API_FAILURE",
            "type": "{Integer}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 50,
            "description": "The snippet of JS code that will ensure that a form is refilled with values\nfrom the post",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "FORM_REFILL_PATTERN",
            "type": "{String}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 62,
            "description": "The snippet of HTML that will display an alert box",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "ALERT_PATTERN",
            "type": "{String}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 71,
            "description": "A mapping that converts the HTTP standard for content-type encoding and \nwhat the Buffer prototype expects",
            "static": 1,
            "access": "private",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "ENCODING_MAPPING",
            "type": "{Object}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 86,
            "description": "Responsible for initializing a controller.  Properties from the\nRequestHandler are passed down so that the controller has complete access to\na variety of request specified properties.  By default the function transfers the options over to instance variables that can be access during rendering.  In addition, the function sets up the template service along with a set of local flags:\n<ul>\n<li>locale - The selected locale for the request (NOTE: this may not match the requested language if not supported)</li>\n<li>error_success - An alert box if one was registered by the controller</li>\n<li>page_name - The title of the page</li>\n<li>localization_script - Includes the localization script so that it can be used client side</li>\n<li>analytics - Inserts the necessary javascript for analytics providers</li>\n</ul>",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "props",
                    "description": "The properties needed to initialize the controller",
                    "type": "Object",
                    "props": [
                        {
                            "name": "request_handler",
                            "description": "",
                            "type": "RequestHandler"
                        },
                        {
                            "name": "request",
                            "description": "The incoming request",
                            "type": "Request"
                        },
                        {
                            "name": "response",
                            "description": "The outgoing response",
                            "type": "Response"
                        },
                        {
                            "name": "session",
                            "description": "The session object",
                            "type": "Object"
                        },
                        {
                            "name": "localization_service",
                            "description": "The localization service instance for the request",
                            "type": "Localization"
                        },
                        {
                            "name": "path_vars",
                            "description": "The path variables associated with the URL for the request",
                            "type": "Object"
                        },
                        {
                            "name": "query",
                            "description": "The query string variables associated with the URL for the request",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single optional argument: cb(Error)",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 149,
            "itemtype": "property",
            "name": "activeTheme",
            "type": "{String}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 169,
            "description": "Retrieves a context object that contains the necessary information for \nservice prototypes",
            "itemtype": "method",
            "name": "getServiceContext",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 179,
            "itemtype": "method",
            "name": "requiresClientLocalization",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 188,
            "itemtype": "method",
            "name": "requiresClientLocalizationCallback",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 202,
            "itemtype": "method",
            "name": "formError",
            "params": [
                {
                    "name": "message",
                    "description": "The error message to be displayed",
                    "type": "String"
                },
                {
                    "name": "redirectLocation",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 216,
            "itemtype": "method",
            "name": "displayErrorOrSuccessCallback",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 238,
            "description": "Provides a page title.  This is picked up by the template engine when the\n^page_name^ key is found in a template.",
            "itemtype": "method",
            "name": "getPageName",
            "return": {
                "description": "The page title",
                "type": "String"
            },
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 248,
            "description": "Sets the page title",
            "itemtype": "method",
            "name": "setPageName",
            "params": [
                {
                    "name": "pageName",
                    "description": "The desired page title",
                    "type": "String"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 257,
            "itemtype": "method",
            "name": "getPostParams",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 281,
            "description": "Parses the incoming payload of a request as JSON formatted data.",
            "itemtype": "method",
            "name": "getJSONPostParams",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 310,
            "itemtype": "method",
            "name": "getPostData",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 339,
            "itemtype": "method",
            "name": "hasRequiredParams",
            "params": [
                {
                    "name": "queryObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "requiredParameters",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 366,
            "itemtype": "method",
            "name": "setFormFieldValues",
            "params": [
                {
                    "name": "post",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 376,
            "itemtype": "method",
            "name": "checkForFormRefill",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 394,
            "description": "Sanitizes an object.  This function is handy for incoming post objects.  It\niterates over each field.  If the field is a string value it will be\nsanitized based on the default sanitization rules\n(BaseController.getDefaultSanitizationRules) or those provided by the call\nto BaseController.getSanitizationRules.",
            "itemtype": "method",
            "name": "sanitizeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 418,
            "itemtype": "method",
            "name": "getSanitizationRules",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 427,
            "description": "The sanitization rules that apply to Pages and Articles",
            "deprecated": true,
            "deprecationMessage": "Since 0.4.1",
            "static": 1,
            "itemtype": "method",
            "name": "getContentSanitizationRules",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 437,
            "deprecated": true,
            "deprecationMessage": "Since 0.4.1",
            "static": 1,
            "itemtype": "method",
            "name": "getDefaultSanitizationRules",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 446,
            "deprecated": true,
            "deprecationMessage": "Since 0.4.1",
            "static": 1,
            "itemtype": "method",
            "name": "sanitize",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 458,
            "description": "Redirects a request to a different location",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 468,
            "description": "Generates an generic API response object",
            "static": 1,
            "itemtype": "method",
            "name": "apiResponse",
            "return": {
                "description": "JSON",
                "type": "String"
            },
            "class": "BaseController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 33,
            "itemtype": "method",
            "name": "onPostParamsRetrieved",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 90,
            "itemtype": "method",
            "name": "getRequiredFields",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 99,
            "itemtype": "method",
            "name": "canDelete",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 108,
            "itemtype": "method",
            "name": "onBeforeDelete",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 117,
            "itemtype": "method",
            "name": "onAfterDelete",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 126,
            "itemtype": "method",
            "name": "getDeleteQuery",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 135,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error",
                    "optional": true
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 149,
            "itemtype": "method",
            "name": "getFormErrorRedirect",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 160,
            "itemtype": "method",
            "name": "getDeleteCollection",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 169,
            "itemtype": "method",
            "name": "getSuccessRedirect",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 178,
            "itemtype": "method",
            "name": "getDataOnSuccess",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DeleteController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 188,
            "itemtype": "method",
            "name": "getDefaultErrorMessage",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DeleteController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 33,
            "description": "Instructs the controller to automatically sanitize any incoming post data\nwhen set to TRUE.",
            "itemtype": "property",
            "name": "autoSanitize",
            "type": "{Boolean}",
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 41,
            "description": "Responsible for gathering the payload data from the request and parsing it.\nThe result is passed down to the controller's onPostParamsRetrieved function.\nIn addition and the <i>autoSanitize</i> property is TRUE, the posted\nparameters will be sanitized.",
            "see": [
                "BaseController#render"
            ],
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 65,
            "itemtype": "method",
            "name": "getAutoSanitize",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 74,
            "itemtype": "method",
            "name": "setAutoSanitize",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 83,
            "itemtype": "method",
            "name": "onPostParamsError",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 94,
            "description": "Called after the posted parameters have been received and parsed.  The\nfunction should be overriden in order to continue processing and render the\nresult of the request.  The default implementation echoes the received\nparameters as JSON.",
            "itemtype": "method",
            "name": "onPostParamsRetrieved",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FormController"
        },
        {
            "file": "controllers\\view_controller.js",
            "line": 35,
            "description": "Returns the path to the view template.  Must be implemented by the \nextending controller prototype.",
            "itemtype": "method",
            "name": "getView",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "View Controller"
        },
        {
            "file": "controllers\\view_controller.js",
            "line": 45,
            "description": "Called before the controller attempts to render the view",
            "itemtype": "method",
            "name": "beforeTemplateLoad",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "View Controller"
        },
        {
            "file": "controllers\\view_controller.js",
            "line": 54,
            "description": "Returns the path to the view template.  Must be implemented by the \nextending controller prototype.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "View Controller"
        },
        {
            "file": "controllers\\view_controller.js",
            "line": 84,
            "description": "Loads the template with the view provided by the extending controller \nprototype implementation.",
            "itemtype": "method",
            "name": "loadTemplate",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "View Controller"
        },
        {
            "file": "controllers\\view_controller.js",
            "line": 94,
            "description": "Inspects the result of the controller's execution\nprototype implementation.",
            "itemtype": "method",
            "name": "onRenderComplete",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "viewContent",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "View Controller"
        },
        {
            "file": "include\\dao\\mongo\\ttl_index_helper.js",
            "line": 32,
            "itemtype": "property",
            "name": "lockService",
            "type": "{LockService}",
            "class": "TTLIndexHelper"
        },
        {
            "file": "include\\dao\\mongo\\ttl_index_helper.js",
            "line": 40,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "INDEX_MOD_KEY_PREFIX",
            "type": "{String}",
            "class": "TTLIndexHelper"
        },
        {
            "file": "include\\dao\\mongo\\ttl_index_helper.js",
            "line": 50,
            "itemtype": "method",
            "name": "ensureIndex",
            "params": [
                {
                    "name": "procedure",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TTLIndexHelper"
        },
        {
            "file": "include\\dao\\mongo\\ttl_index_helper.js",
            "line": 137,
            "description": "Retrieves and compares the expiry of a TTL index on the specified \ncollection to the expiry provided.  Calls back with TRUE if and only if \nthe index is found the expiries match.",
            "itemtype": "method",
            "name": "hasCorrectTTLIndex",
            "params": [
                {
                    "name": "collection",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "indexName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "expectedExpiry",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TTLIndexHelper"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 32,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "CLIENT",
            "type": "{RedisClient}",
            "class": "CacheFactory",
            "module": "dao"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 41,
            "description": "Retrieves the instance of Redis or FakeRedis",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "client",
                "type": "Object"
            },
            "class": "CacheFactory",
            "module": "dao"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 60,
            "itemtype": "method",
            "name": "createInstance",
            "params": [
                {
                    "name": "config",
                    "description": "The Redis configuration.  When not provided the \n configuration for this instance of PencilBlue is used.\n return {RedisClient}",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "CacheFactory",
            "module": "dao"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 77,
            "description": "Shuts down the Redis or FakeRedis instance",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheFactory",
            "module": "dao"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 36,
            "description": "The name of the DB that this instance is intended to interact with.  By\ndefault, it goes to the name of the DB provided by system configuration\nproperty db.name.",
            "itemtype": "property",
            "name": "dbName",
            "type": "{String}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 46,
            "description": "Static variable to indicate that all indices of a document should be\nretrieved",
            "itemtype": "property",
            "name": "PROJECT_ALL",
            "type": "{Object}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 55,
            "description": "Static variable to indicate that documents should be retrieve from anywhere",
            "itemtype": "property",
            "name": "ANYWHERE",
            "type": "{Object}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 63,
            "description": "Static variable to indicate that documents should be returned in their\nnatural order",
            "itemtype": "property",
            "name": "NATURAL_ORDER",
            "type": "{Array}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 72,
            "description": "Static varible to sort ascending",
            "itemtype": "property",
            "name": "ASC",
            "type": "{Number}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 80,
            "description": "Static variable to sort descending",
            "itemtype": "property",
            "name": "DESC",
            "type": "{Number}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 88,
            "description": "Retrieves an object by ID",
            "itemtype": "method",
            "name": "loadById",
            "params": [
                {
                    "name": "id",
                    "description": "The unique id of the object",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection the object is in",
                    "type": "String"
                },
                {
                    "name": "Key",
                    "description": "value pair object to exclude the retrival of data",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 101,
            "description": "Retrieves objects matching a key value pair",
            "itemtype": "method",
            "name": "loadByValue",
            "params": [
                {
                    "name": "key",
                    "description": "The key to search for",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "The value to search for",
                    "type": "*"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "Key value pair object to exclude the retrival of data",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 117,
            "description": "Retrieves object matching several key value pairs",
            "itemtype": "method",
            "name": "loadByValues",
            "params": [
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "Key value pair object to exclude the retrival of data",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 146,
            "description": "Gets the count of objects matching criteria",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "entityType",
                    "description": "The type of object to search for",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 168,
            "description": "Determines if an object extists matching criteria",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 182,
            "description": "Determines if there is only a single document that matches the specified query",
            "itemtype": "method",
            "name": "unique",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "exclusionId",
                    "description": "Object Id to exclude from the search",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 213,
            "description": "Queries the database. Added in the 0.2.5 release",
            "itemtype": "method",
            "name": "q",
            "params": [
                {
                    "name": "collection",
                    "description": "The type of object to search for",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options for the query",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "where",
                            "description": "The conditions under which results are\nreturned",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        },
                        {
                            "name": "select",
                            "description": "Selection type object",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "Order by array (MongoDB syntax)",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "Number of documents to retrieve",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "Start index of retrieval",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "handler",
                            "description": "A function that takes two paramters.\nThe first, the Cursor object that contains the results of the query.  The\nsecond is a callback that takes two parameters.  An error if occurred and by\ndefault, the documents returned by the query.  Custom handlers may provide\nwhatever value it wishes including the cursor if it wishes to handle the\nresults itself.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback function that takes two parameters.  The\nfirst, an error, if occurred and the second is the result provided by the\nhandler.  By default it provides an array of objects that represent the\nitems returned by the query.",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 276,
            "description": "A cursor handler that iterates over each result from the query that created\nthe cursor and places the result into an array.  The array of documents is\nprovided as the second argument in the callback.",
            "itemtype": "method",
            "name": "toArrayCursorHandler",
            "params": [
                {
                    "name": "cursor",
                    "description": "",
                    "type": "Cursor"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 288,
            "description": "The actual implementation for querying.  The function does not do the same\ntype checking as the wrapper function \"query\".  This funciton is responsible\nfor doing the heavy lifting and returning the result back to the calling intity.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_doQuery",
            "params": [
                {
                    "name": "entityType",
                    "description": "The collection to query",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "The where clause",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "select",
                    "description": "The fields to project",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "order",
                    "description": "The ordering",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "orderBy",
                    "description": "The ordering. Parameter orderBy is deprecated, use order instead.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "The maximum number of results to return",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "The number of results to skip before returning results.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "The MongoDB cursor that provides the results of the query",
                "type": "Cursor"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 356,
            "description": "Retrieves a refernce to the DB with active connection",
            "itemtype": "method",
            "name": "getDb",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 365,
            "description": "Inserts or replaces an existing document with the specified DB Object. \nAn insert is distinguished from an update based the presence of the _id \nfield.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "dbObj",
                    "description": "The system object to persist",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "See http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#save",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first, an\nerror, if occurred.  The second is the object that was persisted",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 416,
            "description": "Provides a mechanism to save an array of objects all from the same\ncollection.  The function handles updates and inserts.  The difference is\ndetermined by the truth value of the ID field of each object.",
            "itemtype": "method",
            "name": "saveBatch",
            "params": [
                {
                    "name": "objArray",
                    "description": "The array of objects to persist",
                    "type": "Array"
                },
                {
                    "name": "collection",
                    "description": "The collection to persist the objects to",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "See http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#initializeunorderedbulkop",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two arguments.  The first is an\nerror, if occurred. The second is the second parameter of the callback\ndescribed here: http://mongodb.github.io/node-mongodb-native/api-generated/unordered.html#execute",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 471,
            "description": "Updates a specific set of fields. This is handy for performing upserts.",
            "itemtype": "method",
            "name": "updateFields",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to update object(s) in",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The where clause to execute to find the existing object",
                    "type": "Object"
                },
                {
                    "name": "updates",
                    "description": "The updates to perform",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Any options to go along with the update",
                    "type": "Object",
                    "props": [
                        {
                            "name": "upsert",
                            "description": "Inserts the object is not found",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "multi",
                            "description": "Updates multiple records if the query\nfinds more than 1",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 502,
            "description": "Removes an object from persistence",
            "itemtype": "method",
            "name": "deleteById",
            "params": [
                {
                    "name": "oid",
                    "description": "The Id of the object to remove",
                    "type": "String|ObjectID"
                },
                {
                    "name": "collection",
                    "description": "The collection the object is in",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is\nan error, if occurred.  The second is the number of records deleted by the\nexecution of the command.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise object iff a callback is not provided",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 522,
            "description": "Removes objects from persistence that match criteria",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "See http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#remove",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameter. The first is an\nerror, if occurred.  The second is the number of records that were removed\nfrom persistence.",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 564,
            "description": "Sends a command to the DB.\nhttp://mongodb.github.io/node-mongodb-native/api-generated/db.html#command",
            "itemtype": "method",
            "name": "command",
            "params": [
                {
                    "name": "The",
                    "description": "command to execute",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 586,
            "description": "Attempts to create an index.  If the collection already exists then the\noperation is skipped.\nhttp://mongodb.github.io/node-mongodb-native/api-generated/collection.html#ensureindex",
            "itemtype": "method",
            "name": "ensureIndex",
            "params": [
                {
                    "name": "procedure",
                    "description": "The objects containing the necessary parameters\nand options to create the index.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "collection",
                            "description": "The collection to build an index for",
                            "type": "String"
                        },
                        {
                            "name": "spec",
                            "description": "An object that specifies one or more fields\nand sort direction for the index.",
                            "type": "Object"
                        },
                        {
                            "name": "options",
                            "description": "An optional parameter that can\nspecify the options for the index.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 620,
            "description": "Retrieves indexes for the specified collection",
            "itemtype": "method",
            "name": "indexInfo",
            "params": [
                {
                    "name": "collection",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 641,
            "description": "Drops the specified index from the given collection",
            "itemtype": "method",
            "name": "dropIndex",
            "params": [
                {
                    "name": "collection",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "indexName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 663,
            "description": "Determines if a collection exists in the DB",
            "itemtype": "method",
            "name": "entityExists",
            "params": [
                {
                    "name": "entity",
                    "description": "The name of the collection",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first, an\nerror, if occurred. The second is a boolean where TRUE means the entity\nexists, FALSE if not.",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 686,
            "description": "Creates a collection in the DB",
            "itemtype": "method",
            "name": "createEntity",
            "params": [
                {
                    "name": "entityName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options for the collection. See\nhttp://mongodb.github.io/node-mongodb-native/api-generated/db.html#createcollection",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first, an\nError, if occurred. The second is the result of the creation command.",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 712,
            "description": "Creates a basic where clause based on the specified Id",
            "deprecated": true,
            "deprecationMessage": "since 0.4.0",
            "static": 1,
            "itemtype": "method",
            "name": "getIDWhere",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 725,
            "description": "Creates a basic where clause based on the specified Id",
            "static": 1,
            "itemtype": "method",
            "name": "getIdWhere",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 738,
            "description": "Creates a where clause that equates to select where [idProp] is in the\nspecified array of values.",
            "static": 1,
            "itemtype": "method",
            "name": "getIDInWhere",
            "params": [
                {
                    "name": "objArray",
                    "description": "The array of acceptable values",
                    "type": "Array"
                },
                {
                    "name": "idProp",
                    "description": "The property that holds a referenced ID value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 752,
            "description": "Creates a where clause that equates to select where [idProp] is in the\nspecified array of values.",
            "static": 1,
            "itemtype": "method",
            "name": "getIdInWhere",
            "params": [
                {
                    "name": "objArray",
                    "description": "The array of acceptable values",
                    "type": "Array"
                },
                {
                    "name": "idProp",
                    "description": "The property that holds a referenced ID value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 783,
            "description": "Creates a where clause that equates to select where [idProp] is not in the\nspecified array of values.",
            "static": 1,
            "itemtype": "method",
            "name": "getIDInWhere",
            "params": [
                {
                    "name": "objArray",
                    "description": "The array of acceptable values",
                    "type": "Array"
                },
                {
                    "name": "idProp",
                    "description": "The property that holds a referenced ID value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 810,
            "description": "Creates a basic where clause based on not equalling the specified Id",
            "deprecated": true,
            "static": 1,
            "itemtype": "method",
            "name": "getNotIDWhere",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 823,
            "description": "Creates a basic where clause based on not equalling the specified Id",
            "static": 1,
            "itemtype": "method",
            "name": "getNotIdWhere",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 836,
            "description": "Creates a where clause that indicates to select where the '_id' field does\nnot equal the specified value.",
            "deprecated": true,
            "deprecationMessage": "since 0.4.0",
            "static": 1,
            "itemtype": "method",
            "name": "getNotIDField",
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 849,
            "description": "Creates a where clause that indicates to select where the '_id' field does\nnot equal the specified value.",
            "static": 1,
            "itemtype": "method",
            "name": "getNotIdField",
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 860,
            "description": "Creates an MongoDB ObjectID object",
            "deprecated": true,
            "deprecationMessage": "since 0.4.0",
            "static": 1,
            "itemtype": "method",
            "name": "getObjectID",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ObjectID object",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 873,
            "description": "Creates an MongoDB ObjectID object",
            "static": 1,
            "itemtype": "method",
            "name": "getObjectId",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ObjectID object",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 889,
            "description": "Updates a DB object with a created time stamp and last modified time stamp.",
            "static": 1,
            "itemtype": "method",
            "name": "updateChangeHistory",
            "params": [
                {
                    "name": "dbObject",
                    "description": "Object to update",
                    "type": "Object"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 909,
            "description": "Transfers a system object from one type to another.  The system specific\nproperties are cleared so that when the object is persisted it will receive\nits own properties.",
            "static": 1,
            "itemtype": "method",
            "name": "transfer",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to convert",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "The type to convert it to",
                    "type": "String"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 929,
            "description": "Retrieves the field in system objects that represents the unique identifier.\nThe default implementation returns the mongo field '_id'.",
            "static": 1,
            "itemtype": "method",
            "name": "getIdField",
            "return": {
                "description": "'_id'",
                "type": "String"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 940,
            "description": "Determines if two object IDs are equal",
            "static": 1,
            "itemtype": "method",
            "name": "areIdsEqual",
            "params": [
                {
                    "name": "id1",
                    "description": "",
                    "type": "ObjectID|String"
                },
                {
                    "name": "id2",
                    "description": "",
                    "type": "ObjectID|String"
                }
            ],
            "return": {
                "description": "TRUE if IDs are equal",
                "type": "Boolean"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 37,
            "description": "Reference to the system instance of System",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "system",
            "type": "{System}",
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 45,
            "description": "Keeps track of all active DBs with active connection pools.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "dbs",
            "type": "{Object}",
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 53,
            "description": "Retrieves a handle to the specified database.",
            "itemtype": "method",
            "name": "getDb",
            "params": [
                {
                    "name": "name",
                    "description": "The database name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise object",
                "type": "Object"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 105,
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "auth",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "db",
                    "description": "",
                    "type": "Db"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 121,
            "description": "Indicates if a connection pool to the specified database has already been\ninitialized",
            "itemtype": "method",
            "name": "hasConnected",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the pool has been connected",
                "type": "Boolean"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 133,
            "description": "Takes an Array of indexing procedures and delegates them out to paralleled\ntasks.",
            "itemtype": "method",
            "name": "processIndices",
            "params": [
                {
                    "name": "procedures",
                    "description": "An array of objects that describe the index to \nplace upon a collection.  The object contains three properties.  \n\"collection\" a string that represents the name of the collection to build an \nindex for.  \"specs\" is an object that describes which fields to index.  The \nkeys are the field names and the value is -1 for descending order and 1 for \nascending.  \"options\" is an object that that provides specific index \nproperties such as unique or sparse.  See \nhttp://mongodb.github.io/node-mongodb-native/api-generated/collection.html#ensureindex \nfor specific MongoDB implementation details for specs and options.",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first, an \nError, if occurred.  Secondly, an object that contains two properties. \n\"result\" an array of the results where each object in the array represents \nthe result of the request to ensure the index.  \"errors\" an array of errors \nthat occurred while indexing.  The function does not terminate after the \nfirst error.  Instead it allows all indices to attempt to be created and \ndefer the reporting of an error until the end.",
                    "type": "Function"
                }
            ],
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 190,
            "description": "Iterates over all database handles and call's their shutdown function.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Array of promise objects, one for each shutdown call",
                "type": "Array"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 226,
            "description": "The protocol prefix for connecting to a mongo cluster",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "PROTOCOL_PREFIX",
            "type": "{Object}",
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 236,
            "static": 1,
            "itemtype": "method",
            "name": "buildConnectionStr",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "servers",
                            "description": "",
                            "type": "Array"
                        },
                        {
                            "name": "name",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 33,
            "description": "The fallback MIME type",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "DEFAULT_MIME",
            "type": "{String}",
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 43,
            "description": "Error code when a validation failure occurs",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BAD_REQUEST",
            "type": "{Integer}",
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 53,
            "description": "Converts an error to a plain object that can be serialized",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "convertToObject",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 76,
            "description": "Serializes an error as JSON",
            "static": 1,
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mime",
                            "description": "The MIME type of the format to render",
                            "type": "String"
                        },
                        {
                            "name": "error",
                            "description": "The error to be rendered",
                            "type": "Error"
                        },
                        {
                            "name": "request",
                            "description": "",
                            "type": "Request",
                            "optional": true
                        },
                        {
                            "name": "localization",
                            "description": "",
                            "type": "Localization",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 94,
            "description": "Serializes an error as HTML",
            "static": 1,
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mime",
                            "description": "The MIME type of the format to render",
                            "type": "String"
                        },
                        {
                            "name": "error",
                            "description": "The error to be rendered",
                            "type": "Error"
                        },
                        {
                            "name": "request",
                            "description": "",
                            "type": "Request",
                            "optional": true
                        },
                        {
                            "name": "localization",
                            "description": "",
                            "type": "Localization",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 114,
            "description": "Serializes an error as XML",
            "static": 1,
            "itemtype": "method",
            "name": "html",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mime",
                            "description": "The MIME type of the format to render",
                            "type": "String"
                        },
                        {
                            "name": "error",
                            "description": "The error to be rendered",
                            "type": "Error"
                        },
                        {
                            "name": "request",
                            "description": "",
                            "type": "Request",
                            "optional": true
                        },
                        {
                            "name": "localization",
                            "description": "",
                            "type": "Localization",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 169,
            "description": "Registers a function to be mapped to a given MIME type.  The function \nwill be expected to serialize any given Error to the format specified by \nthe MIME type",
            "static": 1,
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "mime",
                    "description": "The mime type to register the provider for",
                    "type": "String"
                },
                {
                    "name": "A",
                    "description": "function that takes two parameters.  The first is an \nobject that provides the error and the second parameter is the callback.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE when the provider was registered, FALSE if not",
                "type": "Boolean"
            },
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 188,
            "description": "Unregisters the provider for the given MIME type.  If a default MIME \ntype is specified the current formatter will be unregistered and set to \nthe default implementation",
            "static": 1,
            "itemtype": "method",
            "name": "unregister",
            "params": [
                {
                    "name": "mime",
                    "description": "The MIME type to unregister",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE when the provider was found and unregistered, \nFALSE if not",
                "type": "Boolean"
            },
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 211,
            "description": "Formats an error for the provided MIME type",
            "static": 1,
            "itemtype": "method",
            "name": "formatForMime",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mime",
                            "description": "The MIME type of the format to render",
                            "type": "String"
                        },
                        {
                            "name": "error",
                            "description": "The error to be rendered",
                            "type": "Error"
                        },
                        {
                            "name": "request",
                            "description": "",
                            "type": "Request",
                            "optional": true
                        },
                        {
                            "name": "localization",
                            "description": "",
                            "type": "Localization",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 253,
            "description": "Retrieves the formatter for the specified MIME type",
            "static": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "mime",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "formatter for the specified MIME. 'undefined' if does \nnot exist.",
                "type": "Function"
            },
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 265,
            "description": "Contains the default mapping of MIME type to function that will serialize \nthe error to that format",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULTS",
            "type": "{Object}",
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\formatters\\error_formatters.js",
            "line": 281,
            "description": "Contains the mapping of MIME type to function that will serialize the \nerror to that format",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "MIME_MAP",
            "type": "{Object}",
            "class": "ErrorFormatters",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 39,
            "description": "The upper bound on the number of errors that can occur within the provided \ntime frame before it is determined that recovery is not possible.",
            "itemtype": "property",
            "name": "errorSpan",
            "type": "{Integer}",
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 47,
            "description": "The upper bound on the amount of time, in milliseconds, that errors can \noccur in before it is determined that recovery is not possible.",
            "itemtype": "property",
            "name": "errorThreshold",
            "type": "{Integer}",
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 55,
            "description": "The list of errors that will be used to determin if too many errors have \noccurred within a given time frame.",
            "itemtype": "property",
            "name": "errors",
            "type": "{Array}",
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 63,
            "description": "The total number of errors that have occurred",
            "itemtype": "property",
            "name": "totalErrorCnt",
            "type": "{Integer}",
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 70,
            "description": "The prefix to any error message that is generated by the instance",
            "itemtype": "property",
            "name": "prefix",
            "type": "{String}",
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 78,
            "description": "Adds an error into the calculation to determine if too many errors have \noccurred within a particular time span. If the threshold has been broken an \nerror is thrown.",
            "itemtype": "method",
            "name": "throwIfOutOfBounds",
            "params": [
                {
                    "name": "The",
                    "description": "error that occurred",
                    "type": "Error"
                },
                {
                    "name": "prefix",
                    "description": "The error message text that will come first",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if threshold is in tact, FALSE if not",
                "type": "Boolean"
            },
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 94,
            "description": "Adds an error into the calculation to determine if too many errors have \noccurred within a particular time span.",
            "itemtype": "method",
            "name": "errorOccurred",
            "params": [
                {
                    "name": "The",
                    "description": "error that occurred",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "TRUE if threshold is in tact, FALSE if not",
                "type": "Boolean"
            },
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 114,
            "description": "Determines if the errors that have occurred are within the acceptable tolerance.",
            "itemtype": "method",
            "name": "isWithinLimits",
            "return": {
                "description": "TRUE if threshold in tact, FALSE if not",
                "type": "Boolean"
            },
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 128,
            "description": "Gets the time span over which the current set of errors has occurred",
            "itemtype": "method",
            "name": "getRange",
            "return": {
                "description": "The number of milliseconds over which the last \"n\" number \nof errors have occurred where \"n\" is the value is between 0 and the value of \nthe errorSpan property inclusive.",
                "type": "Integer"
            },
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 139,
            "description": "Generates and throws an Error that represents all of the errors that \ntriggered the threshold breach.",
            "static": 1,
            "itemtype": "method",
            "name": "generateError",
            "params": [
                {
                    "name": "errors",
                    "description": "The array of errors that will be represented by one \nwrapper error",
                    "type": "Array"
                },
                {
                    "name": "prefix",
                    "description": "The error message text that will come first",
                    "type": "String"
                }
            ],
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\errors_over_time.js",
            "line": 152,
            "description": "Creates an Error that represents all of the errors that triggered the \nthreshold breach.",
            "static": 1,
            "itemtype": "method",
            "name": "createError",
            "params": [
                {
                    "name": "errors",
                    "description": "The array of errors that will be represented by one \nwrapper error",
                    "type": "Array"
                },
                {
                    "name": "prefix",
                    "description": "The error message text that will come first",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "ErrorsOverTime",
            "module": "Database"
        },
        {
            "file": "include\\error\\pb_error.js",
            "line": 43,
            "description": "Sets the localization key for the error",
            "itemtype": "method",
            "name": "setLocalizationKey",
            "params": [
                {
                    "name": "key",
                    "description": "The localization key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The PBError object",
                "type": "Object"
            },
            "class": "PBError",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\error\\pb_error.js",
            "line": 55,
            "description": "Sets the source for the error",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "err",
                    "description": "The error source",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The PBError object",
                "type": "Object"
            },
            "class": "PBError",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\parsers\\index.js",
            "line": 33,
            "description": "The prefix in the content-type header that indicates the charset used in \nthe encoding",
            "static": 1,
            "access": "private",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "CHARSET_HEADER_PREFIX",
            "type": "{String}",
            "class": "BaseBodyParser",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\parsers\\index.js",
            "line": 44,
            "description": "A mapping that converts the HTTP standard for content-type encoding and \nwhat the Buffer prototype expects",
            "static": 1,
            "access": "private",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "ENCODING_MAPPING",
            "type": "{Object}",
            "class": "BaseBodyParser",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\parsers\\index.js",
            "line": 59,
            "description": "Attempts to retrieve the payload body as a string",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "The",
                    "description": "incoming request whose payload should be parsed",
                    "type": "Request"
                },
                {
                    "name": "A",
                    "description": "callback that taks two parameters: An Error, if occurred \nand the parsed body content as an object",
                    "type": "Function"
                }
            ],
            "class": "BaseBodyParser",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\parsers\\index.js",
            "line": 70,
            "description": "Retrieves the raw payload data as a string",
            "itemtype": "method",
            "name": "getRawData",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseBodyParser",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\parsers\\index.js",
            "line": 101,
            "description": "Attempts to extract charset attribute from the content-type header.",
            "static": 1,
            "itemtype": "method",
            "name": "getcontentEncoding",
            "params": [
                {
                    "name": "req",
                    "description": "",
                    "type": "Request"
                }
            ],
            "return": {
                "description": "the charset encoding",
                "type": "String"
            },
            "class": "BaseBodyParser",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\parsers\\index.js",
            "line": 137,
            "description": "Attempts to parse the request body as multi-part or form/url encoded content",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "The",
                    "description": "incoming request whose payload should be parsed",
                    "type": "Request"
                },
                {
                    "name": "A",
                    "description": "callback that taks two parameters: An Error, if occurred \nand the parsed body content as an object",
                    "type": "Function"
                }
            ],
            "class": "FormBodyParser",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\parsers\\index.js",
            "line": 167,
            "description": "Attempts to parse the request body as JSON content",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "The",
                    "description": "incoming request whose payload should be parsed",
                    "type": "Request"
                },
                {
                    "name": "A",
                    "description": "callback that taks two parameters: An Error, if occurred \nand the parsed body content as an object",
                    "type": "Function"
                }
            ],
            "class": "JsonBodyParser",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 46,
            "description": "A mapping that provides the interface type to parse the body based on the \nroute specification",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BODY_PARSER_MAP",
            "type": "{Object}",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 61,
            "description": "The fallback theme (pencilblue)",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_THEME",
            "type": "{String}",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 69,
            "description": "The internal storage of routes after they are validated and processed.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "storage",
            "type": "{Array}",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 79,
            "description": "The internal storage of static routes after they are validated and processed.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "staticRoutes",
            "type": "{Object}",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 88,
            "description": "The list of routes provided by the pencilblue plugin.  These routes are \nloaded first to ensure defaults are in place before other plugins are \ninitialized.  In the future this will change so that all plugins are treated \nequally.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "CORE_ROUTES",
            "type": "{Array}",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 100,
            "description": "Initializes the request handler prototype by registering the core routes for\nthe system.  This should only be called once at startup.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 126,
            "description": "Generates the controller callback object that will trigger the redirect\nheader to be sent back as part of the response.",
            "static": 1,
            "itemtype": "method",
            "name": "generateRedirect",
            "params": [
                {
                    "name": "location",
                    "description": "The fully qualified or relative URL to be redirected to",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object for the controller to call back with.",
                "type": "Object"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 140,
            "description": "Validates a route descriptor.  The specified object must have a \"controller\"\nproperty that points to a valid file and the \"path\" property must specify a\nvalid URL path structure.",
            "static": 1,
            "itemtype": "method",
            "name": "isValidRoute",
            "params": [
                {
                    "name": "descriptor",
                    "description": "The object to validate",
                    "type": "Object",
                    "props": [
                        {
                            "name": "controller",
                            "description": "The file path to the controller file",
                            "type": "String"
                        },
                        {
                            "name": "path",
                            "description": "The URL path",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 155,
            "description": "Unregisters all routes associated with a theme",
            "static": 1,
            "itemtype": "method",
            "name": "unregisterThemeRoutes",
            "params": [
                {
                    "name": "theme",
                    "description": "The plugin/theme uid",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The number of routes removed",
                "type": "Integer"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 185,
            "description": "Removes a route based on a URL path and theme UID",
            "static": 1,
            "itemtype": "method",
            "name": "unregisterRoute",
            "params": [
                {
                    "name": "The",
                    "description": "URL path",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "theme that owns the route",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the route was found and removed, FALSE if not",
                "type": "Boolean"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 229,
            "description": "Registers a route",
            "static": 1,
            "itemtype": "method",
            "name": "registerRoute",
            "params": [
                {
                    "name": "descriptor",
                    "description": "The route descriptor",
                    "type": "Object",
                    "props": [
                        {
                            "name": "method",
                            "description": "The HTTP method associated with\nthe route",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'ALL'"
                        },
                        {
                            "name": "path",
                            "description": "The URL path for the route.  The route\nsupports wild cards a well as path variables (/get/:id)",
                            "type": "String"
                        },
                        {
                            "name": "controller",
                            "description": "The file path to the controller to\nexecute when the path is matched to an incoming request.",
                            "type": "String"
                        },
                        {
                            "name": "access_level",
                            "description": "Use global constants:\nACCESS_USER,ACCESS_WRITER,ACCESS_EDITOR,ACCESS_MANAGING_EDITOR,ACCESS_ADMINISTRATOR",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "setup_required",
                            "description": "If true the system must have gone\nthrough the setup process in order to pass validation",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "auth_required",
                            "description": "If true, the user making the\nrequest must have successfully authenticated against the system.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "content_type",
                            "description": "The content type header sent with the response",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'text/html'"
                        }
                    ]
                },
                {
                    "name": "theme",
                    "description": "The plugin/theme UID",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the route was registered, FALSE if not",
                "type": "Boolean"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 329,
            "description": "Generates a regular expression based on the specified path.  In addition the\nalgorithm extracts any path variables that are included in the path.  Paths\ncan include two types of wild cards.  The traditional glob pattern style of\n\"/some/api/*\" can be used as well as path variables (\"/some/api/:action\").\nThe path variables will be passed to the controllers.",
            "static": 1,
            "itemtype": "method",
            "name": "getRoutePattern",
            "params": [
                {
                    "name": "The",
                    "description": "URL path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object containing three properties: The specified\n\"path\". The generated regular expression \"pattern\" as a string. Lastly, a\nhash of the path variables and their position in the path coorelating to its\ndepth in the path.",
                "type": "Object|null"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 388,
            "description": "Processes a request:\n<ol>\n\t<li>Initialize localization</li>\n\t<li>if Public Route:\n\t\t<ol>\n\t\t\t<li>If Valid Content\n\t\t\t\t<ol><li>Serve Public Content</li></ol>\n\t\t\t</li>\n\t\t\t<li>Else Serve 404</li>\n\t\t</ol>\n\t</li>\n\t<li>Else Parse Cookies</li>\n\t<li>Open/Create a session</li>\n\t<li>Get Route</li>\n</ol>",
            "itemtype": "method",
            "name": "handleRequest",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 441,
            "description": "Derives the locale and localization instance.",
            "itemtype": "method",
            "name": "deriveLocalization",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 457,
            "description": "Serves up public content from an absolute file path",
            "itemtype": "method",
            "name": "servePublicContent",
            "params": [
                {
                    "name": "absolutePath",
                    "description": "An absolute file path to the resource",
                    "type": "String"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 492,
            "description": "Attempts to derive the MIME type for a resource path based on the extension \nof the path.",
            "static": 1,
            "itemtype": "method",
            "name": "getMimeFromPath",
            "params": [
                {
                    "name": "The",
                    "description": "file path to a resource",
                    "type": "ResourcePath"
                }
            ],
            "return": {
                "description": "The MIME type or NULL if could not be derived.",
                "type": "String"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 524,
            "description": "Determines if the path is mapped to static resources",
            "static": 1,
            "itemtype": "method",
            "name": "isPublicRoute",
            "params": [
                {
                    "name": "path",
                    "description": "URL path to a resource",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if mapped to a public resource directory, FALSE if not",
                "type": "Boolean"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 541,
            "description": "Serves up a 404 page when the path specified by the incoming request does \nnot exist. This function <b>WILL</b> close the connection.",
            "itemtype": "method",
            "name": "serve404",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 557,
            "description": "Serves up an error page.  The page is responsible for displaying an error page\nTODO Church this up a bit.  Make it a template and controller like 404.\nTODO install an encoder entity since node prints out function names in angle brackets",
            "itemtype": "method",
            "name": "serveError",
            "params": [
                {
                    "name": "err",
                    "description": "The failure that was generated by the executed controller",
                    "type": "Error"
                }
            ],
            "return": {
                "description": "TRUE when the error is rendered, FALSE if the request had already been handled",
                "type": "Boolean"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 593,
            "description": "Called when the session has been retrieved.  Responsible for checking the \nactive theme.  It then retrieves the route object and passes it off to onThemeRetrieved.",
            "itemtype": "method",
            "name": "onSessionRetrieved",
            "params": [
                {
                    "name": "err",
                    "description": "Any error that occurred while retrieving the session",
                    "type": "Error"
                },
                {
                    "name": "session",
                    "description": "The session for the requesting entity",
                    "type": "Object"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 628,
            "description": "Compares the path against the registered routes's to lookup the route object.",
            "itemtype": "method",
            "name": "getRoute",
            "params": [
                {
                    "name": "path",
                    "description": "The URL path for the incoming request",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The route object or NULL if the path does not match any route",
                "type": "Object"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 668,
            "description": "Determines if the route supports the given HTTP method",
            "static": 1,
            "itemtype": "method",
            "name": "routeSupportsMethod",
            "params": [
                {
                    "name": "themeRoutes",
                    "description": "The route object that contains the specifics for \nthe theme variation of the route.",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "HTTP method",
                    "type": "String"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 681,
            "description": "Determines if a route supports a particular theme and HTTP method",
            "static": 1,
            "itemtype": "method",
            "name": "routeSupportsTheme",
            "params": [
                {
                    "name": "route",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "theme",
                    "description": "The theme",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "HTTP method",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 694,
            "description": "Determines the theme that will be executed for the route.\nThe themes will be prioritized as: active theme, pencilblue, followed by \niterating over all other inherited themes.",
            "itemtype": "method",
            "name": "getRouteTheme",
            "params": [
                {
                    "name": "activeTheme",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object with two properties: theme and method",
                "type": "Object"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 725,
            "itemtype": "method",
            "name": "onThemeRetrieved",
            "params": [
                {
                    "name": "activeTheme",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 764,
            "itemtype": "method",
            "name": "onSecurityChecksPassed",
            "params": [
                {
                    "name": "activeTheme",
                    "description": "The user set active theme",
                    "type": "String"
                },
                {
                    "name": "routeTheme",
                    "description": "The plugin/theme who's controller will handle the request",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 787,
            "description": "Begins the rendering process by initializing the controller.  This is done \nby gathering all initialization parameters and calling the controller's \n\"init\" function.",
            "itemtype": "method",
            "name": "doRender",
            "params": [
                {
                    "name": "pathVars",
                    "description": "The URL path's variables",
                    "type": "Object"
                },
                {
                    "name": "cInstance",
                    "description": "An instance of the controller to be executed",
                    "type": "BaseController"
                },
                {
                    "name": "themeRoute",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "activeTheme",
                    "description": "The user set active theme",
                    "type": "String"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 824,
            "description": "Parses the incoming request body when the body type specified matches one of \nthose explicitly allowed by the rotue.",
            "itemtype": "method",
            "name": "parseBody",
            "params": [
                {
                    "name": "mimes",
                    "description": "An array of allowed MIME strings.",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes 2 parameters: An Error, if \noccurred and the parsed body.  The parsed value is often an object but the \nvalue is dependent on the parser selected by the content type.",
                    "type": "Function"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 876,
            "itemtype": "method",
            "name": "onControllerInitialized",
            "params": [
                {
                    "name": "controller",
                    "description": "",
                    "type": "BaseController"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 898,
            "itemtype": "method",
            "name": "onRenderComplete",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 950,
            "itemtype": "method",
            "name": "writeResponse",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1002,
            "description": "Creates a cookie string",
            "itemtype": "method",
            "name": "writeCookie",
            "params": [
                {
                    "name": "descriptor",
                    "description": "The pieces of the cookie that are to be included \nin the string.  These pieces are represented as key value pairs.  Each value \nwill be serialized via its implicity \"toString\" function.",
                    "type": "Object"
                },
                {
                    "name": "cookieStr",
                    "description": "The current cookie string if it exists",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                }
            ],
            "return": {
                "description": "The cookie represented as a string",
                "type": "String"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1020,
            "description": "Verifies that the incoming request meets all necessary security critiera",
            "itemtype": "method",
            "name": "checkSecurity",
            "params": [
                {
                    "name": "activeTheme",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1134,
            "itemtype": "method",
            "name": "doRedirect",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1145,
            "itemtype": "method",
            "name": "onErrorOccurred",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1156,
            "static": 1,
            "itemtype": "method",
            "name": "parseCookies",
            "params": [
                {
                    "name": "req",
                    "description": "",
                    "type": "Request"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1178,
            "static": 1,
            "itemtype": "method",
            "name": "urlExists",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "{",
                    "description": ""
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1208,
            "static": 1,
            "itemtype": "method",
            "name": "isAdminURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1228,
            "static": 1,
            "itemtype": "method",
            "name": "isSystemSafeURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1246,
            "description": "Registers a body parser prototype for the specified mime",
            "static": 1,
            "itemtype": "method",
            "name": "registerBodyParser",
            "params": [
                {
                    "name": "mime",
                    "description": "A non empty string representing the mime type that the prototype can parse",
                    "type": "String"
                },
                {
                    "name": "prototype",
                    "description": "A prototype that can have an instance created and parse the specified mime type",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if the body parser was registered, FALSE if not",
                "type": "Boolean"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 32,
            "description": "Creates a document object ready to be injected into the database",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "object_type",
                    "description": "The type of object to create",
                    "type": "String"
                },
                {
                    "name": "post",
                    "description": "Key value pair object to prepare",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values are to be split from CSVs into arrays",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values are to be null if empty",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The database ready document object",
                "type": "Object"
            },
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 59,
            "description": "Updates a document object with new properties",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pairs to update with",
                    "type": "Object"
                },
                {
                    "name": "existingObject",
                    "description": "Object to update",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values are to be split from CSVs into arrays",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values are to be null if empty",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The database ready document object",
                "type": "Object"
            },
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 74,
            "description": "Hashes all password fields",
            "itemtype": "method",
            "name": "passwordHash",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 94,
            "description": "Formats email fields",
            "itemtype": "method",
            "name": "emailFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 106,
            "description": "Formats usernames",
            "itemtype": "method",
            "name": "usernameFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 118,
            "description": "Formats access levels",
            "itemtype": "method",
            "name": "accessFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 130,
            "description": "Formats string items to integers",
            "itemtype": "method",
            "name": "formatIntegerItems",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "integerItems",
                    "description": "Keys whose values should be formatted as integers",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 151,
            "description": "Formats empty items to null values",
            "itemtype": "method",
            "name": "emptyItemsToNull",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values should be null if empty",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 171,
            "description": "Splits CSV items into arrays",
            "itemtype": "method",
            "name": "csvItemsToArrays",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values should be arrays",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\security\\authentication\\index.js",
            "line": 30,
            "itemtype": "method",
            "name": "authenticate",
            "params": [
                {
                    "name": "credentials",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "username",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "UsernamePasswordAuthentication",
            "module": "Model"
        },
        {
            "file": "include\\security\\authentication\\index.js",
            "line": 78,
            "itemtype": "method",
            "name": "authenticate",
            "class": "FormAuthentication",
            "module": "Model"
        },
        {
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 34,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "CALLBACKS",
            "type": "{Object}",
            "class": "AdminSubnavService",
            "module": "Services"
        },
        {
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 43,
            "description": "Register a callback with the service",
            "static": 1,
            "itemtype": "method",
            "name": "registerFor",
            "params": [
                {
                    "name": "key",
                    "description": "The key to register",
                    "type": "String"
                },
                {
                    "name": "getSubNavItems",
                    "description": "The callback function",
                    "type": "Function"
                }
            ],
            "class": "AdminSubnavService",
            "module": "Services"
        },
        {
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 76,
            "description": "Unregisters a callback function",
            "static": 1,
            "itemtype": "method",
            "name": "unregisterFor",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "Function",
                    "description": "to unregister",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if function was unregistered, FALSE if not",
                "type": "Boolean"
            },
            "class": "AdminSubnavService",
            "module": "Services"
        },
        {
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 100,
            "description": "Retrieves the sub-nav items",
            "static": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                },
                {
                    "name": "ls",
                    "description": "The localization object",
                    "type": "Object"
                },
                {
                    "name": "activePill",
                    "description": "The name of the active sub-nav pill",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data object to send to the callback function",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The sub-nav items",
                "type": "Object"
            },
            "class": "AdminSubnavService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 35,
            "itemtype": "property",
            "name": "commentService",
            "type": "{CommentService}",
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 43,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "READ_MORE_FLAG",
            "type": "{String}",
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 52,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "authors",
                            "description": "A hash of user objects representing the \nauthors of the content to be rendered",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "contentSettings",
                            "description": "The content settings",
                            "type": "Object"
                        },
                        {
                            "name": "contentCount",
                            "description": "An integer representing the total \nnumber of content objects that will be processed for this request",
                            "type": "Integer"
                        },
                        {
                            "name": "renderBylines",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "renderTimestamp",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "renderComments",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "readMore",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 108,
            "itemtype": "method",
            "name": "formatBylines",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 134,
            "itemtype": "method",
            "name": "formatTimestamp",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 148,
            "itemtype": "method",
            "name": "formatLayout",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 164,
            "itemtype": "method",
            "name": "formatMediaReferences",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 182,
            "itemtype": "method",
            "name": "formatComments",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 214,
            "description": "Retrieves the commenters for an array of comments",
            "itemtype": "method",
            "name": "getCommenters",
            "params": [
                {
                    "name": "comments",
                    "description": "Array of comment objects",
                    "type": "Array"
                },
                {
                    "name": "contentSettings",
                    "description": "Content settings to use for processing",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 277,
            "itemtype": "method",
            "name": "formatAutoBreak",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 341,
            "itemtype": "method",
            "name": "formatLayoutForReadMore",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Objct"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 359,
            "itemtype": "method",
            "name": "getReadMoreSpan",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "anchorContent",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 370,
            "itemtype": "method",
            "name": "getReadMoreLink",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "anchorContent",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 382,
            "itemtype": "method",
            "name": "getContentLinkPrefix",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 390,
            "description": "Retrieves the layout from the content object. Provides a mechanism to \nallow for layout parameter to have any name.",
            "itemtype": "method",
            "name": "getLayout",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 401,
            "description": "A workaround to allow this prototype to operate on articles and pages.  \nThe layout parameter is not the same.  Until we introduce breaking \nchanges this will have to do.",
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "layout",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_renderer.js",
            "line": 413,
            "itemtype": "method",
            "name": "containsReadMoreFlag",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ArticleRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 47,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 57,
            "description": "Provides the options for rendering",
            "itemtype": "method",
            "name": "getRenderOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 76,
            "description": "Retrieves an instance of a content renderer",
            "itemtype": "method",
            "name": "getRenderer",
            "return": {
                "description": "",
                "type": "ArticleRenderer"
            },
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 85,
            "description": "Retrieves articles based on the section",
            "itemtype": "method",
            "name": "getBySection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 113,
            "description": "Extracts an array of Topic IDs from the content that the content is associated with.",
            "itemtype": "method",
            "name": "getTopicsForContent",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of strings representing the Topic IDs",
                "type": "Array"
            },
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 123,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "service",
                    "description": "An instance of the service that triggered \n the event that called this handler",
                    "type": "ArticleServiceV2"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 152,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "service",
                            "description": "An instance of the service that triggered \n the event that called this handler",
                            "type": "ArticleServiceV2"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 186,
            "static": 1,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "The DTO that was provided for persistence",
                            "type": "Object"
                        },
                        {
                            "name": "service",
                            "description": "An instance of the service that triggered \n the event that called this handler",
                            "type": "ArticleServiceV2"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 320,
            "static": 1,
            "itemtype": "method",
            "name": "setSectionClause",
            "params": [
                {
                    "name": "where",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\article_service_v2.js",
            "line": 330,
            "static": 1,
            "itemtype": "method",
            "name": "setTopicClause",
            "params": [
                {
                    "name": "where",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ArticleServiceV2",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 45,
            "itemtype": "property",
            "name": "contentSettings",
            "type": "{Object}",
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 52,
            "itemtype": "property",
            "name": "topicService",
            "type": "{TopicService}",
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 64,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BEFORE_RENDER",
            "type": "{String}",
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 73,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "AFTER_RENDER",
            "type": "{String}",
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 82,
            "itemtype": "method",
            "name": "getPublished",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "render",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 111,
            "itemtype": "method",
            "name": "getDrafts",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "render",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 142,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "render",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "readMore",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 169,
            "description": "Provides the options for rendering",
            "itemtype": "method",
            "name": "getRenderOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "isMultiple",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 180,
            "description": "Retrieves an instance of a content renderer",
            "itemtype": "method",
            "name": "getRenderer",
            "return": {
                "description": "",
                "type": "ContentRenderer"
            },
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 189,
            "itemtype": "method",
            "name": "getSingle",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "readMore",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 212,
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "render",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "readMore",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 241,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "An optional argument to provide rendering settings.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "readMore",
                            "description": "Specifies if content body layout \n should be truncated, and read more links rendered.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 305,
            "itemtype": "method",
            "name": "gatherDataForRender",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 355,
            "description": "Retrieves the SEO metadata for the specified content.",
            "itemtype": "method",
            "name": "getMetaInfo",
            "params": [
                {
                    "name": "content",
                    "description": "The content to retrieve information for",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is \nan Error, if occurred.  The second is an object that contains 4 \nproperties: \ntitle - the SEO title, \ndescription - the SEO description, \nkeywords - an array of SEO keywords that describe the content, \nthumbnail - a URI path to the thumbnail image",
                    "type": "Function"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 466,
            "description": "Extracts an array of Topic IDs from the content that the content is associated with.",
            "itemtype": "method",
            "name": "getTopicsForContent",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of strings representing the Topic IDs",
                "type": "Array"
            },
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_object_service.js",
            "line": 476,
            "static": 1,
            "itemtype": "method",
            "name": "setPublishedClause",
            "params": [
                {
                    "name": "where",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 53,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "DISPLAY_NONE_STYLE_ATTR",
            "type": "{String}",
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 62,
            "itemtype": "method",
            "name": "getMetaInfo",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 73,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "useDefaultTemplate",
                            "description": "Forces the default theme template to be selected",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "topic",
                            "description": "The topic represented by the collection of content to be rendered",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "section",
                            "description": "The section represented by the collection of content to be rendered",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 118,
            "itemtype": "method",
            "name": "getTemplate",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Array|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "useDefaultTemplate",
                            "description": "Forces the default theme template to be selected",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "topic",
                            "description": "The topic represented by the collection of content to be rendered",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "section",
                            "description": "The section represented by the collection of content to be rendered",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 186,
            "itemtype": "method",
            "name": "getDefaultTemplatePath",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 195,
            "itemtype": "method",
            "name": "onContent",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 219,
            "itemtype": "method",
            "name": "gatherData",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 262,
            "itemtype": "method",
            "name": "onAngular",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 277,
            "itemtype": "method",
            "name": "onPageName",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 307,
            "itemtype": "method",
            "name": "onInfiniteScroll",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 331,
            "itemtype": "method",
            "name": "setMetaInfo",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 344,
            "itemtype": "method",
            "name": "getMetaInfo",
            "params": [
                {
                    "name": "contentArray",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 358,
            "itemtype": "method",
            "name": "renderContent",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 415,
            "itemtype": "method",
            "name": "renderComments",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "ts",
                    "description": "",
                    "type": "TemplateService"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 458,
            "itemtype": "method",
            "name": "renderComment",
            "params": [
                {
                    "name": "comment",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cts",
                    "description": "",
                    "type": "TemplateService"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 477,
            "itemtype": "method",
            "name": "onCommentingUserPhoto",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "commentingUser",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 492,
            "itemtype": "method",
            "name": "onCommentingUserPosition",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 507,
            "itemtype": "method",
            "name": "onContentPermalink",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 518,
            "itemtype": "method",
            "name": "onContentHeadline",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 531,
            "itemtype": "method",
            "name": "createContentPermalink",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 542,
            "static": 1,
            "itemtype": "method",
            "name": "getDisplayAttr",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\content_view_loader.js",
            "line": 553,
            "description": "When passed a value it is evaluated as a boolean.  If evaluated to TRUE \nthe value is returned, if FALSE empty string is returned",
            "static": 1,
            "itemtype": "method",
            "name": "valOrEmpty",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "ContentViewLoader",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_renderer.js",
            "line": 31,
            "itemtype": "property",
            "name": "commentService",
            "type": "{CommentService}",
            "class": "PageRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_renderer.js",
            "line": 40,
            "itemtype": "method",
            "name": "getContentLinkPrefix",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "PageRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_renderer.js",
            "line": 48,
            "description": "Retrieves the layout from the content object. Provides a mechanism to \nallow for layout parameter to have any name.",
            "itemtype": "method",
            "name": "getLayout",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "PageRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_renderer.js",
            "line": 59,
            "description": "A workaround to allow this prototype to operate on articles and pages.  \nThe layout parameter is not the same.  Until we introduce breaking \nchanges this will have to do.",
            "itemtype": "method",
            "name": "setLayout",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "layout",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "PageRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 46,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 56,
            "description": "Provides the options for rendering",
            "itemtype": "method",
            "name": "getRenderOptions",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "isMultiple",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 72,
            "description": "Retrieves an instance of a content renderer",
            "itemtype": "method",
            "name": "getRenderer",
            "return": {
                "description": "",
                "type": "ArticleRenderer"
            },
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 81,
            "description": "Extracts an array of Topic IDs from the content that the content is associated with.",
            "itemtype": "method",
            "name": "getTopicsForContent",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of strings representing the Topic IDs",
                "type": "Array"
            },
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 91,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "service",
                            "description": "An instance of the service that triggered \n the event that called this handler",
                            "type": "PageService"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 120,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "service",
                    "description": "An instance of the service that triggered \n the event that called this handler",
                    "type": "PageService"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 153,
            "static": 1,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "The DTO that was provided for persistence",
                            "type": "Object"
                        },
                        {
                            "name": "service",
                            "description": "An instance of the service that triggered \n the event that called this handler",
                            "type": "PageService"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 260,
            "static": 1,
            "itemtype": "method",
            "name": "setSectionClause",
            "params": [
                {
                    "name": "where",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\content\\page_service.js",
            "line": 270,
            "static": 1,
            "itemtype": "method",
            "name": "setTopicClause",
            "params": [
                {
                    "name": "where",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "PageService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 40,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ARTICLE_TYPE",
            "type": "{String}",
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 50,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "PAGE_TYPE",
            "type": "{String}",
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 60,
            "description": "Rerieves the content type",
            "itemtype": "method",
            "name": "getContentType",
            "return": {
                "description": "Content type",
                "type": "String"
            },
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 70,
            "description": "Sets the content type (article, page)",
            "itemtype": "method",
            "name": "setContentType",
            "params": [
                {
                    "name": "type",
                    "description": "The content type",
                    "type": "String"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 80,
            "description": "Finds an article or page by Id",
            "itemtype": "method",
            "name": "findById",
            "params": [
                {
                    "name": "articleId",
                    "description": "The article's object Id",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 91,
            "description": "Finds articles by section",
            "itemtype": "method",
            "name": "findBySection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "The section's object Id",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 102,
            "description": "Finds articles and pages by topic",
            "itemtype": "method",
            "name": "findByTopic",
            "params": [
                {
                    "name": "topicId",
                    "description": "The topic's object Id",
                    "type": "[type]"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 113,
            "description": "Finds articles and pages matching criteria",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "where",
                    "description": "Defines the where clause for the article search",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "The options object that can provide query control\nparameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "order",
                            "description": "The order that the results will be returned\nin.  The default is publish date descending and created descending",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "select",
                            "description": "The fields that will be returned for each\narticle that matches the criteria",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "The number of results to return",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "The number of articles to skip before\nreturning results",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback function that takes two parameters: the first\nis an error, if occurred.  The second is an array of articles or possibly\nnull if an error occurs.",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 215,
            "description": "Updates articles",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "articleId",
                    "description": "id of article",
                    "type": "String"
                },
                {
                    "name": "fields",
                    "description": "fields to update",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 235,
            "description": "Retrieves data necessary for displaying an articles and appends it to the\narticle object",
            "itemtype": "method",
            "name": "processArticleForDisplay",
            "params": [
                {
                    "name": "article",
                    "description": "The artice to process",
                    "type": "Object"
                },
                {
                    "name": "articleCount",
                    "description": "The total number of articles",
                    "type": "Number"
                },
                {
                    "name": "authors",
                    "description": "Available authors retrieved from the database",
                    "type": "Array"
                },
                {
                    "name": "contentSettings",
                    "description": "Content settings to use for processing",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 378,
            "description": "Retrieves the authors of an array of articles",
            "itemtype": "method",
            "name": "getArticleAuthors",
            "params": [
                {
                    "name": "articles",
                    "description": "Array of article objects",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 392,
            "description": "Retrieves the commenters for an array of comments",
            "itemtype": "method",
            "name": "getCommenters",
            "params": [
                {
                    "name": "comments",
                    "description": "Array of comment objects",
                    "type": "Array"
                },
                {
                    "name": "contentSettings",
                    "description": "Content settings to use for processing",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 455,
            "description": "Retrieves the article and byline templates",
            "itemtype": "method",
            "name": "getTemplates",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 476,
            "description": "Retrieves the SEO metadata for the specified content.",
            "itemtype": "method",
            "name": "getMetaInfo",
            "params": [
                {
                    "name": "article",
                    "description": "The article to retrieve information for",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is \nan Error, if occurred.  The second is an object that contains 4 \nproperties: \ntitle - the SEO title, \ndescription - the SEO description, \nkeywords - an array of SEO keywords that describe the content, \nthumbnail - a URI path to the thumbnail image",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 493,
            "description": "Retrieves the meta info for an article or page",
            "deprecated": true,
            "deprecationMessage": "Since 0.4.1",
            "itemtype": "method",
            "name": "getMetaInfo",
            "params": [
                {
                    "name": "article",
                    "description": "An article or page object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 523,
            "description": "Provided the content descriptor and the content settings object the \nfunction indicates if comments should be allowed within the given \ncontext of the content.",
            "itemtype": "method",
            "name": "allowComments",
            "params": [
                {
                    "name": "contentSettings",
                    "description": "The settings object retrieved from the \ncontent service",
                    "type": "Object"
                },
                {
                    "name": "content",
                    "description": "The page or article that should or should not \nhave associated comments.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ArticleService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 548,
            "itemtype": "property",
            "name": "mediaService",
            "type": "{MediaService}",
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 555,
            "description": "Processes an article or page to insert media",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "articleLayout",
                    "description": "The HTML layout of the article or page",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "[description]",
                    "type": "Function"
                }
            ],
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 610,
            "itemtype": "method",
            "name": "onMediaAvailable",
            "params": [
                {
                    "name": "articleLayout",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 637,
            "description": "Retrieves the media template for rendering media",
            "itemtype": "method",
            "name": "getMediaTemplate",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 653,
            "description": "Scans a string for media flags then parses them to return an array of \neach one that was found",
            "itemtype": "method",
            "name": "scanForFlags",
            "params": [
                {
                    "name": "layout",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 676,
            "description": "Replaces an article or page layout's ^media_display^ tag with a media embed",
            "itemtype": "method",
            "name": "replaceMediaTag",
            "params": [
                {
                    "name": "layout",
                    "description": "The HTML layout of the article or page",
                    "type": "String"
                },
                {
                    "name": "mediaTemplate",
                    "description": "The template of the media embed",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 37,
            "static": 1,
            "itemtype": "property",
            "name": "CUST_OBJ_COLL",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 44,
            "static": 1,
            "itemtype": "property",
            "name": "CUST_OBJ_TYPE_COLL",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 51,
            "static": 1,
            "itemtype": "property",
            "name": "CUST_OBJ_SORT_COLL",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 59,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "NAME_FIELD",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 68,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "PEER_OBJECT_TYPE",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 77,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "CHILD_OBJECTS_TYPE",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 86,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "CUST_OBJ_TYPE_PREFIX",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 95,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "AVAILABLE_FIELD_TYPES",
            "type": "{Object}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 112,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "AVAILABLE_REFERENCE_TYPES",
            "type": "{Object}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 128,
            "description": "Validates and persists a sort ordering for custom objects of a specific type",
            "itemtype": "method",
            "name": "saveSortOrdering",
            "params": [
                {
                    "name": "sortOrder",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 151,
            "description": "Validates a sort ordering for custom objects of a specific type",
            "itemtype": "method",
            "name": "validateSortOrdering",
            "params": [
                {
                    "name": "sortOrdering",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nerror, if occurred and the second is an array of validation error objects.\nIf the array is empty them it is safe to assume that the object is valid.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 195,
            "description": "Retrieves custom objects of the specified type based on the specified options.",
            "itemtype": "method",
            "name": "findByTypeWithOrdering",
            "params": [
                {
                    "name": "The",
                    "description": "custom object type descriptor object or the ID\nstring of the type descriptor.",
                    "type": "Object|String"
                },
                {
                    "name": "options",
                    "description": "The filters and other flags.  The options object\nsupports the same fields as the DAO.query function.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "fetch_depth",
                            "description": "The depth indicates how many levels\nof referenced child and peer objects to load.  At the bottom level the\nreferences will be left as ID strings.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is any\nerror, if ocurred. The second is an array of objects sorted by the ordering\nassigned for the custom object or by name if no ordering exists.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 245,
            "description": "Coordinates the eager fetching of peer and child objects for the specified custom object.",
            "itemtype": "method",
            "name": "fetchChildren",
            "params": [
                {
                    "name": "custObj",
                    "description": "The custom object to inspect",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "The options specified for the retrieval",
                    "type": "Object",
                    "props": [
                        {
                            "name": "fetch_depth",
                            "description": "The number of levels of peer and child\nobjects to retrieve",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "custObjType",
                    "description": "The custom object type for the specified\ncustom object.  This can also be the ID string value.",
                    "type": "Object|String"
                },
                {
                    "name": "cb",
                    "description": "A callback function that takes two parameters. The\nfirst is an Error, if occurred. The second is the specified custom object.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 410,
            "description": "Loads an ordering object for a specific custom object type.",
            "itemtype": "method",
            "name": "loadSortOrdering",
            "params": [
                {
                    "name": "custObjType",
                    "description": "",
                    "type": "Object|String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is an\nerror, if occurred.  The second is the sort ordering object if found.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 429,
            "description": "Finds custom objects by the specified type.",
            "itemtype": "method",
            "name": "findByType",
            "params": [
                {
                    "name": "type",
                    "description": "The custom object type object or the ID of the\nobject as a string",
                    "type": "Object|String"
                },
                {
                    "name": "options",
                    "description": "See DAO.q()",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two arguments. The first is an\nerror, if occurred.  The second is an array of custom objects that match the\nspecified criteria.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 476,
            "description": "Retrieves all of the custom object types in the system",
            "itemtype": "method",
            "name": "findTypes",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nerror, if occurred.  The second is an array of custom object type objects.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 505,
            "description": "Retrieves a count based the specified criteria and type",
            "itemtype": "method",
            "name": "countByType",
            "params": [
                {
                    "name": "type",
                    "description": "The custom object type object or ID string",
                    "type": "Object|String"
                },
                {
                    "name": "where",
                    "description": "The criteria for which objects to count",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nerror, if occurred. The second is the number of objects that match the\nspecified critieria.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 533,
            "description": "Loads a custom object by ID",
            "itemtype": "method",
            "name": "loadById",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "ObjectID|String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 544,
            "description": "Loads a custom object by name",
            "itemtype": "method",
            "name": "loadByName",
            "params": [
                {
                    "name": "type",
                    "description": "The ID string of the custom object type",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The unique name of the custom object",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 558,
            "description": "Loads a custom object by the specified where criteria",
            "itemtype": "method",
            "name": "loadBy",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 592,
            "description": "Loads a custom object type by ID",
            "itemtype": "method",
            "name": "loadTypeById",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "ObjectID|String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 602,
            "description": "Loads a custom object type by name",
            "itemtype": "method",
            "name": "loadTypeByName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 615,
            "description": "Loads a custom object type by the specified where criteria",
            "itemtype": "method",
            "name": "loadTypeBy",
            "params": [
                {
                    "name": "where",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 630,
            "description": "Validates a custom object",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "custObj",
                    "description": "The object to validate",
                    "type": "Object"
                },
                {
                    "name": "custObjType",
                    "description": "The custom object type to validate against",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nerror if occurred. The second is an array of validation error objects.  If\nthe array is empty it is safe to assume that the object is valid.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 704,
            "description": "Validates the fields of a custom object",
            "itemtype": "method",
            "name": "validateCustObjFields",
            "params": [
                {
                    "name": "custObj",
                    "description": "The object to validate",
                    "type": "Object"
                },
                {
                    "name": "custObjType",
                    "description": "The custom object type to validate against",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nerror if occurred. The second is an array of validation error objects.  If\nthe array is empty it is safe to assume that the object is valid.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 744,
            "description": "Validates a Custom Object Type.",
            "itemtype": "method",
            "name": "validateType",
            "params": [
                {
                    "name": "custObjType",
                    "description": "The object to validate",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback function that provides two parameters: The\nfirst, an error, if exists. The second is an array of objects that represent\nvalidation errors.  If the 2nd parameter is an empty array it is safe to\nassume that validation passed.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 821,
            "description": "Validates that the field descriptor for a custom object type.",
            "itemtype": "method",
            "name": "validateFieldDescriptor",
            "params": [
                {
                    "name": "field",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "customTypes",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of objects that contain two properties: field and\nerror",
                "type": "Array"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 848,
            "description": "Retrieves an array of all of the available object types that can be\nreferenced as a child or peer object.",
            "itemtype": "method",
            "name": "getReferenceTypes",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: The first, an\nerror, if occurs.  The second is an array of all of the available object\ntypes that can be referenced as a peer or child object.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 880,
            "description": "Validates and persists a custom object",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "custObj",
                    "description": "The object to validate",
                    "type": "Object"
                },
                {
                    "name": "custObjType",
                    "description": "The custom object type to validate against",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nerror if occurred. The second is an array of validation error objects or the\nresult of the persistence operation.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 907,
            "description": "Validates and persists a custom object type",
            "itemtype": "method",
            "name": "saveType",
            "params": [
                {
                    "name": "custObjType",
                    "description": "The object to persist",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nerror if occurred. The second is an array of validation error objects or the\nresult of the persistence operation.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 932,
            "description": "Deletes a custom object by ID",
            "itemtype": "method",
            "name": "deleteById",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 943,
            "description": "Deletes a custom object type by id",
            "itemtype": "method",
            "name": "deleteTypeById",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String|ObjectID"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 977,
            "description": "Deletes all custom objects of a specified type",
            "itemtype": "method",
            "name": "deleteForType",
            "params": [
                {
                    "name": "custObjType",
                    "description": "A string ID of the custom object type or \nthe custom object type itself.",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1004,
            "description": "Retrieves the objects types that can be referenced by custom objects",
            "static": 1,
            "itemtype": "method",
            "name": "getStaticReferenceTypes",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1014,
            "description": "Determines if a field type is reference to another object type",
            "static": 1,
            "itemtype": "method",
            "name": "isReferenceFieldType",
            "params": [
                {
                    "name": "fieldType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1025,
            "description": "Determines if the field type is a custom object type or a system reference",
            "static": 1,
            "itemtype": "method",
            "name": "isCustomObjectType",
            "params": [
                {
                    "name": "objType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1036,
            "description": "Gets the simple custom object name.  The simple name is one that is not\nprefixed to indicate that it is custom",
            "static": 1,
            "itemtype": "method",
            "name": "getCustTypeSimpleName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1051,
            "description": "Formats the object by ensuring that each field is in the correct data type.",
            "static": 1,
            "itemtype": "method",
            "name": "formatRawForType",
            "params": [
                {
                    "name": "post",
                    "description": "The raw post object",
                    "type": "Object"
                },
                {
                    "name": "custObjType",
                    "description": "The custom object type describes the data in the\npost obj.",
                    "type": "Object"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1124,
            "description": "Formats the raw post data for a sort ordering",
            "static": 1,
            "itemtype": "method",
            "name": "formatRawSortOrdering",
            "params": [
                {
                    "name": "post",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "sortOrder",
                    "description": "the existing sort order object that the post data \nwill be merged with",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The formatted sort ordering object",
                "type": "Object"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1151,
            "description": "Discovers the field types used for each entry in the provided array and sets\nthe \"fieldTypesUsed\" property for the object.",
            "static": 1,
            "itemtype": "method",
            "name": "setFieldTypesUsed",
            "params": [
                {
                    "name": "custObjTypes",
                    "description": "The array of custom object type objects to inspect",
                    "type": "Array"
                },
                {
                    "name": "ls",
                    "description": "",
                    "type": "Localization"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1188,
            "description": "Orders the custom objects based on the provided sort order",
            "static": 1,
            "itemtype": "method",
            "name": "applyOrder",
            "params": [
                {
                    "name": "custObjects",
                    "description": "The array of custom objects to be sorted",
                    "type": "Array"
                },
                {
                    "name": "sortOrder",
                    "description": "The object describing the ordering of the objects",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A refernce to the sorted array of custom objects.  The\nreference is the same as provided to the function.",
                "type": "Array"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1232,
            "description": "Creates a validation error field",
            "static": 1,
            "itemtype": "method",
            "name": "err",
            "params": [
                {
                    "name": "field",
                    "description": "The field in the object that contains the error",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "A string description of the error",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object that describes the validation error",
                "type": "Object"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 1247,
            "description": "Creates an HTML formatted error string out of an array of error objects.",
            "static": 1,
            "itemtype": "method",
            "name": "createErrorStr",
            "params": [
                {
                    "name": "errors",
                    "description": "An array of objects where each object has a \"msg\" and\na \"field\" property",
                    "type": "Array"
                },
                {
                    "name": "msg",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML formatted string representing the errors",
                "type": "String"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\job_service.js",
            "line": 31,
            "description": "Retrieves the log entries for the specified job from the start date up until\nthe current time.",
            "itemtype": "method",
            "name": "getLogs",
            "params": [
                {
                    "name": "jid",
                    "description": "The job ID",
                    "type": "String"
                },
                {
                    "name": "startingDate",
                    "description": "The lower bound on the \"created\" field of the log\nentry",
                    "type": "Date"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "JobService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\job_service.js",
            "line": 56,
            "description": "Retrieves the job descriptor by ID",
            "itemtype": "method",
            "name": "loadById",
            "params": [
                {
                    "name": "jid",
                    "description": "The job's ID",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "JobService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 43,
            "itemtype": "property",
            "name": "provider",
            "type": "{MediaProvider}",
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 51,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "INSTANCE",
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 60,
            "description": "The collection where media descriptors are persisted",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "COLL",
            "type": "{String}",
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 69,
            "description": "Contains the list of media renderers",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "REGISTERED_MEDIA_RENDERERS",
            "type": "{Array}",
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 90,
            "description": "Loads a media descriptor by ID.",
            "itemtype": "method",
            "name": "loadById",
            "params": [
                {
                    "name": "mid",
                    "description": "Media descriptor ID",
                    "type": "String|ObjectID"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: an Error, if\noccurred and a media descriptor if found.",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 102,
            "description": "Deletes a media descriptor by ID",
            "itemtype": "method",
            "name": "deleteById",
            "params": [
                {
                    "name": "mid",
                    "description": "",
                    "type": "String|ObjectID"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 120,
            "description": "Persists a media descriptor",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 147,
            "description": "Validates a media descriptor",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: an Error, if\noccurred.  The second is an array of validation error objects.",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 178,
            "description": "Queries for media descriptors",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "format_media",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 212,
            "itemtype": "method",
            "name": "getContentByPath",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 222,
            "itemtype": "method",
            "name": "getContentStreamByPath",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 232,
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "fileDataStrOrBuff",
                    "description": "",
                    "type": "String|Buffer"
                },
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 246,
            "itemtype": "method",
            "name": "setContentStream",
            "params": [
                {
                    "name": "stream",
                    "description": "",
                    "type": "Stream"
                },
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 260,
            "itemtype": "method",
            "name": "createContentWriteStream",
            "params": [
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 277,
            "itemtype": "method",
            "name": "existsByPath",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 287,
            "itemtype": "method",
            "name": "deleteContentByPath",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 297,
            "itemtype": "method",
            "name": "statByPath",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 307,
            "description": "Retrieves whether a media's file path is valid",
            "itemtype": "method",
            "name": "isValidFilePath",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The file path of the media",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 321,
            "description": "Registers a media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "registerRenderer",
            "params": [
                {
                    "name": "interfaceImplementation",
                    "description": "A prototype or object that implements the media renderer interface.",
                    "type": "Function|Object"
                }
            ],
            "return": {
                "description": "TRUE if the implementation was registered, FALSE if not",
                "type": "Boolean"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 337,
            "description": "Indicates if a media renderer is already registered",
            "static": 1,
            "itemtype": "method",
            "name": "isRegistered",
            "params": [
                {
                    "name": "interfaceImplementation",
                    "description": "A prototype or object that implements the media renderer interface",
                    "type": "Function|Object"
                }
            ],
            "return": {
                "description": "TRUE if registered, FALSE if not",
                "type": "Boolean"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 348,
            "description": "Unregisters a media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "unregisterRenderer",
            "params": [
                {
                    "name": "interfaceImplementation",
                    "description": "A prototype or object that implements the media renderer interface",
                    "type": "Function|Object"
                }
            ],
            "return": {
                "description": "TRUE if unregistered, FALSE if not",
                "type": "Boolean"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 364,
            "description": "Determines if the media URI is a file.  It is determined to be a file if and \nonly if the URI does not begin with \"http\" or \"//\".",
            "static": 1,
            "itemtype": "method",
            "name": "isFile",
            "params": [
                {
                    "name": "mediaUrl",
                    "description": "A URI string that points to a media resource",
                    "type": "String"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 375,
            "description": "Generates a media descriptor for a given media URL",
            "itemtype": "method",
            "name": "getMediaDescriptor",
            "params": [
                {
                    "name": "mediaURL",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "Indicates if the media resource was uploaded to the server.",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback with two parameters. First, an Error if \noccurred and second is an object that describes the media resource described \nby the given media URL",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 425,
            "description": "Renders a resource by type and location (mediaId).",
            "itemtype": "method",
            "name": "renderByLocation",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique media identifier for the type",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "The type of provider that knows how to render \nthe resource",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "attrs",
                            "description": "The desired HTML attributes that will be \nadded to the element that provides the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "The desired style overrides for the media",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "view",
                            "description": "The view type that the media will be rendered \nfor (view, editor, post).  Any style options provided will override those \nprovided by the default style associated with the view.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters.  An Error if \nexists and the rendered HTML content for the media resource.",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 455,
            "description": "Renders a media resource by ID where ID refers the to the media descriptor \nid.",
            "itemtype": "method",
            "name": "renderById",
            "params": [
                {
                    "name": "The",
                    "description": "media resource ID",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "attrs",
                            "description": "The desired HTML attributes that will be \nadded to the element that provides the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "The desired style overrides for the media",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "view",
                            "description": "The view type that the media will be rendered \nfor (view, editor, post).  Any style options provided will override those \nprovided by the default style associated with the view.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters. An Error if \nexists and the rendered HTML content for the media resource.",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 487,
            "description": "Renders the media represented by the provided media flag",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "The",
                    "description": "media resource ID",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "attrs",
                            "description": "The desired HTML attributes that will be \nadded to the element that provides the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "The desired style overrides for the media",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "view",
                            "description": "The view type that the media will be rendered \nfor (view, editor, post).  Any style options provided will override those \nprovided by the default style associated with the view.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters. An Error if \nexists and the rendered HTML content for the media resource.",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 524,
            "description": "Renders the media represented by the provided media descriptor.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "The",
                    "description": "media resource ID",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "attrs",
                            "description": "The desired HTML attributes that will be \nadded to the element that provides the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "The desired style overrides for the media",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "view",
                            "description": "The view type that the media will be rendered \nfor (view, editor, post).  Any style options provided will override those \nprovided by the default style associated with the view.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters. An Error if \nexists and the rendered HTML content for the media resource.",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 554,
            "description": "Retrieves the base style for the given renderer and view.  Overrides will be \napplied on top of the base style.",
            "static": 1,
            "itemtype": "method",
            "name": "getStyleForView",
            "params": [
                {
                    "name": "renderer",
                    "description": "An implementation of MediaRenderer",
                    "type": "MediaRenderer"
                },
                {
                    "name": "view",
                    "description": "The view to retrieve the default styling for (view, \neditor, post)",
                    "type": "String"
                },
                {
                    "name": "overrides",
                    "description": "A hash of style properties that will be applied \nto the base style for the given view",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 576,
            "description": "Retrieves a media renderer for the specified type",
            "static": 1,
            "itemtype": "method",
            "name": "getRendererByType",
            "params": [
                {
                    "name": "type",
                    "description": "The media type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A media renderer interface implementation or NULL if \nnone support the given type.",
                "type": "MediaRenderer"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 602,
            "description": "Retrieves a media renderer for the specified URL",
            "static": 1,
            "itemtype": "method",
            "name": "getRendererByType",
            "params": [
                {
                    "name": "mediaUrl",
                    "description": "The media URL",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "TRUE if the URL represents an uploaded file, FALSE if not",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A media renderer interface implementation or NULL if \nnone support the given URL.",
                "type": "MediaRenderer"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 633,
            "description": "Generates a media placeholder for templating",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaFlag",
            "params": [
                {
                    "name": "mid",
                    "description": "The media descriptor ID",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The list of attributes to be provided to the \nrendering element.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 663,
            "description": "Given a content string the function will search for and extract the first \noccurance of a media flag. The parsed value that is returned will include:\n<ul>\n<li>startIndex - The index where the flag was found to start</li>\n<li>endIndex - The position in the content string of the last character of the media flag</li>\n<li>flag - The entire media flag including the start and end markers</li>\n<li>id - The media descriptor id that is referenced by the media flag</li>\n<li>style - A hash of the style properties declared for the flag</li>\n<li>cleanFlag - The media flag stripped of the start and end markers</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "extractNextMediaFlag",
            "params": [
                {
                    "name": "content",
                    "description": "The content string that potentially contains 1 or more media flags",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object that contains the information about the parsed media flag.",
                "type": "Object"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 707,
            "description": "Parses a media flag and returns each part in an object. The parsed value that \nis returned will include:\n<ul>\n<li>id - The media descriptor id that is referenced by the media flag</li>\n<li>style - A hash of the style properties declared for the flag</li>\n<li>cleanFlag - The media flag stripped of the start and end markers</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": ".",
            "params": [
                {
                    "name": "content",
                    "description": "The content string that potentially contains 1 or more media flags",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object that contains the information about the parsed media flag.",
                "type": "Object"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 749,
            "description": "The default editor implementations all for three position values to declared \nfor embeded media (none, left, right, center).  These values map to HTML \nalignments.  This function retrieves the HTML style attribute for the \nprovided position.",
            "static": 1,
            "itemtype": "method",
            "name": "getStyleForPosition",
            "params": [
                {
                    "name": "position",
                    "description": "Can be one of 4 values: none, left, right, center",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The HTML formatted style attribute(s)",
                "type": "String"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 768,
            "description": "Generates the path to uploaded media",
            "static": 1,
            "itemtype": "method",
            "name": "generateMediaPath",
            "params": [
                {
                    "name": "originalFilename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 781,
            "description": "Generates a filename for a new media object",
            "static": 1,
            "itemtype": "method",
            "name": "generateFilename",
            "params": [
                {
                    "name": "originalFilename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 802,
            "description": "Retrieves the font awesome icon for the media type.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaIcon",
            "params": [
                {
                    "name": "mediaType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 818,
            "description": "Sets the proper icon and link for an array of media items",
            "static": 1,
            "itemtype": "method",
            "name": "formatMedia",
            "params": [
                {
                    "name": "media",
                    "description": "The array of media objects to format",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The same array of media that was passed in",
                "type": "Array"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 847,
            "description": "Retrieves the singleton instance of CommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "",
                "type": "CommandService"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 864,
            "static": 1,
            "itemtype": "method",
            "name": "loadMediaProvider",
            "return": {
                "description": "An instance of a media provider or NULL when no \n provider can be loaded.",
                "type": "MediaProvider"
            },
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 44,
            "description": "A setting service that sets and retrieves the settings for plugins",
            "itemtype": "property",
            "name": "pluginSettingsService",
            "type": "{SimpleLayeredService}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 51,
            "description": "A setting service that sets and retrieves the settings for plugins",
            "itemtype": "property",
            "name": "pluginSettingsService",
            "type": "{SimpleLayeredService}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 60,
            "description": "The absolute path to the plugins directory for this PecilBlue installation",
            "itemtype": "property",
            "name": "PLUGINS_DIR",
            "type": "{String}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 67,
            "description": "The name of the file that defines the plugin's properties",
            "itemtype": "property",
            "name": "DETAILS_FILE_NAME",
            "type": "{String}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 74,
            "description": "The name of the directory for each plugin that contains the public resources",
            "itemtype": "property",
            "name": "PUBLIC_DIR_NAME",
            "type": "{String}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 82,
            "description": "A hash of the plugins that are installed and active in this instance of PB.",
            "itemtype": "property",
            "name": "ACTIVE_PLUGINS",
            "type": "{Object}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 89,
            "description": "The name of the collection where plugin descriptors are stored",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "PLUGIN_COLL",
            "type": "{String}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 99,
            "description": "The maximum number of retries to acquire",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "MAX_DEPENDENCY_LOCK_RETRY_CNT",
            "type": "{Integer}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 109,
            "description": "Retrieves the path to the active fav icon.",
            "itemtype": "method",
            "name": "getActiveIcon",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, URL_PATH_TO_ICON)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 125,
            "description": "Remove the active plugin entry from the current PB process.\nNOTE: it is not recommended to call this directly.",
            "static": 1,
            "itemtype": "method",
            "name": "deactivatePlugin",
            "params": [
                {
                    "name": "pluginUid",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 146,
            "description": "Retrieves the main module prototype for the specified active plugin",
            "static": 1,
            "itemtype": "method",
            "name": "getActiveMainModule",
            "params": [
                {
                    "name": "pluginUid",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The prototype that is the plugin's main module.",
                "type": "Function"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 157,
            "description": "Retrieves the names of the active plugins for this instance",
            "itemtype": "method",
            "name": "getActivePluginNames",
            "return": {
                "description": "An array that contain the names of the plugins that\ninitialized successfully within this instance.",
                "type": "Array"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 167,
            "description": "Retrieves a single setting for the specified plugin.",
            "itemtype": "method",
            "name": "getSetting",
            "params": [
                {
                    "name": "settingName",
                    "description": "The name of the setting to retrieve",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who owns the setting",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settingValue).\nNull is returned if the setting does not exist or the specified plugin is not\ninstalled.",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 197,
            "description": "Retrieves all of the settings for the specfied plugin.",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who's settings are being requested"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settings).\nNull is provided in the event that the plugin is not installed."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 209,
            "description": "Retrieves the settings for a plugin as hash of key/value pairs.  This \ndiffers from the getSettings function because the getSettings function \nprovides the settings in their raw form as an array of objects containing \nmultiple properties.  In most circumstances just the k/v pair is needed and \nnot any additional information about the property.  The function takes the \nraw settings array and transforms it into an object where the setting name \nis the property and the setting value is the value.",
            "itemtype": "method",
            "name": "getSettingsKV",
            "params": [
                {
                    "name": "pluginName",
                    "description": "The unique ID of the plugin who settings are to be retrieved",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  A error, if \nexists, and a hash of of the plugin's settings' names/values.",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 235,
            "description": "Replaces a single setting for the specified plugin",
            "itemtype": "method",
            "name": "setSetting",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the setting to change"
                },
                {
                    "name": "value",
                    "description": "The new value for the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin who's setting is being changed."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the setting was persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 281,
            "description": "Replaces the settings for the specified plugin.",
            "itemtype": "method",
            "name": "setSettings",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings object to be validated and persisted"
                },
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who's settings are being represented"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 315,
            "description": "Replaces a single theme setting for the specified plugin",
            "itemtype": "method",
            "name": "setThemeSetting",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the setting to change"
                },
                {
                    "name": "value",
                    "description": "The new value for the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin who's setting is being changed."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the setting was persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 361,
            "description": "Replaces the theme settings for the specified plugin.",
            "itemtype": "method",
            "name": "setThemeSettings",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings object to be validated and persisted"
                },
                {
                    "name": "pluginName",
                    "description": "The uid of the plugin who's settings are being represented"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 395,
            "description": "Retrieves a single theme setting value.",
            "itemtype": "method",
            "name": "getThemeSetting",
            "params": [
                {
                    "name": "settingName",
                    "description": "The uid of the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin to retrieve the setting from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settingValue)"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 423,
            "description": "Retrieves the theme settings for the specified plugin",
            "itemtype": "method",
            "name": "getThemeSettings",
            "params": [
                {
                    "name": "pluginName",
                    "description": "The uid of the plugin"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(err, settingsObject)"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 434,
            "description": "Retrieves the theme settings for a plugin as hash of key/value pairs.  This \ndiffers from the getThemeSettings function because the getThemeSettings function \nprovides the settings in their raw form as an array of objects containing \nmultiple properties.  In most circumstances just the k/v pair is needed and \nnot any additional information about the property.  The function takes the \nraw settings array and transforms it into an object where the setting name \nis the property and the setting value is the value.",
            "itemtype": "method",
            "name": "getThemeSettingsKV",
            "params": [
                {
                    "name": "pluginName",
                    "description": "The unique ID of the plugin who settings are to be retrieved",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  A error, if \nexists, and a hash of of the plugin's settings' names/values.",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 460,
            "description": "Indicates if a plugin by the specified identifier is installed.",
            "itemtype": "method",
            "name": "isInstalled",
            "params": [
                {
                    "name": "pluginIdentifer",
                    "description": "The identifier can either be an ObjectID or the\nplugin name"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the plugin is installed, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 475,
            "description": "Retrieves a plugin descriptor (plugin document)",
            "itemtype": "method",
            "name": "getPlugin",
            "params": [
                {
                    "name": "pluginIdentifier",
                    "description": "The identifier can either be an ObjectID or the\nplugin name"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, plugin).  If the\nplugin does exist null is provided."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 498,
            "description": "Retrieves the plugins that have themes associated with them",
            "itemtype": "method",
            "name": "getPluginsWithThemes",
            "params": [
                {
                    "name": "cb",
                    "description": "Provides two parameters: Error, Array",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 508,
            "description": "Convenience function to generate a service to handle settings for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "genSettingsService",
            "params": [
                {
                    "name": "objType",
                    "description": "The type of object that will be dealt with.  (plugin_settings,\ntheme_settings)"
                },
                {
                    "name": "useMemory",
                    "description": "Indicates if the generated layered service should\nuse an in memory service.",
                    "type": "Boolean"
                },
                {
                    "name": "useCache",
                    "description": "Indicates if the generated layered service should\nuse a cache service.",
                    "type": "Boolean"
                },
                {
                    "name": "serviceName",
                    "description": "The name of the service"
                }
            ],
            "return": {
                "description": "",
                "type": "SimpleLayeredService"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 544,
            "description": "Loads the settings from a details object and persists them in the DB.  Any\nexisting settings for the plugin are deleted before the new settings are\npersisted.",
            "itemtype": "method",
            "name": "resetSettings",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to extract the settings from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were successfully cleared and reloaded. FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 588,
            "description": "Loads the Theme settings from a details object and persists them in the DB.  Any\nexisting theme settings for the plugin are deleted before the new settings\nare persisted. If the plugin does not have a theme then false is provided in\nthe callback.",
            "itemtype": "method",
            "name": "resetThemeSettings",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to extract the settings from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were successfully cleared and reloaded. FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 641,
            "description": "Retrieves the permission set for a given role.  All active plugins are\ninspected.",
            "static": 1,
            "itemtype": "method",
            "name": "getPermissionsForRole",
            "params": [
                {
                    "name": "role",
                    "description": "The role to get permissions for",
                    "type": "Integer|String"
                }
            ],
            "return": {
                "description": "A hash of the permissions",
                "type": "Object"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 668,
            "description": "Retrieves the file path to the public directory for the specified plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "getActivePluginDir",
            "params": [
                {
                    "name": "pluginUid",
                    "description": "A plugin's UID value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File path to the plugin's public directory",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 683,
            "description": "Inidicates if the specified plugin is active in this instance of PB.",
            "static": 1,
            "itemtype": "method",
            "name": "isActivePlugin",
            "params": [
                {
                    "name": "uid",
                    "description": "The unique identifier for a plugin",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the plugin is active, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 694,
            "description": "Generates a URL path to a public resource for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "genPublicPath",
            "params": [
                {
                    "name": "plugin",
                    "description": "The UID of the plugin",
                    "type": "String"
                },
                {
                    "name": "relativePathToMedia",
                    "description": "The relative path to the resource from\nthe plugin's public directory.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "URL path to the resource",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 710,
            "description": "Retrieves the details for the active plugins.",
            "itemtype": "method",
            "name": "getActivePlugins",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 726,
            "description": "Retrieves the content templates for all of the active plugins",
            "static": 1,
            "itemtype": "method",
            "name": "getActiveContentTemplates",
            "return": {
                "description": "An array of objects",
                "type": "Array"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 748,
            "description": "Retrieves the inactive plugins for this instance of PencilBlue.  An inactive\nplugin is considered one who failed to install or one that failed to start\nproperly.",
            "itemtype": "method",
            "name": "getInactivePlugins",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 765,
            "description": "Retrieves the available plugins.  An available plugin is one who is\nuninstalled but available to be installed.",
            "itemtype": "method",
            "name": "getAvailablePlugins",
            "params": [
                {
                    "name": "active",
                    "description": "An array of plugin detail objects.  Each object is\nrequired to have a uid property that is a string.",
                    "type": "Array"
                },
                {
                    "name": "inactive",
                    "description": "An array of plugin details objects. Each object is\nrequired to have a uid property that is a string.",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 846,
            "description": "Retrieves a map of the system's plugin.  The map provides three properties:\nactive, inactive, available.",
            "itemtype": "method",
            "name": "getPluginMap",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 877,
            "description": "Uninstalls the plugin with the specified UID.",
            "itemtype": "method",
            "name": "uninstallPlugin",
            "params": [
                {
                    "name": "pluginUid",
                    "description": "The unique plugin identifier",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "Required when unintalling from the executing\nprocess instead of calling upon the cluster.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "forCluster",
                            "description": "When true or not provided the function\ninstructs the cluster to uninstall the plugin.  When explicitly FALSE the\nfunction installs the plugin from the executing process.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 919,
            "description": "Installs a plugin by stepping through a series of steps that must be\ncompleted in order.  There is currently no fallback plan for a failed install.\nIn order for a plugin to be fully installed it must perform the following\nactions without error:\n<ol>\n<li>Load and parse the plugin's details.json file</li>\n<li>Pass validation</li>\n<li>Must not already be installed</li>\n<li>Successfully register itself with the system</li>\n<li>Successfully load any plugin settings</li>\n<li>Successfully load any theme settings</li>\n<li>Successfully execute the plugin's onInstall function</li>\n<li>Successfully initialize the plugin for runtime</li>\n</ol>",
            "itemtype": "method",
            "name": "installPlugin",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that contains the\nplugin and its details.json file.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(err, TRUE/FALSE)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 951,
            "description": "Attempts to initialize all installed plugins.",
            "itemtype": "method",
            "name": "initPlugins",
            "params": [
                {
                    "name": "A",
                    "description": "callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1017,
            "description": "Initializes a plugin during startup or just after a plugin has been installed.",
            "itemtype": "method",
            "name": "initPlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin details",
                    "type": "Plugin"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1241,
            "description": "Verifies that a plugin has all of the required dependencies installed from NPM",
            "itemtype": "method",
            "name": "hasDependencies",
            "params": [
                {
                    "name": "plugin",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1287,
            "description": "Installs the dependencies for a plugin via NPM.",
            "itemtype": "method",
            "name": "installPluginDependencies",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dependencies",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "plugin",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1420,
            "description": "Loads a module dependencies for the specified plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "require",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "moduleName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The entity returned by the \"require\" call.",
                "type": "*"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1433,
            "description": "Loads the localization files from the specified plugin directory and places\nthem into a hash where the key is the name of the localization file.",
            "itemtype": "method",
            "name": "getLocalizations",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the plugin directory",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1480,
            "description": "Retrieves a plugin service prototype.  It is expected to be a prototype but\nit may also be an instance as along as that instance fufills all\nresponsbilities of the service interface.  When the desired service does not\nexist NULL is returned.",
            "deprecated": true,
            "itemtype": "method",
            "name": "getService",
            "params": [
                {
                    "name": "serviceName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pluginUid",
                    "description": "The unique plugin identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Service prototype",
                "type": "Object"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1502,
            "description": "Retrieves a plugin service prototype.  It is expected to be a prototype but\nit may also be an instance as along as that instance fufills all\nresponsbilities of the service interface.  When the desired service does not\nexist NULL is returned.",
            "static": 1,
            "itemtype": "method",
            "name": "getService",
            "params": [
                {
                    "name": "serviceName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pluginUid",
                    "description": "The unique plugin identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Service prototype",
                "type": "Object"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1522,
            "description": "Attempts to require the main module file for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "loadMainModule",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that the plugin is\ncontained within.",
                    "type": "String"
                },
                {
                    "name": "pathToModule",
                    "description": "The name of the main module file.  It is also\nto pass this parameter as the absolute file path to the module.  The\nfunction first checks if the parameter is just the file name then checks to\nsee if it is an absolute path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mainmodule prototype",
                "type": "Function"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1549,
            "description": "Retrieves the absolute file path to a plugin's public directory",
            "static": 1,
            "itemtype": "method",
            "name": "getPublicPath",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that contains the intended\nplugin"
                }
            ],
            "return": {
                "description": "the absolute file path to a plugin's public directory",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1562,
            "static": 1,
            "itemtype": "method",
            "name": "getPluginsDir",
            "return": {
                "description": "The absolute file path to the plugins directory",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1571,
            "description": "Constructs the path to a specific plugin's details.json file",
            "static": 1,
            "itemtype": "method",
            "name": "getDetailsPath",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that the plugin is\ncontained within.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute file path to the details.json file for a plugin",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1583,
            "description": "Attempts to load and parse the details.json file for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "loadDetailsFile",
            "params": [
                {
                    "name": "filePath",
                    "description": "The absolute path to the details.json file",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, detailsObject)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1610,
            "description": "Validates a plugin's details.json file.",
            "static": 1,
            "itemtype": "method",
            "name": "validateDetails",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to validate",
                    "type": "Object"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory containing the original\ndetails.json file that the details object was derived from.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the details object passes validation, FALSE if not.",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1868,
            "description": "Validates the path to the plugin's icon file.  The path is considered valid\nif the path to a valid file.  The path may be absolute or relative to the\nplugin's public directory.",
            "static": 1,
            "itemtype": "method",
            "name": "validateIconPath",
            "params": [
                {
                    "name": "iconPath",
                    "description": "The path to the icon (image) file"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory housing the plugin"
                }
            ],
            "return": {
                "description": "TRUE if the path is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1890,
            "description": "Validates the path of a main module file.  The path is considered valid if\nthe path points to JS file.  The path may be absolute or relative to the\nspecific plugin directory.",
            "itemtype": "method",
            "name": "validateMainModulePath",
            "params": [
                {
                    "name": "mmPath",
                    "description": "The relative or absolute path to the main module file"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory housing the plugin"
                }
            ],
            "return": {
                "description": "TRUE if the path is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1903,
            "description": "Validates a setting from a details.json file.",
            "itemtype": "method",
            "name": "validateSetting",
            "params": [
                {
                    "name": "setting",
                    "description": "The setting to validate"
                },
                {
                    "name": "position",
                    "description": "The position in the settings array where the setting resides\nas a 0 based index."
                }
            ],
            "return": {
                "description": "The array of errors that were generated.  If no errors were\nproduced an empty array is returned.",
                "type": "Array"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1938,
            "description": "Validates a details.json file's setting value.  The value is required to be a\nstring or a number.  Null, undefined, Arrays, Objects, and prototypes are NOT\nallowed.",
            "static": 1,
            "itemtype": "method",
            "name": "validateSettingValue",
            "params": [
                {
                    "name": "value",
                    "description": "The value to validate",
                    "type": "Boolean|Integer|Float|String"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1951,
            "description": "Retrieves all services (initialized).  The services are provided in the\ncallback.",
            "static": 1,
            "itemtype": "method",
            "name": "getServices",
            "params": [
                {
                    "name": "pathToPlugin",
                    "description": "The absolute file path to the specific plugin directory.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, servicesHash);",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1997,
            "description": "Loads a plugin service and initializes it.  The service is required to\nimplement an \"init\" function. The service is then provided as a parameter in\nthe callback.",
            "static": 1,
            "itemtype": "method",
            "name": "loadService",
            "params": [
                {
                    "name": "pathToService",
                    "description": "The absolute file path to the service javascript file.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, initializedService)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 2022,
            "description": "Loads the controllers for a plugin by iterating through the files in the\nplugin's controllers directory.",
            "static": 1,
            "itemtype": "method",
            "name": "loadControllers",
            "params": [
                {
                    "name": "pathToPlugin",
                    "description": "The absolute file path to the plugin =",
                    "type": "String"
                },
                {
                    "name": "pluginUid",
                    "description": "The unique identifier for the plugin",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 2066,
            "description": "Loads a controller for a plugin and attempts to register the route with the\nRequestHandler.",
            "static": 1,
            "itemtype": "method",
            "name": "loadController",
            "params": [
                {
                    "name": "pathToController",
                    "description": "The absolute file path to the controller",
                    "type": "String"
                },
                {
                    "name": "pluginUid",
                    "description": "The unique identifier for the plugin",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 2116,
            "description": "Derives the name of a plugin service instance.  The function attempts to get\nthe name of the service by looking to see if the service has implemented the\ngetName function.  If it has not then the service name is set to be the file\nname minus any extension.",
            "static": 1,
            "itemtype": "method",
            "name": "getServiceName",
            "params": [
                {
                    "name": "pathToService",
                    "description": "The file path to the service"
                },
                {
                    "name": "service",
                    "description": "The service prototype"
                }
            ],
            "return": {
                "description": "The derived service name",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 2143,
            "description": "<b>NOTE: DO NOT CALL THIS DIRECTLY</b><br/>\nThe function is called when a command is recevied to uninstall a plugin.\nThe function builds out the appropriate options then calls the\nuninstallPlugin function.  The result is then sent back to the calling\nprocess via the CommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "onUninstallPluginCommandReceived",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "The ID of the in-progress job that this\nprocess is intended to join.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 2177,
            "description": "<b>NOTE: DO NOT CALL THIS DIRECTLY</b><br/>\nThe function is called when a command is recevied to validate that a plugin is available to this process for install.\nThe function builds out the appropriate options then calls the\nuninstallPlugin function.  The result is then sent back to the calling\nprocess via the CommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "onIsPluginAvailableCommandReceived",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "The ID of the in-progress job that this\nprocess is intended to join.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 2210,
            "description": "<b>NOTE: DO NOT CALL THIS DIRECTLY</b><br/>\nThe function is called when a command is recevied to install plugin\ndependencies.  The result is then sent back to the calling process via the\nCommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "onIsPluginAvailableCommandReceived",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "The ID of the in-progress job that this\nprocess is intended to join.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 2242,
            "description": "<b>NOTE: DO NOT CALL THIS DIRECTLY</b><br/>\nThe function is called when a command is recevied to initialize a plugin.\nThe result is then sent back to the calling process via the\nCommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "onIsPluginAvailableCommandReceived",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "The ID of the in-progress job that this\nprocess is intended to join.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 2274,
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 32,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "VALID_TYPES",
            "type": "{Object}",
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 48,
            "static": 1,
            "itemtype": "method",
            "name": "getPillNavOptions",
            "params": [
                {
                    "name": "activePill",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 66,
            "itemtype": "method",
            "name": "removeFromSectionMap",
            "params": [
                {
                    "name": "section",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "sectionMap",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 122,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_removeFromSectionMap",
            "params": [
                {
                    "name": "sid",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "sectionMap",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 154,
            "itemtype": "method",
            "name": "updateNavMap",
            "params": [
                {
                    "name": "section",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 205,
            "itemtype": "method",
            "name": "deleteChildren",
            "params": [
                {
                    "name": "parentId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 220,
            "itemtype": "method",
            "name": "getFormattedSections",
            "params": [
                {
                    "name": "localizationService",
                    "description": "",
                    "type": "Localization"
                },
                {
                    "name": "currUrl",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 285,
            "itemtype": "method",
            "name": "getParentSelectList",
            "params": [
                {
                    "name": "currItem",
                    "description": "",
                    "type": "String|ObjectID"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 313,
            "static": 1,
            "itemtype": "method",
            "name": "trimForType",
            "params": [
                {
                    "name": "navItem",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 346,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "navItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 411,
            "itemtype": "method",
            "name": "validateLinkNavItem",
            "params": [
                {
                    "name": "navItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 427,
            "itemtype": "method",
            "name": "validateNavItemName",
            "params": [
                {
                    "name": "navItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 452,
            "itemtype": "method",
            "name": "validateContentNavItem",
            "params": [
                {
                    "name": "navItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 488,
            "itemtype": "method",
            "name": "validateSectionNavItem",
            "params": [
                {
                    "name": "navItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 541,
            "itemtype": "method",
            "name": "validateNavItemParent",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 573,
            "itemtype": "method",
            "name": "validateNavItemContent",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 600,
            "itemtype": "method",
            "name": "validateNavItemEditor",
            "params": [
                {
                    "name": "editor",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 624,
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "navItem",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 664,
            "static": 1,
            "itemtype": "method",
            "name": "getSectionData",
            "params": [
                {
                    "name": "editor",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 689,
            "static": 1,
            "itemtype": "method",
            "name": "formatUrl",
            "params": [
                {
                    "name": "navItem",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 714,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "ls",
                    "description": "",
                    "type": "Localization"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 749,
            "static": 1,
            "itemtype": "method",
            "name": "isValidType",
            "params": [
                {
                    "name": "|{Object}",
                    "description": "type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SectionService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 51,
            "itemtype": "property",
            "name": "localCallbacks",
            "type": "{Object}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 59,
            "itemtype": "property",
            "name": "localizationService",
            "type": "{Localization}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 68,
            "itemtype": "property",
            "name": "activeTheme",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 73,
            "description": "The prioritized theme when selecting templates",
            "itemtype": "property",
            "name": "theme",
            "type": "{String}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 105,
            "description": "Indicates if the data from the registered flags\nshould be reprocessed.  The value is FALSE by default.",
            "itemtype": "property",
            "name": "reprocess",
            "type": "{Boolean}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 113,
            "itemtype": "property",
            "name": "unregisteredFlagTemplate",
            "type": "{Function}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 119,
            "itemtype": "property",
            "name": "pluginService",
            "type": "{PluginService}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 139,
            "description": "A container that provides the mapping for global call backs.  These should\nonly be added to at the start of the application or on plugin install/update.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 162,
            "description": "The default handler for unregistered flags.  It outputs the flag back out.",
            "itemtype": "property",
            "name": "unregisteredFlagHandler",
            "type": "{Function}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 171,
            "description": "Sets the prioritized theme to use when loading templates",
            "itemtype": "method",
            "name": "setTheme",
            "params": [
                {
                    "name": "theme",
                    "description": "The name of the theme.",
                    "type": "String"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 181,
            "description": "Retrieves the prioratized theme",
            "itemtype": "method",
            "name": "getTheme",
            "return": {
                "description": "The prioritized theme to use when loading templates",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 191,
            "description": "When a flag is encountered that is not registered with the engine the \nhandler is called as a fail safe.  It is expected to return a string that \nwill be put in the place of the flag.",
            "itemtype": "method",
            "name": "setUnregisteredFlagHandler",
            "params": [
                {
                    "name": "unregisteredFlagHandler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE when the handler was set, FALSE if not",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 209,
            "description": "When a flag is encountered that is not registered with the engine the \nhandler is called as a fail safe unless there is a locally registered handler.  \nIt is expected to return a string that will be put in the place of the flag.",
            "itemtype": "method",
            "name": "setGlobalUnregisteredFlagHandler",
            "params": [
                {
                    "name": "unregisteredFlagHandler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE when the handler was set, FALSE if not",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 227,
            "description": "Sets the option that when true, instructs the engine to inspect the content \nprovided by a flag for more flags.  This is one way of providing iterative \nprocessing of items.  See the sample plugin for an example.",
            "itemtype": "method",
            "name": "setReprocess",
            "params": [
                {
                    "name": "reprocess",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 238,
            "description": "Retrieves the active theme.  When not provided the service retrieves it \nfrom the settings service.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getActiveTheme",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 252,
            "description": "Retrieves the raw template based on a priority.  The path to the template is\nderived from the specified relative path and the following order of\ndirectories:\n<ol>\n<li>The theme provided by \"getTheme\" if not null</li>\n<li>The globally set active_theme</li>\n<li>Iterates over the list of active plugins looking for the template</li>\n<li>The system template directory</li>\n</ol>",
            "itemtype": "method",
            "name": "getTemplateContentsByPriority",
            "params": [
                {
                    "name": "relativePath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 312,
            "description": "Loads a template file along with any encountered sub-template files and\nprocesses any flags.  The call back provides any error encountered and a\nsecond parameter that is the transformed content.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "The relative location of the template file.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 339,
            "description": "Scans the template for flags.  The callback provides any error and a second\nparameter that is the populated template with any registered flags replaced.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "content",
                    "description": "The raw content to be inspected for flags",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 389,
            "description": "Called when a flag is encountered by the processing engine.  The function is\nresponsible for delegating out the responsibility of the flag to the\nregistered entity.  Some flags are handled by default (although they can\nalways be overriden locally or globally).  The following flags are considered\n\"baked in\" and will be handled automatically unless overriden:\n<ul>\n<li>^loc_xyz^ - A localization flag.  When provided, the Localization\ninstance will have its \"get\" function called in an attempt to retrieve the\nproperly translated value for the key (the part betwee \"^loc_\" and the ending\n\"^\").\n</li>\n<li>^tmp_somedir=someotherdir=templatefileminusext^ - Specifies a\nsub-template that should be loaded processed.  The file is expected to have\na .html extension.\n</li>\n</ul>",
            "itemtype": "method",
            "name": "processFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag to be processed. The value should NOT contain\nthe carrot (^) prefix or postfix.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 456,
            "description": "When a sub-template flag is encountered by the processing engine this\nfunction is called to parse the flag and delegate out the loading and\nprocessing of the sub-template.",
            "itemtype": "method",
            "name": "handleTemplateReplacement",
            "params": [
                {
                    "name": "flag",
                    "description": "The sub-template flag",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 477,
            "description": "Called when the processing engine encounters a non-sub-template flag.  The\nfunction delegates the content transformation out to either the locally or\nglobally registered function.  In the event that a value was registered and not\na function then the value is used as the second parameter in the callback.\nDuring template re-assembly the value will be converted to a string.",
            "itemtype": "method",
            "name": "handleReplacement",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag to transform",
                    "type": "String"
                },
                {
                    "name": "replacement",
                    "description": "The value can either be a function to handle the\nreplacement or a value.",
                    "type": "Mixed"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 523,
            "description": "Registers a value or function for the specified",
            "itemtype": "method",
            "name": "registerLocal",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag name to map to the value when encountered in a\ntemplate.",
                    "type": "String"
                },
                {
                    "name": "callbackFunctionOrValue",
                    "description": "The function to execute to perform the\ntransformation or the value to substitute in place of the flag.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "TRUE when registered successfully, FALSE if not",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 538,
            "description": "Retrieves the content template names and locations for the active theme.",
            "itemtype": "method",
            "name": "getTemplatesForActiveTheme",
            "params": [
                {
                    "name": "cb",
                    "description": "A call back that provides two parameters: cb(err, [{templateName: templateLocation])",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 589,
            "description": "Creates an instance of Template service based",
            "itemtype": "method",
            "name": "getChildInstance",
            "return": {
                "description": "",
                "type": "TemplateService"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 608,
            "description": "Determines if the content provided is equal to the flag",
            "static": 1,
            "itemtype": "method",
            "name": "isFlag",
            "params": [
                {
                    "name": "content",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "flag",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 620,
            "description": "Retrieves the content templates that are available for use to render\nArticles and pages.",
            "itemtype": "method",
            "name": "getAvailableContentTemplates",
            "return": {
                "description": "An array of template definitions",
                "type": "Array"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 640,
            "description": "Registers a value or function for the specified",
            "static": 1,
            "itemtype": "method",
            "name": "registerGlobal",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag name to map to the value when encountered in a\ntemplate.",
                    "type": "String"
                },
                {
                    "name": "callbackFunctionOrValue",
                    "description": "The function to execute to perform the\ntransformation or the value to substitute in place of the flag.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "TRUE when registered successfully, FALSE if not",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 656,
            "description": "Retrieves the default path to a template file based on the assumption that\nthe provided path is relative to the pencilblue/plugins/pencilblue/templates/ directory.",
            "static": 1,
            "itemtype": "method",
            "name": "getDefaultPath",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute path",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 669,
            "description": "Retrieves the path to a template file based on the assumption that\nthe provided path is relative to the pencilblue/plugins/[themeName]/templates/ directory.",
            "static": 1,
            "itemtype": "method",
            "name": "getCustomPath",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute path",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 682,
            "description": "Compiles the content be eagerly searching for flags/directives.  The static\ncontent is also placed into an object.  Whether static or a flag, an object\nis created and pushed into an array.  Each object has two properties: \"type\"\nthat describes the type of template part it is (static, flag).  \"val\" the\nstring value of the part.",
            "static": 1,
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "text",
                    "description": "The template text to compile",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "The starting flag marker",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'^'"
                },
                {
                    "name": "end",
                    "description": "The ending flag marker",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'^'"
                }
            ],
            "return": {
                "description": "The array template parts",
                "type": "Array"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 775,
            "description": "Encodes the value for an HTML document when a value is provided.",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "doHtmlEncoding",
                    "description": "Sets the property to encode the value to HTML",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current value of the htmlEncode property",
                "type": "Boolean"
            },
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 788,
            "description": "Specifies that the value should not be encoded for HTML",
            "itemtype": "method",
            "name": "skipEncode",
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 796,
            "description": "Specifies that the value should be encoded for HTML",
            "itemtype": "method",
            "name": "doEncode",
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 804,
            "description": "Retrieves the processed value represented by this object.",
            "itemtype": "method",
            "name": "val",
            "return": {
                "description": "The processed value",
                "type": "String"
            },
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 817,
            "description": "Overrides the toString function in order to properly serialize the value.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of the value that follows the\nprocessing instructions.",
                "type": "String"
            },
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\topic_service.js",
            "line": 26,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "TopicService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\topic_service.js",
            "line": 52,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "service",
                    "description": "An instance of the service that triggered \n the event that called this handler",
                    "type": "TopicService"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "TopicService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\topic_service.js",
            "line": 67,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "service",
                    "description": "An instance of the service that triggered \n the event that called this handler",
                    "type": "TopicService"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "TopicService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\topic_service.js",
            "line": 81,
            "static": 1,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "The DTO that was provided for persistence",
                            "type": "Object"
                        },
                        {
                            "name": "service",
                            "description": "An instance of the service that triggered \n the event that called this handler",
                            "type": "TopicService"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "TopicService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 39,
            "description": "Takes the URL path and tests it against registered routes.",
            "static": 1,
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The themed route specification for the first route that\nmatches the given URL path.  When no routes match NULL is returned.",
                "type": "Object"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 61,
            "description": "Look at a specific content type to see if a matching URL key exists.  An\noptional ID can be provided to ensure that only an existing key for the\nobject with that ID exists.",
            "itemtype": "method",
            "name": "existsForType",
            "params": [
                {
                    "name": "params",
                    "description": "Contains the options for the function.  \"url\"\n(string) and \"type\" (string) are required.  \"id\" (string) is optional.",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 100,
            "description": "Takes a variable set of arguments and joins them together to form a URL path.",
            "itemtype": "method",
            "name": "urlJoin",
            "return": {
                "description": "a URL path",
                "type": "String"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 118,
            "description": "Takes a url and extracts the wild card part.",
            "itemtype": "method",
            "name": "getCustomUrl",
            "params": [
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The custom part of the URL",
                "type": "String"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 143,
            "description": "Determines whether a URL is external to the system by parsing the URL and\nthen looking to see if the host matches that of the provided request.",
            "itemtype": "method",
            "name": "isExternalUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "request",
                    "description": "",
                    "type": "Request"
                }
            ],
            "return": {
                "description": "TRUE if the link is external to the system, FALSE if not.",
                "type": "Boolean"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 161,
            "description": "Indicates if the URL is fully qualified, meaning that the URL provides the\n'http' protocol at the beginning of the URL.",
            "itemtype": "method",
            "name": "isFullyQualifiedUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "The URL to inspect",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if fully qualified, FALSE if not",
                "type": "Boolean"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 48,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 57,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "UNVERIFIED_TYPE",
            "type": "{String}",
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 66,
            "description": "Gets the full name of a user",
            "itemtype": "method",
            "name": "getFullName",
            "params": [
                {
                    "name": "userId",
                    "description": "The object Id of the user",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 89,
            "description": "Takes the specified user object and formats the first and last name.",
            "static": 1,
            "itemtype": "method",
            "name": "getFormattedName",
            "params": [
                {
                    "name": "user",
                    "description": "The user object to extract a name for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The user's full name",
                "type": "String"
            },
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 104,
            "description": "Gets the full names for the supplied authors",
            "itemtype": "method",
            "name": "getAuthors",
            "params": [
                {
                    "name": "objArry",
                    "description": "An array of user object",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 148,
            "description": "Retrieves the available access privileges to assign to a user",
            "itemtype": "method",
            "name": "getAdminOptions",
            "params": [
                {
                    "name": "session",
                    "description": "The current session object",
                    "type": "Object"
                },
                {
                    "name": "ls",
                    "description": "The localization object",
                    "type": "Object"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 172,
            "description": "Retrieves a select list (id/name) of available system editors",
            "deprecated": true,
            "deprecationMessage": "since 0.4.0",
            "itemtype": "method",
            "name": "getEditorSelectList",
            "params": [
                {
                    "name": "currId",
                    "description": "The Id to be excluded from the list.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is an\nerror, if exists, the second is an array of objects that represent the\neditor select list.",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 186,
            "description": "Retrieves a select list (id/name) of available system writers or editors",
            "itemtype": "method",
            "name": "getWriterOrEditorSelectList",
            "params": [
                {
                    "name": "currId",
                    "description": "The Id to be excluded from the list.",
                    "type": "String"
                },
                {
                    "name": "getWriters",
                    "description": "Whether to retrieve all writers or just editors.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is an\nerror, if exists, the second is an array of objects that represent the\neditor select list.",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 237,
            "description": "Sends a verification email to an unverified user",
            "itemtype": "method",
            "name": "sendVerificationEmail",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 271,
            "description": "Sends a password reset email to a user",
            "itemtype": "method",
            "name": "sendPasswordResetEmail",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                },
                {
                    "name": "passwordReset",
                    "description": "A password reset object containing the verification code",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 299,
            "description": "Checks to see if a proposed user name or email is already in the system",
            "itemtype": "method",
            "name": "isUserNameOrEmailTaken",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "User object Id to exclude from the search",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 322,
            "description": "Gets the total counts of a username and email in both the user and unverified_user collections",
            "itemtype": "method",
            "name": "getExistingUsernameEmailCounts",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "User object Id to exclude from the search",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 361,
            "description": "Indicates if there exists a user with the specified email value. The \nfield is expected to be a string value.  The values will be compare with \ncase ignored.",
            "itemtype": "method",
            "name": "isUsernameInUse",
            "params": [
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "exclusionId",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 375,
            "description": "Indicates if there exists a user with the specified username value. The \nfield is expected to be a string value.  The values will be compare with \ncase ignored.",
            "itemtype": "method",
            "name": "isUsernameInUse",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "exclusionId",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 389,
            "description": "Indicates if there exists a user with the specified property value. The \nfield is expected to be a string value.  The values will be compare with \ncase ignored.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_isFieldInUse",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "field",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "exclusionId",
                            "description": "",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 436,
            "description": "Retrieves users by their access level (role)",
            "itemtype": "method",
            "name": "findByAccessLevel",
            "params": [
                {
                    "name": "level",
                    "description": "The admin level of the users to find",
                    "type": "Integer"
                },
                {
                    "name": "options",
                    "description": "The search options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "select",
                            "description": "The fields to return",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        },
                        {
                            "name": "orderBy",
                            "description": "The order to return the results in",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "The maximum number of results to return",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "The number of results to skip before\nreturning results.",
                            "type": "Offset",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: an error, if\noccurred, and the second is an array of User objects.",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 471,
            "description": "Verifies if a user has the provided access level or higher",
            "itemtype": "method",
            "name": "hasAccessLevel",
            "params": [
                {
                    "name": "uid",
                    "description": "The user's object Id",
                    "type": "String"
                },
                {
                    "name": "accessLevel",
                    "description": "The access level to test against",
                    "type": "Number"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 488,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "The DTO that was provided for persistence",
                            "type": "Object"
                        },
                        {
                            "name": "service",
                            "description": "An instance of the service that triggered \n the event that called this handler",
                            "type": "UserService"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 605,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "service",
                    "description": "An instance of the service that triggered \n the event that called this handler",
                    "type": "UserService"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 630,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "service",
                    "description": "An instance of the service that triggered \n the event that called this handler",
                    "type": "UserService"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 657,
            "static": 1,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "The DTO that was provided for persistence",
                            "type": "Object"
                        },
                        {
                            "name": "service",
                            "description": "An instance of the service that triggered \n the event that called this handler",
                            "type": "UserService"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 40,
            "description": "The number of tasks to run in parallel",
            "itemtype": "property",
            "name": "parallelLimit",
            "type": "{Integer}",
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 47,
            "description": "Sets the number of tasks to run in parallel",
            "itemtype": "method",
            "name": "setParallelLimit",
            "params": [
                {
                    "name": "max",
                    "description": "The maximum number of tasks to run in parallel",
                    "type": "Integer"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 56,
            "description": "Kicks off the set of tasks for the job.  The implementation wraps the items\nin a domain in an attempt to provide a level of error handling.  When a\nqualifying error is intercepted by the domain processResults is called\nproviding the error and all other task execution is halted.",
            "see": [
                "JobRunner#run"
            ],
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 101,
            "description": "Responsible for providing an array or hash of tasks that will be executed by\nthe job.  The extending implmentation MUST override this function or an\nerror will be thrown.",
            "itemtype": "method",
            "name": "getTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 112,
            "description": "Called once after job execution.  It is recommended that extending\nimplmentations use this function to peform any ETL operations to prepare\ndata for the callback.",
            "itemtype": "method",
            "name": "processResults",
            "params": [
                {
                    "name": "err",
                    "description": "The error generated during task execution if exists",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "The result of each tasks' execution.",
                    "type": "Object|Array"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 124,
            "description": "Called directly before the first tasks begins to execute.  It is recommended\nthat the extending implementation override this function in order to call\nthe \"onStart\" function.",
            "itemtype": "method",
            "name": "onBeforeFirstTask",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes one optional error parameter",
                    "type": "Function"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 35,
            "description": "Indicates if the job is to run as the initiator or a worker.  When TRUE, the\njob sends commands to all processes in the cluster to perform the\njob.  When FALSE, the actual job is performed.",
            "itemtype": "property",
            "name": "isInitiator",
            "type": "{Boolean}",
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 44,
            "description": "Indicates if the job is to run as the initiator or a worker.  When TRUE, the\njob sends commands to all processes in the cluster to perform the\njob.  When FALSE, the actual job is performed on this process.",
            "itemtype": "method",
            "name": "setRunAsInitiator",
            "params": [
                {
                    "name": "isInitiator",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "This instance",
                "type": "ClusterJobRunner"
            },
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 57,
            "description": "Retrieves the tasks to be executed by this job.  The tasks provided to the\ncallback are determined by the isInitiator property.",
            "see": [
                "AsyncJobRunner#getTasks"
            ],
            "itemtype": "method",
            "name": "getTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 73,
            "description": "Retrieves the tasks needed to contact each process in the cluster to\nperform the job.",
            "itemtype": "method",
            "name": "getInitiatorTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 83,
            "description": "Retrieves the tasks needed to perform the job on this process.",
            "itemtype": "method",
            "name": "getWorkerTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 92,
            "description": "Called when the job has completed its assigned set of tasks.  The function\nis responsible for processing the results and calling back with the refined\nresult.",
            "see": [
                "AsyncJobRunner#processResults"
            ],
            "itemtype": "method",
            "name": "processResults",
            "params": [
                {
                    "name": "err",
                    "description": "The error that occurred (if any) during task execution",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "An array containing the result of each executed task",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that occurred (if exists) and the second is dependent on the\nisInitiator property.  See processClusterResults and processWorkerResults\nfor more details.",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 131,
            "description": "Called when the tasks have completed execution and isInitiator = FALSE.  The\nfunction ispects the results of each processes' execution and attempts to\ndecipher if an error occurred.  The function calls back with a result object\nthat provides four properties: success (Boolean), id (String), pluginUid\n(String), results (Array of raw results).",
            "itemtype": "method",
            "name": "processClusterResults",
            "params": [
                {
                    "name": "err",
                    "description": "The error that occurred (if any) during task execution",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "An array containing the result of each executed task",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that occurred (if exists) and the second is an object that encloses\nthe properties that describe the job as well as the raw results.",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 148,
            "description": "Called when the tasks have completed execution and isInitiator = FALSE. The\nfunction blindly passes the results of the tasks back to the callback.",
            "itemtype": "method",
            "name": "processWorkerResults",
            "params": [
                {
                    "name": "err",
                    "description": "The error that occurred (if any) during task execution",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "An array containing the result of each executed task",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that occurred (if exists) and the second is an array of Boolean\nvalues that indicate the success or failure of each task.",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 162,
            "description": "Called before the start of task execution.  When the property isInitiator =\nTRUE the onStart function is called to mark the start of the job.  It is not\ncalled for others because it is assumed that workers are already part of an\nin-progress cluster job and that an existing job id has been provided.",
            "itemtype": "method",
            "name": "onBeforeFirstTask",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nError (if occurred) and the second is a boolean value that indicates if the\nfunction successfully completed any pre-requsite operations before task\nexecution begins.",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 180,
            "description": "Creates a simple task that sends a command to the entire cluster then waits\nfor all responses.  Success if determined by the lack of an Error in the\ncallback in addition to the lack of an \"error\" property on each item in the\nresults array provided by the cb from the call to send the command.",
            "itemtype": "method",
            "name": "createCommandTask",
            "params": [
                {
                    "name": "type",
                    "description": "The command type",
                    "type": "String"
                },
                {
                    "name": "command",
                    "description": "The command to broadcast to the cluster.",
                    "type": "Object"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 37,
            "description": "An instace of DAO to provide direct access to the DB if it is needed.",
            "itemtype": "property",
            "name": "dao",
            "type": "{DAO}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 44,
            "description": "Holds the unique identifier for the job",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 51,
            "description": "The percentage of the overall work that this job accounts for.  If this\njob is run by itself then the value should be 1.  This means that 100%\nof the job is completed by this job.  If, for example, the value is .333\nthen it is assumed that this job accounts for 33% or one third of the\nover all work necessary to complete the job.  This is handy when a large\njob is made up of smaller jobs.  This value will assist in allowing the\njobs to calculate their update increments.  The number must be a value\nbetween 0 (exclusive) & 1 (inclusive).",
            "itemtype": "property",
            "name": "taskFactor",
            "type": "{Float}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 66,
            "description": "The name of the persistence entity that contains the log statements for the\njob",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "JOB_LOG_STORE_NAME",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 76,
            "description": "The name of the persistence entity that contains the job descriptor",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "JOB_STORE_NAME",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 85,
            "description": "The status code for a job that is in progress",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_START_STATUS",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 94,
            "description": "The status code for a job that has completed successfully",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_DONE_STATUS",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 103,
            "description": "The status code for a job that has generated a fatal error",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_ERROR_STATUS",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 112,
            "description": "The initialization function sets the job's name and ID as well as provide an\ninstace of DAO.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "name",
                    "description": "The job's name",
                    "type": "String"
                },
                {
                    "name": "jobId",
                    "description": "The job's unique identifier",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 127,
            "description": "Retrieves the unique identifier for the job",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The job ID",
                "type": "String"
            },
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 136,
            "description": "Sets the portion of the over arching job that this job instance will \ncontribute once complete.",
            "itemtype": "method",
            "name": "setChunkOfWorkPercentage",
            "params": [
                {
                    "name": "chunkOfWorkPercentage",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "JobRunner"
            },
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 152,
            "description": "Retrieves the chunk of work percentage",
            "itemtype": "method",
            "name": "getChunkOfWorkPercentage",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 161,
            "description": "Call this function once to start the job.  The job will execute the callback\nupon completion.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that was generated and the second is the implementation specific\nresult of the job.",
                    "type": "Function"
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 173,
            "description": "Logs a message to the system logger as well as to the persistence layer. The\nfunction takes a variable number of arguments.  A string message/pattern\nfollowed by the variables to fill in with that data.  See util.format or the\nimplementation for Winston loggers.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "message",
                    "description": "The message or pattern to log",
                    "type": "String"
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 205,
            "description": "To be called once by the extending implmentation to mark the start of the\njob.  The function persists the job record and makes it available to future\ncalls to onUpdate or onComplete.",
            "itemtype": "method",
            "name": "onStart",
            "params": [
                {
                    "name": "status",
                    "description": "The starting status of the job",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'RUNNING'"
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 225,
            "description": "To be called by the extending implmentation when progress has been made.\nThe incremental amount of progress should be provided keeping in mind that\nthe overall progress should not exceed 100.  Optionally, the status\nparameter may also be included.",
            "itemtype": "method",
            "name": "onUpdate",
            "params": [
                {
                    "name": "progressIncrement",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "status",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 257,
            "description": "Called once by the extending implementation when the job has completed\nexecution whether that be successful completion or by error.",
            "itemtype": "method",
            "name": "onCompleted",
            "params": [
                {
                    "name": "status",
                    "description": "The final status of the job.  If not provided the\nstatus will default to 'COMPLETED' or 'ERRORED' when an error is provided as\nthe second parameter.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "err",
                    "description": "The error, if any, that was generated by the job's\nexecution",
                    "type": "Error"
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\providers\\cache_lock_provider.js",
            "line": 30,
            "description": "Attempts to acquire the lock with the given name.",
            "itemtype": "method",
            "name": "acquire",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "payload",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CacheLockProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\providers\\cache_lock_provider.js",
            "line": 58,
            "description": "Retrieves the payload for the lock",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CacheLockProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\providers\\cache_lock_provider.js",
            "line": 78,
            "description": "Releases the lock",
            "itemtype": "method",
            "name": "release",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CacheLockProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\providers\\db_lock_provider.js",
            "line": 30,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "LOCK_COLLECTION",
            "type": "{String}",
            "class": "DbLockProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\providers\\db_lock_provider.js",
            "line": 40,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "EXPECTED_ERROR_CODE",
            "type": "{Integer}",
            "class": "DbLockProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\providers\\db_lock_provider.js",
            "line": 50,
            "description": "Attempts to acquire the lock with the given name.",
            "itemtype": "method",
            "name": "acquire",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "payload",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "Lock timeout in seconds",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DbLockProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\providers\\db_lock_provider.js",
            "line": 87,
            "description": "Retrieves the payload for the lock",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DbLockProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\providers\\db_lock_provider.js",
            "line": 103,
            "description": "Releases the lock",
            "itemtype": "method",
            "name": "release",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DbLockProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\lock_service.js",
            "line": 38,
            "itemtype": "property",
            "name": "provider",
            "type": "{MediaProvider}",
            "class": "LockService",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\lock_service.js",
            "line": 46,
            "description": "Attempts to acquire a semaphore with the given name",
            "itemtype": "method",
            "name": "acquire",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "payload",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LockService",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\lock_service.js",
            "line": 73,
            "description": "Retrieves the payload for the lock",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LockService",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\lock_service.js",
            "line": 83,
            "description": "Releases the lock",
            "itemtype": "method",
            "name": "release",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LockService",
            "module": "Services"
        },
        {
            "file": "include\\service\\locks\\lock_service.js",
            "line": 94,
            "description": "Inspects the current PB configuration to determine what lock provider to \ninstantiate and return",
            "static": 1,
            "itemtype": "method",
            "name": "loadProvider",
            "return": {
                "description": "An instance of a media provider or NULL when no \nprovider can be loaded.",
                "type": "LockProvider"
            },
            "class": "LockService",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 34,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 43,
            "description": "The list of supported extensions",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SUPPORTED",
            "type": "{Object}",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 63,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 88,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 99,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 111,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 121,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 133,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 144,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 156,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 179,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 227,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 239,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 250,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 266,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\audio_media_renderer.js",
            "line": 279,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\base_media_renderer.js",
            "line": 33,
            "description": "Renders an iframe element",
            "static": 1,
            "itemtype": "method",
            "name": "renderSingleElementEmbed",
            "return": {
                "description": "HTML",
                "type": "String"
            },
            "class": "BaseMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\base_media_renderer.js",
            "line": 43,
            "description": "Renders a single element",
            "static": 1,
            "itemtype": "method",
            "name": "renderSingleElementEmbed",
            "return": {
                "description": "HTML",
                "type": "String"
            },
            "class": "BaseMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\base_media_renderer.js",
            "line": 63,
            "description": "Generates an attribute string from a hash of key/value pairs",
            "static": 1,
            "itemtype": "method",
            "name": "getAttributeStr",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BaseMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\base_media_renderer.js",
            "line": 81,
            "description": "Generates a style string from a hash of key/value pairs.  The string \nincludes the 'sytle=\"[STUFF HERE]\"' wrapper",
            "static": 1,
            "itemtype": "method",
            "name": "getStyleAttrStr",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BaseMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 34,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 43,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 71,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 82,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 94,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 104,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 116,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 131,
            "description": "Indicates if the passed URL to a media resource points to the website \nthat provides the media represented by this media renderer with a libyan \ndomain (.ly)",
            "static": 1,
            "itemtype": "method",
            "name": "isLibyanDomain",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 147,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 158,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 170,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 193,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 221,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 233,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 245,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 260,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\daily_motion_media_renderer.js",
            "line": 275,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "DailyMotionMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 31,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 40,
            "description": "The list of supported extensions",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SUPPORTED",
            "type": "{Object}",
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 69,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 90,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 101,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 113,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 123,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 135,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 146,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type\nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 158,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style)\nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be\napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if\noccurred and the second is the rendering of the media resource as a HTML\nformatted string",
                    "type": "Function"
                }
            ],
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 181,
            "description": "Renders the media resource via the media descriptor object.  It is only\nguaranteed that the \"location\" property will be available at the time of\nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the\nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style)\nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be\napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if\noccurred and the second is the rendering of the media resource as a HTML\nformatted string",
                    "type": "Function"
                }
            ],
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 209,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource\nrepresented by the media Id",
                "type": "String"
            },
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 221,
            "description": "Retrieves the unique identifier from the URL provided.  The value should\ndistinguish the media resource from the others of this type and provide\ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 232,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was\nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an\nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 248,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if\noccurred and the second is the URI string to the thumbnail.  Empty string or\nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\image_media_renderer.js",
            "line": 261,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page\nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "ImageMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 34,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 43,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 67,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 78,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 90,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 100,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 112,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 127,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 138,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 150,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 173,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 201,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 213,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 226,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 242,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\instagram_media_renderer.js",
            "line": 255,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "InstagramMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 34,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 43,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 67,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 78,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 90,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 100,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 112,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 127,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 138,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 150,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 173,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 201,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 213,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 232,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 248,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\kickstarter_media_renderer.js",
            "line": 261,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "KickStarterMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 35,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 44,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 68,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 79,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 91,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 101,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 113,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 128,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 139,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 151,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 174,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 202,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 214,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 230,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 246,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 264,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\slideshare_media_renderer.js",
            "line": 274,
            "description": "Retrieves details about the media resource via SlideShare's API because they \nare inconsistent about how they reference things.",
            "static": 1,
            "itemtype": "method",
            "name": "getDetails",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Provides two parameters. First is an Error if occurred \nand the second is an object with the data returned by the SlideShare API",
                    "type": "Function"
                }
            ],
            "class": "SlideShareMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 35,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 44,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 68,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 79,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 91,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 101,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 113,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 128,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 139,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 151,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 174,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 202,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 214,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 230,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 246,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\storify_media_renderer.js",
            "line": 259,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "StorifyMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 34,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 43,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 67,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 78,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 90,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 100,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 112,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 127,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 138,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 150,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 173,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 201,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 213,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 226,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 242,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\trinket_media_renderer.js",
            "line": 255,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "TrinketMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 34,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 43,
            "description": "The list of supported extensions",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SUPPORTED",
            "type": "{Object}",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 66,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 91,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 102,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 114,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 124,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 136,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 147,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 159,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 182,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 230,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 242,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 253,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 269,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\video_media_renderer.js",
            "line": 282,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "VideoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 35,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 44,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 69,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 80,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 92,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 102,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 114,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 129,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 140,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 152,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 175,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 203,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 215,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 227,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 242,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vimeo_media_renderer.js",
            "line": 285,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "VimeoMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 34,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 43,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 68,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 79,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 91,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 101,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 113,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 128,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 139,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 151,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 174,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 202,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 214,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 226,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 241,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\vine_media_renderer.js",
            "line": 254,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "VineMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 34,
            "description": "The media type supported by the provider",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 43,
            "description": "Provides the styles used by each type of view",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "STYLES",
            "type": "{Object}",
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 67,
            "description": "Retrieves the style for the specified type of view",
            "static": 1,
            "itemtype": "method",
            "name": "getStyle",
            "params": [
                {
                    "name": "viewType",
                    "description": "The view type calling for a styling",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a hash of style properties",
                "type": "Object"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 78,
            "description": "Retrieves the supported media types as a hash.",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedTypes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 90,
            "description": "Retrieves the name of the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 100,
            "description": "Determines if the URL to a media object is supported by this renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the URL is supported by the renderer, FALSE if not",
                "type": "Boolean"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 112,
            "description": "Indicates if the passed URL to a media resource points to the main website \nthat provides the media represented by this media renderer",
            "static": 1,
            "itemtype": "method",
            "name": "isFullSite",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 127,
            "description": "Indicates if the passed URL to a media resource points to the website \nthat provides the media represented by this media renderer with a Belgian \ndomain (.be)",
            "static": 1,
            "itemtype": "method",
            "name": "isBelgiumDomain",
            "params": [
                {
                    "name": "parsedUrl",
                    "description": "The URL string or URL object",
                    "type": "Object|String"
                }
            ],
            "return": {
                "description": "TRUE if URL points to the main domain and media resource, FALSE if not",
                "type": "Boolean"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 143,
            "description": "Gets the specific type of the media resource represented by the provided URL",
            "static": 1,
            "itemtype": "method",
            "name": "getType",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 154,
            "description": "Retrieves the Font Awesome icon class.  It is safe to assume that the type \nprovided will be a supported type by the renderer.",
            "static": 1,
            "itemtype": "method",
            "name": "getIcon",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 166,
            "description": "Renders the media resource via the raw URL to the resource",
            "static": 1,
            "itemtype": "method",
            "name": "renderByUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 189,
            "description": "Renders the media resource via the media descriptor object.  It is only \nguaranteed that the \"location\" property will be available at the time of \nrendering.",
            "static": 1,
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "media",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "location",
                            "description": "The unique resource identifier (only to the \nmedia type) for the media resource",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "attrs",
                            "description": "A hash of all attributes (excluding style) \nthat will be applied to the element generated by the rendering",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "style",
                            "description": "A hash of all attributes that will be \napplied to the style of the element generated by the rendering.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the rendering of the media resource as a HTML \nformatted string",
                    "type": "Function"
                }
            ],
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 217,
            "description": "Retrieves the source URI that will be used when generating the rendering",
            "static": 1,
            "itemtype": "method",
            "name": "getEmbedUrl",
            "params": [
                {
                    "name": "mediaId",
                    "description": "The unique (only to the type) media identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A properly formatted URI string that points to the resource \nrepresented by the media Id",
                "type": "String"
            },
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 229,
            "description": "Retrieves the unique identifier from the URL provided.  The value should \ndistinguish the media resource from the others of this type and provide \ninsight on how to generate the embed URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaId",
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 246,
            "description": "Retrieves any meta data about the media represented by the URL.",
            "static": 1,
            "itemtype": "method",
            "name": "getMeta",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isFile",
                    "description": "indicates if the URL points to a file that was \nuploaded to the PB server",
                    "type": "Boolean"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides an Error if occurred and an \nObject if meta was collected.  NULL if no meta was collected",
                    "type": "Function"
                }
            ],
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 263,
            "description": "Retrieves a URI to a thumbnail for the media resource",
            "static": 1,
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback where the first parameter is an Error if \noccurred and the second is the URI string to the thumbnail.  Empty string or \nNULL if no thumbnail is available",
                    "type": "Function"
                }
            ],
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\renderers\\youtube_media_renderer.js",
            "line": 278,
            "description": "Retrieves the native URL for the media resource.  This can be the raw page \nwhere it was found or a direct link to the content.",
            "static": 1,
            "itemtype": "method",
            "name": "getNativeUrl",
            "class": "YouTubeMediaRenderer",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 37,
            "description": "Retrieves the item on the file system as a stream.",
            "itemtype": "method",
            "name": "getStream",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for interacting with S3",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "bucket",
                            "description": "The S3 bucket to interact with",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and a ReadableStream that contains the media content.",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 52,
            "description": "Retrieves the content from the file system as a String or Buffer.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and an entity that contains the media content.",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 65,
            "description": "Sets media content into the file system based on the specified media path and \noptions.  The stream provided must be a ReadableStream.",
            "itemtype": "method",
            "name": "setStream",
            "params": [
                {
                    "name": "stream",
                    "description": "The content stream",
                    "type": "ReadableStream"
                },
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and the success of the operation.",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 89,
            "description": "Sets media content into an file system based on the specified media path and \noptions.  The data must be in the form of a String or Buffer.",
            "itemtype": "method",
            "name": "setStream",
            "params": [
                {
                    "name": "fileDataStrOrBuffOrStream",
                    "description": "The content to persist",
                    "type": "String|Buffer"
                },
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and the success of the operation.",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 109,
            "description": "Creates a writable stream to a file with the specified path.  The resource \nis overwritten if already exists.",
            "itemtype": "method",
            "name": "createWriteStream",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and a WriteableStream.",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 134,
            "description": "Checks to see if the file actually exists on disk",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and a Boolean.",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 149,
            "description": "Deletes a file from the file system",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and the success of the operation.",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 164,
            "description": "Retrieve the stats on the file",
            "itemtype": "method",
            "name": "stat",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and an object that contains the file stats",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 177,
            "description": "Recursively creates the directory structure based on the absolute file path \nprovided.",
            "itemtype": "method",
            "name": "mkdirs",
            "params": [
                {
                    "name": "absoluteFilePath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "A",
                    "description": "callback that provides two parameters: Error, if \noccurred and result of the attempt at the creation of each directory in the \npath.",
                    "type": "Function"
                }
            ],
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\fs_media_provider.js",
            "line": 219,
            "description": "Generates an absolute path based on the parent directory and media path.  \nThe parent directory is expected to a single directory or set of directories \nnested under the pb.config.docRoot.",
            "static": 1,
            "itemtype": "method",
            "name": "getMediaPath",
            "params": [
                {
                    "name": "parentDir",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mediaPath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Absolute path to the resource",
                "type": "String"
            },
            "class": "FsMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 32,
            "description": "Retrieves the item in GridFS as a stream.",
            "itemtype": "method",
            "name": "getStream",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for interacting with S3",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "bucket",
                            "description": "The S3 bucket to interact with",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and a ReadableStream that contains the media content.",
                    "type": "Function"
                }
            ],
            "class": "MongoMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 60,
            "description": "Retrieves the content from GridFS as a String or Buffer.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and an entity that contains the media content.",
                    "type": "Function"
                }
            ],
            "class": "MongoMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 94,
            "description": "Sets media content into GridFS based on the specified media path and \noptions.  The stream provided must be a ReadableStream.",
            "itemtype": "method",
            "name": "setStream",
            "params": [
                {
                    "name": "stream",
                    "description": "The content stream",
                    "type": "ReadableStream"
                },
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and the success of the operation.",
                    "type": "Function"
                }
            ],
            "class": "MongoMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 121,
            "description": "Sets media content into GridFS based on the specified media path and \noptions.  The data must be in the form of a String or Buffer.",
            "itemtype": "method",
            "name": "setStream",
            "params": [
                {
                    "name": "fileDataStrOrBuffOrStream",
                    "description": "The content to persist",
                    "type": "String|Buffer"
                },
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and the success of the operation.",
                    "type": "Function"
                }
            ],
            "class": "MongoMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 153,
            "description": "Not Implemented",
            "itemtype": "method",
            "name": "createWriteStream",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and a WriteableStream.",
                    "type": "Function"
                }
            ],
            "class": "MongoMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 165,
            "description": "Checks to see if the file actually exists in GridFS",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and a Boolean.",
                    "type": "Function"
                }
            ],
            "class": "MongoMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 184,
            "description": "Deletes a file from the GridFS",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and the success of the operation.",
                    "type": "Function"
                }
            ],
            "class": "MongoMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\media\\mongo_media_provider.js",
            "line": 203,
            "description": "Retrieve the stats on the file",
            "itemtype": "method",
            "name": "stat",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The path/key to the media.  Typically this is a \npath such as: /media/2014/9/540a3ff0e30ddfb9e60000be-1409957872680.jpg",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: An Error, if \noccurred and an object that contains the file stats",
                    "type": "Function"
                }
            ],
            "class": "MongoMediaProvider",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 51,
            "description": "Represents the name of the collection to interact with",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 58,
            "description": "An instance of DAO to be used to interact with the persitence layer",
            "itemtype": "property",
            "name": "dao",
            "type": "{DAO}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 66,
            "description": "The maximum allowed number of results allowed to be returned when using \nthe paging wrapper",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "MAX_RESULTS",
            "type": "{Integer}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 77,
            "description": "The event that is triggered before the count query is executed",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BEFORE_COUNT",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 87,
            "description": "The event that is triggered before the query is executed to retrieve \nresults",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BEFORE_GET_ALL",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 98,
            "description": "The event that is triggered when querying for one or more resources",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "GET_ALL",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 108,
            "description": "The event that is triggered before the query is executed to retrieve \nan item by ID",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BEFORE_GET",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 119,
            "description": "The event that is triggered when retrieving a resource by ID",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "GET_ALL",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 129,
            "description": "The event that is triggered when a DTO is passed to the save function",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "FORMAT",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 139,
            "description": "The event that is triggered when a DTO is passed to the save function \nand after the format event has completed",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "MERGE",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 150,
            "description": "The event that is triggered when a DTO is passed to the save function\nand after the merge event has completed",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "VALIDATE",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 161,
            "description": "The event that is triggered when a DTO is passed to the save function\nand aftr the validate event has completed.  When validation failures \noccur this event will not fire.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BEFORE_SAVE",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 173,
            "description": "The event that is triggered when a DTO is passed to the save function\nand after the save operation has completed successfully.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "AFTER_SAVE",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 184,
            "description": "The event that is triggered when the delete function is called.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BEFORE_DELETE",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 194,
            "description": "The event that is triggered when the delete function is called and after\nthe delete operation has completed successfully.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "AFTER_DELETE",
            "type": "{String}",
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 205,
            "description": "Retrieves the object type supported by the service",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "The object type supported",
                "type": "String"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 214,
            "description": "Retrieves a context object to be passed to event listeners",
            "itemtype": "method",
            "name": "getContext",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "String|Object|Number|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 228,
            "description": "Executes a query for resources against the persistence layer. The \nfunction will callback with an array of results.  The function will \ntrigger the \"getAll\" event.  Also note that there is hard limit on the \nnumber of results the returned.",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is \nan error, if occurred. The second is an array representing the results \nof the query.",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 283,
            "description": "Executes a count of resources against the persistence layer. The \nfunction will callback with an array of results.",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is \nan error, if occurred. The second is the number of results that match \nthe specified query",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 310,
            "description": "Executes a query for resources against the persistence layer. The \nfunction will callback with an object that contains a total count and an \narray of results.  The function will trigger the \"getAll\" event.  Also \nnote that there is hard limit on the number of results the returned.",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "limit",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is \nan error, if occurred. The second is an object representing the results \nof the query.",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 350,
            "description": "Retrieves a resource by ID. The function will callback with the object \nthat was found or NULL if no object could be found. The function will \ntrigger the \"get\" event.",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is \nan error, if occurred. The second is the object with the specified ID",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 389,
            "description": "Retrieves a single resource by the specified query. The function will \ncallback with the object that was found or NULL if no object could be \nfound. The function will trigger the \"getAll\" event.",
            "itemtype": "method",
            "name": "getSingle",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is \nan error, if occurred. The second is the object that matches the specified query",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 414,
            "description": "Attempts to persist the DTO.  The function executes a series of events:\n1) The format event is fired\n2) When an ID is provided the object is retrieved from the database otherwise a new object is created.\n3) The merge event is triggered\n4) The validate event is triggered. If validation errors are detected the process halts and the function calls back with an error.\n5) The beforeSave event is triggered\n6) The object is persisted\n7) The afterSave event is triggered",
            "itemtype": "method",
            "name": "getAll",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "select",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "where",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "order",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "description": "",
                            "type": "Integer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters.  The first is \nan error, if occurred. The second is the object that matches the specified query",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 501,
            "description": "When an ID is available in the DTO the function attempts to retrieve the \nexisting object.  If it is not available a new object is created.  The \nmerge event is then called.  After the merge is complete the callback is \nexecuted with the merged object.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_retrieveOnUpdateAndMerge",
            "params": [
                {
                    "name": "dto",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 544,
            "description": "Deletes an object by ID",
            "itemtype": "method",
            "name": "deleteById",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 561,
            "description": "Deletes a single item based on the specified query in the options",
            "itemtype": "method",
            "name": "deleteSingle",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 598,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_emit",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 630,
            "description": "Creates a properly formed validation failure",
            "static": 1,
            "itemtype": "method",
            "name": "validationFailure",
            "params": [
                {
                    "name": "field",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 646,
            "description": "Inspects the raw set of validation results to ensure that plugins that \ndon't follow proper procedure have their results excluded.",
            "static": 1,
            "itemtype": "method",
            "name": "consolidateValidationResults",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 671,
            "description": "Creates a new Error representative of a validation error",
            "static": 1,
            "itemtype": "method",
            "name": "validationError",
            "params": [
                {
                    "name": "validationFailures",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 685,
            "description": "Creates a new Error representative of an action that was performed that \nthe current principal did not have authroization to perform.",
            "static": 1,
            "itemtype": "method",
            "name": "forbiddenError",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 699,
            "description": "Strips HTML formatting from a string value",
            "static": 1,
            "itemtype": "method",
            "name": "sanitize",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 717,
            "description": "The sanitization rules that apply to Pages, Articles, and other fields \nthat are allowed to have HTML",
            "static": 1,
            "itemtype": "method",
            "name": "getContentSanitizationRules",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 753,
            "description": "Retrieves the default sanitization rules for string fields.",
            "static": 1,
            "itemtype": "method",
            "name": "getDefaultSanitizationRules",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 766,
            "description": "Parses an ISO date string.  When an invalid date string is pass a NULL \nvalue is returned.",
            "static": 1,
            "itemtype": "method",
            "name": "getDate",
            "params": [
                {
                    "name": "dateStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Date"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 779,
            "description": "Determines the maximum number of results that can be returned for a \nquery.  The specified limit must be a positive integer.  The result will \nbe the minimum of the MAX_RESULTS constant and the specified limit.",
            "static": 1,
            "itemtype": "method",
            "name": "getLimit",
            "params": [
                {
                    "name": "limit",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 792,
            "description": "Registers a listener for the specified event.",
            "static": 1,
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "?"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 804,
            "description": "Registers a listener to fire a single time for the specfied event",
            "static": 1,
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "?"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 816,
            "description": "Removes the listener from the specified event",
            "static": 1,
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "?"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 828,
            "description": "Removes all listeners for the specified event",
            "static": 1,
            "itemtype": "method",
            "name": "removeAllListeners",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "?"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 839,
            "description": "Sets the maximum number of listeners for the emitter",
            "static": 1,
            "itemtype": "method",
            "name": "setMaxListeners",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "?"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\base_object_service.js",
            "line": 850,
            "description": "Returns a list of the listeners for the specified event",
            "static": 1,
            "itemtype": "method",
            "name": "listeners",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "BaseObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 48,
            "description": "Retrieve a value from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 88,
            "description": "Set a value in the cache",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 132,
            "description": "Purge the cache of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 41,
            "description": "Retrieve a value from the database",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DbEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 72,
            "description": "Set a value in the database",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DbEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 116,
            "description": "Purge the database of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DbEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 24,
            "description": "Encoding options for interacting with the file system",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "FS_ENCODING_OPTS",
            "class": "FSEntityService",
            "module": "Services"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 49,
            "description": "Retrieve a value from the file system",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 60,
            "description": "Set a value in the file system",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 72,
            "description": "Purge the file system of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 41,
            "description": "Retrieve a value from the file system",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 66,
            "description": "Set a value in the file system",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 89,
            "description": "Purge the file system of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 48,
            "description": "The type string that describes the storage medium for the service",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 58,
            "description": "Retrieve a value from memory",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 87,
            "description": "Set a value in memory.  Triggers a command to be sent to the cluster to \nupdate the value",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 105,
            "description": "Sets a value",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object|String|Integer|Float|Boolean"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 141,
            "description": "Callend when a value changes",
            "itemtype": "method",
            "name": "onSet",
            "params": [
                {
                    "name": "key,",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object|String|Integer|Float|Boolean"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 157,
            "description": "Sets a timeout to purge a key after the configured timeout has occurred.  If \na timeout has already been set it will be cleared and a new one will be \ncreated.",
            "itemtype": "method",
            "name": "setKeyExpiration",
            "params": [
                {
                    "name": "key",
                    "description": "The key for the value to be cleared",
                    "type": "String"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 181,
            "description": "Purge membory of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 196,
            "description": "Should be called once to clean up after the memory service instance.  \nRemoves all storage items and clears any remaining timeouts.",
            "itemtype": "method",
            "name": "dispose",
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 215,
            "description": "Retrieves the command type that is to be used to listen for changes to \nkey/value pairs within the registered instance",
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "objType",
                    "description": "The type of object being referenced",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The command type to be registered for",
                "type": "String"
            },
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 227,
            "description": "Creates a change handler that will update the value of a property when an \nincomming command requests it.",
            "static": 1,
            "itemtype": "method",
            "name": "createChangeHandler",
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\read_only_simple_layered_service.js",
            "line": 50,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ReadOnlySimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\read_only_simple_layered_service.js",
            "line": 61,
            "static": 1,
            "itemtype": "method",
            "name": "makeReadOnly",
            "params": [
                {
                    "name": "serviceInstance",
                    "description": "",
                    "type": "EntityService"
                }
            ],
            "class": "ReadOnlySimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 39,
            "description": "Retrieves the setting value from various storage areas.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Object"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 100,
            "description": "Persists a new value for the setting.  When the setting does not exist a new\none is created.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 127,
            "description": "Removes the value from storage.",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\template_entity_service.js",
            "line": 45,
            "description": "Retrieve a value from the file system.  Will callback with an object with\ntwo properties.  \"key\" the file path.  \"parts\" an array of objects.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "the file path to the template",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback function that takes two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "TemplateEntityService",
            "module": "Services"
        },
        {
            "file": "include\\service\\template_entity_service.js",
            "line": 80,
            "description": "This function is not implemented.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "The absolute file path",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The string content to set",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateEntityService",
            "module": "Services"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 33,
            "description": "The mongo collection that stores the sessions",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SESSION_COLLECTION_NAME",
            "type": "{String}",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 43,
            "description": "The cache lock key used when the index is needed to be modified",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "INDEX_MOD_LOCK_KEY",
            "type": "{String}",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 53,
            "description": "Responsible for retrieving the session for persistent storage.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The identifier of the session to retrieve.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [Object])",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 65,
            "description": "Responsible for persisting the session object between user requests",
            "params": [
                {
                    "name": "session",
                    "description": "The session object to store.  The session object must contain\nthe following in addition to other data:\n<pre>\n\n</pre>",
                    "type": "!~YUIDOC_LINE~!\tuid: [primitive]!~YUIDOC_LINE~!"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, 'OK')",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "set",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 88,
            "description": "Deletes a session if it exists.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [int SESSIONS_CLEARED])",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 100,
            "description": "Responsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 111,
            "description": "Responsable for ensuring that the mechanism that expires sessions becomes\nactive.",
            "itemtype": "method",
            "name": "start",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 138,
            "description": "Constructs a query to find a session in Mongo",
            "itemtype": "method",
            "name": "getSessionQuery",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The session identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 34,
            "description": "The prefix to prepend to the session ID in order to construct a cache key",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SESSION_KEY_PREFIX",
            "type": "{String}",
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 43,
            "description": "Responsable for retrieving the session for persistent storage.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The identifier of the session to retrieve.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [Object])",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 58,
            "description": "Responsable for persisting the session object between user requests",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "session",
                    "description": "The session object to store.  The session object must contain\nthe following in addition to other data:\n<pre>\n{\n\tuid: [primitive]\n}\n</pre>",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, 'OK')",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 81,
            "description": "Deletes a session if it exists.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [int SESSIONS_CLEARED])",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 93,
            "description": "Repsonsible for ensuring that the mechanism that expires sessions becomes\nactive.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 104,
            "description": "Responsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 115,
            "description": "Constructs a session cache key provided a session id.",
            "static": 1,
            "itemtype": "method",
            "name": "getSessionKey",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[RedisSessionStore.SESSION_KEY_PREFIX][sessionId]",
                "type": "String"
            },
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 44,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "HANDLER_PATH",
            "type": "{String}",
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 53,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "HANDLER_SUFFIX",
            "type": "{String}",
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 62,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SID_KEY",
            "type": "{String}",
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 71,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "TIMEOUT_KEY",
            "type": "{String}",
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 80,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "COOKIE_HEADER",
            "type": "{String}",
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 89,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "COOKIE_NAME",
            "type": "{String}",
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 98,
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 107,
            "description": "Retrieves a session for the current request.  When the session ID is\navailable the existing session is retrieved otherwise a new session is\ncreated.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "request",
                    "description": "The request descriptor",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "The callback(ERROR, SESSION_OBJ)",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 146,
            "description": "Closes the session and persists it when no other requests are currently\naccessing the session.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 178,
            "description": "Sets the session in a state that it should be terminated after the last request has completed.",
            "itemtype": "method",
            "name": "end",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 190,
            "description": "Creates the shell of a session object",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "request",
                    "description": ""
                }
            ],
            "return": {
                "description": "Session",
                "type": "Object"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 211,
            "description": "Shuts down the sesison handler and the associated session store",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 221,
            "description": "Generates a unique client ID based on the user agent and the remote address.",
            "static": 1,
            "itemtype": "method",
            "name": "getClientId",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Unique Id",
                "type": "String"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 234,
            "description": "Loads a session store prototype based on the system configuration",
            "static": 1,
            "itemtype": "method",
            "name": "getSessionStore",
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 264,
            "description": "Retrieves an instance of the SessionStore specified in the sytem configuration",
            "static": 1,
            "itemtype": "method",
            "name": "getSessionStore",
            "return": {
                "description": "",
                "type": "SessionStore"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 275,
            "description": "Extracts the session id from the returned cookie",
            "static": 1,
            "itemtype": "method",
            "name": "getSessionIdFromCookie",
            "params": [
                {
                    "name": "request",
                    "description": "The object that describes the incoming user request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Session Id if available NULL if it cannot be found",
                "type": "String"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 298,
            "static": 1,
            "itemtype": "method",
            "name": "getSessionCookie",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 42,
            "description": "The singleton instance",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "INSTANCE",
            "type": "{CommandService}",
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 51,
            "description": "The default timeout in milliseconds (2 seconds)",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "DEFAULT_TIMEOUT",
            "type": "{Integer}",
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 61,
            "description": "A hash of the brokers that are available out of the box",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "AWAITING_RESPONSE",
            "type": "{Object}",
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 73,
            "description": "Initializes the service and the broker implementation.  The broker is\ndetermined by the configuration value of \"command.broker\".  This value can\nbe \"redis\" for the out of the box implementation for Redis or an absolute\npath to another implementation.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, TRUE/FALSE)",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 100,
            "description": "Shuts down the command service and the broker if initialized",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, TRUE/FALSE)",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 115,
            "description": "Registers a handler for incoming commands of the specified type.",
            "itemtype": "method",
            "name": "registerForType",
            "params": [
                {
                    "name": "type",
                    "description": "The name/type of the command to handle",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "A function that takes two parameters:\nhandler(channel, command). where channel is a string and command is an\nobject.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if the the handler was registered, FALSE if not.",
                "type": "Boolean"
            },
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 138,
            "description": "Unregisters a handler for the specified type.",
            "itemtype": "method",
            "name": "unregisterForType",
            "params": [
                {
                    "name": "type",
                    "description": "The name/type of the command that the handler is\nregistered for",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler function to unregister",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if the handler was unregistered, FALSE if not.",
                "type": "Boolean"
            },
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 161,
            "description": "Responsible for delegating out the received command to the registered\nhandlers.  The command parameter must be an object, must have a type\nproperty that is a string, and must have a registered handler for the\nspecified type.",
            "itemtype": "method",
            "name": "notifyOfCommand",
            "params": [
                {
                    "name": "command",
                    "description": "The command to delegate",
                    "type": "Object"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 207,
            "description": "Sends a command to all processes iin the cluster and waits for a response\nfrom all before calling back.",
            "itemtype": "method",
            "name": "sendCommandToAllGetResponses",
            "params": [
                {
                    "name": "type",
                    "description": "The name/type of the command being sent",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options for the command.  The options object\nbecomes the command object.  Custom properties to be part of the command can\nbe added.  However, certain properties do have special meaning such as \"id\",\n\"to\", \"from\", \"timeout\", \"includeme\".  These special properties may be\noverriden by this function or one it calls in order for the commands to\nfunction properly.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ignoreme",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "Timeout in milliseconds for each\nprocess to respond.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "2000"
                        },
                        {
                            "name": "progress",
                            "description": "A function called right before each\ncommand is sent.  The function should take two parameters.  The first is the\nindex of the task being executed and the second is the total number of tasks.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 296,
            "description": "Sends a command to a single process in the cluster expecting a response.",
            "itemtype": "method",
            "name": "sendCommandGetResponse",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "onResponse",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 347,
            "description": "Provides a mechanism to respond to a the entity that sent the command.",
            "itemtype": "method",
            "name": "sendInResponseTo",
            "params": [
                {
                    "name": "command",
                    "description": "The command that was sent to ths process",
                    "type": "Object"
                },
                {
                    "name": "responseCommand",
                    "description": "The command to send back to the entity that sent the first command.",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Command ID)",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 376,
            "description": "Sends a command to the cluster",
            "itemtype": "method",
            "name": "sendCommand",
            "params": [
                {
                    "name": "type",
                    "description": "The command name/type",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options that will be serialized and sent to the other processes in the cluster",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "to",
                            "description": "The cluster process that should handle the message",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Command ID)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 421,
            "description": "The global handler for incoming commands.  It registers itself with the\nbroker and then when messages are received it verifies that the message is\nmeant for this member of the cluster (or all members) then proceeds to\nhandoff to the function that will delegate out to the handlers.",
            "static": 1,
            "itemtype": "method",
            "name": "onCommandReceived",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel to listen for incoming commands",
                    "type": "String"
                },
                {
                    "name": "command",
                    "description": "The command to verify and delegate",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 446,
            "description": "Retrieves the singleton instance of CommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "",
                "type": "CommandService"
            },
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 35,
            "description": "The cursor that trails the collection looking for new items",
            "itemtype": "property",
            "name": "cursor",
            "type": "{Cursor}",
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 44,
            "description": "The hash of handlers for each channel subscribed to",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "SUBSCRIBERS",
            "type": "{Object}",
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 53,
            "description": "The collection that stores the commands",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "COMMAND_Q_COLL",
            "type": "{String}",
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 62,
            "description": "The maximum size, in bytes, of the collection",
            "itemtype": "property",
            "name": "DEFAULT_MAX_SIZE",
            "type": "{Integer}",
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 69,
            "description": "Initializes the broker by creating the connections to Redis and registering\nfor the message event.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 124,
            "description": "Shuts down the broker by closing the open connections to Redis.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 135,
            "description": "Called when a member of the cluster has published a command.  The function\ninspects that it has a handler for the channel then delegates the command\nback to the handler.",
            "itemtype": "method",
            "name": "onCommandReceived",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel the message was pushed to",
                    "type": "String"
                },
                {
                    "name": "commandStr",
                    "description": "The message that was published",
                    "type": "String"
                }
            ],
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 161,
            "description": "Sends a message to the specified channel",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel to send the message to",
                    "type": "String"
                },
                {
                    "name": "command",
                    "description": "The command to send to the cluster",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, 1 on success/FALSE on failure)",
                    "type": "Function"
                }
            ],
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\mongo_command_broker.js",
            "line": 186,
            "description": "Registers a handler for messages on the specified channel.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel to listen for messages on",
                    "type": "String"
                },
                {
                    "name": "onCommandReceived",
                    "description": "A handler function that takes two\narguments: onCommandReceived(channel, message) where channel is a string and\nmessage is an object.",
                    "type": "Function"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 32,
            "description": "Client used to publish commands to the cluster",
            "itemtype": "property",
            "name": "publishClient",
            "type": "{Client}",
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 39,
            "description": "Client used to subscribe to commands to the cluster",
            "itemtype": "property",
            "name": "publishClient",
            "type": "{Client}",
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 48,
            "description": "The hash of handlers for each channel subscribed to",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "SUBSCRIBERS",
            "type": "{Object}",
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 57,
            "description": "Initializes the broker by creating the connections to Redis and registering\nfor the message event.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 76,
            "description": "Shuts down the broker by closing the open connections to Redis.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 96,
            "description": "Called when a member of the cluster has published a command.  The function\ninspects that it has a handler for the channel then delegates the command\nback to the handler.",
            "itemtype": "method",
            "name": "onCommandReceived",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel the message was pushed to",
                    "type": "String"
                },
                {
                    "name": "commandStr",
                    "description": "The message that was published",
                    "type": "String"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 120,
            "description": "Sends a message to the specified channel",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel to send the message to",
                    "type": "String"
                },
                {
                    "name": "command",
                    "description": "The command to send to the cluster",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, 1 on success/FALSE on failure)",
                    "type": "Function"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 139,
            "description": "Registers a handler for messages on the specified channel.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel to listen for messages on",
                    "type": "String"
                },
                {
                    "name": "onCommandReceived",
                    "description": "A handler function that takes two\narguments: onCommandReceived(channel, message) where channel is a string and\nmessage is an object.",
                    "type": "Function"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 36,
            "description": "Retrieves the entire cluster status as an array of status objects.  The '_id'\nproperty uniquely identifies each process/node.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 48,
            "description": "Updates the status of a single node.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the process/node",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "The status information",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 67,
            "description": "Purges all statuses from storage.",
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 77,
            "description": "This function should only be called once at startup.  It is responsible for\nsetting up the collection and ensuring that the TTL index is configured\ncorrectly based on the the executing processes configuration.  <b>NOTE:</b>\nThe collection only supports one TTL value. The last process to startup and\nconfigure the index will win.  Please be careful to ensure that all PB\nprocesses/nodes have the same registry.update_interval value.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 108,
            "description": "Should be called during shutdown.  It is responsible for removing the\nprocess/node from the registry.",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 38,
            "description": "The Redis DB used for storage",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "REGISTRY_DB",
            "type": "{Integer}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 48,
            "description": "The character used to separate the registry key prefix from the unique value\nthat identifies the process/node.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SEP",
            "type": "{String}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 59,
            "description": "The Redis client used to connect to the service registry",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "CLIENT",
            "type": "{Integer}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 69,
            "description": "Retrieves the entire cluster status as an array of status objects.  The '_id'\nproperty uniquely identifies each process/node.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 103,
            "description": "Updates the status of a single node.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the process/node",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "The status information",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 121,
            "description": "Purges all statuses from storage.",
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 138,
            "description": "This function should only be called once at startup.  It is responsible for\ncreating the Redis client that connects to the service registry.  It also\nensures the proper Redis DB is selected.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 151,
            "description": "Should be called during shutdown.  It is responsible for removing the\nprocess/node from the registry.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 168,
            "description": "Creates the cache key used to store the status update",
            "static": 1,
            "itemtype": "method",
            "name": "getKey",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cache key to be used for storing the update",
                "type": "String"
            },
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 179,
            "description": "Creates the glob pattern to be used to find service registry keys",
            "static": 1,
            "itemtype": "method",
            "name": "getPattern",
            "return": {
                "description": "The glob patern to be used to find all status updates",
                "type": "String"
            },
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\analytics_manager.js",
            "line": 33,
            "description": "Stores the registered analytics providers",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "PROVIDER_HOOKS",
            "type": "{Object}",
            "class": "AnalyticsManager",
            "module": "Session"
        },
        {
            "file": "include\\system\\analytics_manager.js",
            "line": 43,
            "description": "Takes the provided request and session then checks with each of the \nregistered analytics providers to ensure get the HTML snippets to be \nexecuted for analytics reporting.",
            "itemtype": "method",
            "name": "gatherData",
            "params": [
                {
                    "name": "req",
                    "description": "The current incoming request",
                    "type": "Request"
                },
                {
                    "name": "session",
                    "description": "The current user session",
                    "type": "Object"
                },
                {
                    "name": "ls",
                    "description": "An instance of the Localization service",
                    "type": "Localization"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters.  An error, if \noccurred, and a TemplateValue representing the HTML snippets for the analytic \nproviders.",
                    "type": "Function"
                }
            ],
            "class": "AnalyticsManager",
            "module": "Session"
        },
        {
            "file": "include\\system\\analytics_manager.js",
            "line": 102,
            "description": "Registers an alaytics provider.  When a template is being rendered and \nencounters the ^analytics^ directive \"onPageRender\" is called.",
            "static": 1,
            "itemtype": "method",
            "name": "registerProvider",
            "params": [
                {
                    "name": "name",
                    "description": "The provider's name",
                    "type": "String"
                },
                {
                    "name": "onPageRendering",
                    "description": "A function that is called for every \nrequests that intends to execute HTML snippets to track analytics.  The \nfunction is expected to take 4 parameters.  The first is the current Request \nobject.  The second is the current user session object. The third is an \ninstance of Localization.  The last is a callback that should be called with \ntwo parameters.  The first is an error, if occurred and the second is raw \nHTML string that represents the snippet to be executed by the analytics \nplugin.",
                    "type": "Function"
                }
            ],
            "class": "AnalyticsManager",
            "module": "Session"
        },
        {
            "file": "include\\system\\analytics_manager.js",
            "line": 126,
            "description": "Unregisters an analytics provider",
            "static": 1,
            "itemtype": "method",
            "name": "unregisterProvider",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if was unregistered, FALSE if not found",
                "type": "Boolean"
            },
            "class": "AnalyticsManager",
            "module": "Session"
        },
        {
            "file": "include\\system\\analytics_manager.js",
            "line": 141,
            "description": "Indicates if an analytics provider with the specified name has already \nregistered itself.",
            "static": 1,
            "itemtype": "method",
            "name": "isRegistered",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the analytics provider to check registration for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE when the provider is registered, FALSE if not",
                "type": "Boolean"
            },
            "class": "AnalyticsManager",
            "module": "Session"
        },
        {
            "file": "include\\system\\analytics_manager.js",
            "line": 153,
            "description": "Called when a page is rendering.  It creates a new instance of the analytics \nmanager and constructs the javascript snippets (wrappered in TemplateValue) \nneeded for the analytics plugins",
            "static": 1,
            "itemtype": "method",
            "name": "onPageRender",
            "params": [
                {
                    "name": "req",
                    "description": "",
                    "type": "Request"
                },
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "ls",
                    "description": "",
                    "type": "Localization"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters.  An error, if \noccurred, and a TemplateValue representing the HTML snippets for the analytic \nproviders.",
                    "type": "Function"
                }
            ],
            "class": "AnalyticsManager",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 34,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "HOST",
            "type": "{String}",
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 44,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "PORT",
            "type": "{Integer}",
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 54,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "PATH",
            "type": "{String}",
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 64,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "METHOD",
            "type": "{String}",
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 75,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SYSTEM_SETUP_EVENT",
            "type": "{String}",
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 84,
            "static": 1,
            "itemtype": "method",
            "name": "callHome",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 123,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_callHome",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "postData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 140,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getDomainRunner",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "postData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\call_home_service.js",
            "line": 168,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "onResponseRecieved",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "postData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "CallHomeService",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 28,
            "description": "Singleton instance",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "INSTANCE",
            "type": "{ServerRegistration}",
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 52,
            "description": "The default set of functions that gather the default set of information.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "ITEM_CALLBACKS",
            "type": "{Object}",
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 119,
            "description": "Retrieves the most recent status from the entire cluster.",
            "itemtype": "method",
            "name": "getClusterStatus",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 128,
            "description": "Removes all entries from the server registry",
            "static": 1,
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 138,
            "description": "Should only be called once at startup.  The function verifies that the\nregistry is enabled and initializes the correct storage provider.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 170,
            "description": "Called during shutdown.  The function is responsible for clearing any\nscheduled updates and shutting down the storage provider.",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 188,
            "description": "Registers a function to be called on every status update.  The function\nshould take one parameter: a callback function that accepts two parameters,\nthe first being an error if it occurred and the second being the current\nvalue for the information requested.",
            "static": 1,
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "name",
                    "description": "The name and/or description of the information being\ngathered",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "function to be called to gather the data.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if the function is successfully registered, FALSE if not.",
                "type": "Boolean"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 209,
            "description": "Performs the request for information and persists it through the storage\nprovider.",
            "static": 1,
            "itemtype": "method",
            "name": "doRegistration",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 253,
            "static": 1,
            "itemtype": "method",
            "name": "logUpdateResult",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "update",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "result",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 273,
            "description": "Generates the unique key for the PB process/node.",
            "static": 1,
            "itemtype": "method",
            "name": "generateKey",
            "return": {
                "description": "The unique identifier",
                "type": "String"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 283,
            "description": "Retrieves a unique key for the server but not for the process",
            "static": 1,
            "itemtype": "method",
            "name": "generateServerKey",
            "return": {
                "description": "server key",
                "type": "String"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 293,
            "description": "Retrieves the first IP address found for the node.",
            "static": 1,
            "itemtype": "method",
            "name": "getIp",
            "return": {
                "description": "The first IP address found for the node",
                "type": "String"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 314,
            "description": "Retrieves the singleton instance of the service registry",
            "static": 1,
            "itemtype": "method",
            "name": "getInstance",
            "params": [
                {
                    "name": "provider",
                    "description": "",
                    "type": "RegistrationProvider",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "ServerRegistration"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\settings.js",
            "line": 30,
            "description": "Tracks the number of instances created",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "count",
            "type": "{Integer}",
            "class": "SettingsServiceFactory",
            "module": "Session"
        },
        {
            "file": "include\\system\\settings.js",
            "line": 39,
            "description": "Creates a new instance of the settings service",
            "static": 1,
            "itemtype": "method",
            "name": "getService",
            "params": [
                {
                    "name": "useMemory",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "useCache",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "SimpleLayeredService"
            },
            "class": "SettingsServiceFactory",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 34,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{Object}",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 43,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "SHUTDOWN_PRIORITY",
            "type": "{Array}",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 51,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "IS_SHUTTING_DOWN",
            "type": "{Boolean}",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 59,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "DISCONNECTS_CNT",
            "type": "{Integer}",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 67,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "DISCONNECTS",
            "type": "{Array}",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 75,
            "access": "private",
            "tagname": "",
            "readonly": "",
            "itemtype": "property",
            "name": "FORCE_PROCESS_EXIT_TIMEOUT",
            "type": "{Array}",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 84,
            "itemtype": "method",
            "name": "onStart",
            "params": [
                {
                    "name": "onChildRunning",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 101,
            "itemtype": "method",
            "name": "",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 125,
            "itemtype": "method",
            "name": "",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 164,
            "itemtype": "method",
            "name": "",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 172,
            "itemtype": "method",
            "name": "",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 180,
            "itemtype": "method",
            "name": "",
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 192,
            "description": "Calls shutdown on all registered system services and kills the process",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "killProcess",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\system\\system.js",
            "line": 265,
            "description": "Registers signal handlers (SIGTERM, SIGINT) that will call shutdown when \ntriggered",
            "itemtype": "method",
            "name": "registerSignalHandlers",
            "params": [
                {
                    "name": "killProcess",
                    "description": "When TRUE or not provided the variable \ninstructs the handlers to kill off the process in addition to shutting \ndown PencilBlue services",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "System",
            "module": "Session"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 53,
            "itemtype": "property",
            "name": "userService",
            "type": "{UserService}",
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 60,
            "itemtype": "property",
            "name": "articleService",
            "type": "{ArticleService}",
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 67,
            "itemtype": "property",
            "name": "contentService",
            "type": "{ContentService}",
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 76,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "TYPE",
            "type": "{String}",
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 85,
            "description": "Validates a comment",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 183,
            "description": "Retrieves the template for comments",
            "itemtype": "method",
            "name": "getCommentsTemplates",
            "params": [
                {
                    "name": "contentSettings",
                    "description": "The content settings to use with retrieval",
                    "type": "Object"
                },
                {
                    "name": "output",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 207,
            "description": "Retrieves the necessary user information for a commenter",
            "itemtype": "method",
            "name": "getCommentingUser",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 221,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "service",
                    "description": "An instance of the service that triggered \n the event that called this handler",
                    "type": "TopicService"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 237,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "service",
                    "description": "An instance of the service that triggered \n the event that called this handler",
                    "type": "TopicService"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 257,
            "static": 1,
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "data",
                            "description": "The DTO that was provided for persistence",
                            "type": "Object"
                        },
                        {
                            "name": "service",
                            "description": "An instance of the service that triggered \n the event that called this handler",
                            "type": "TopicService"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single parameter: an error if occurred",
                    "type": "Function"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 38,
            "description": "Retrieves the theme settings, navigation data structure, and account buttons.",
            "static": 1,
            "itemtype": "method",
            "name": "getTopMenu",
            "params": [
                {
                    "name": "session",
                    "description": "The current user's session",
                    "type": "Object"
                },
                {
                    "name": "localizationService",
                    "description": "An instance of Localization to\ntranslate default items",
                    "type": "Localization"
                },
                {
                    "name": "options",
                    "description": "An optional argument to provide more flexibility\nto the menu construction.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "currUrl",
                            "description": "The current request URL.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback function that takes three parameters. The\nfirst are the theme's settings, the second is the navigation structure, and\nthe third is the account button structure.",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 89,
            "description": "Retrieves the information needed to draw account buttons",
            "static": 1,
            "itemtype": "method",
            "name": "getAccountButtons",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "ls",
                    "description": "The localization service",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 157,
            "description": "Returns a bootstrap ready ul list for a nav element",
            "static": 1,
            "itemtype": "method",
            "name": "getBootstrapNav",
            "params": [
                {
                    "name": "navigation",
                    "description": "Navigation object",
                    "type": "Object"
                },
                {
                    "name": "accountButtons",
                    "description": "Account buttons object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 234,
            "itemtype": "method",
            "name": "getNavItems",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "ls",
                            "description": "",
                            "type": "Localization"
                        },
                        {
                            "name": "activeTheme",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "session",
                            "description": "",
                            "type": "Object"
                        },
                        {
                            "name": "currUrl",
                            "description": "",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\utils\\logging.js",
            "line": 59,
            "description": "Determines if the root log level is set to debug or silly",
            "itemtype": "method",
            "name": "isDebug",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services"
        },
        {
            "file": "include\\utils\\logging.js",
            "line": 68,
            "description": "Determines if the root log level is set to silly",
            "itemtype": "method",
            "name": "isSilly",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 36,
            "description": "Pattern to validate a file name",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 45,
            "description": "Pattern to validate a semantic package version",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 54,
            "description": "A pattern to validate an email address",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 63,
            "description": "A pattern to validate a fully qualified URL",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 72,
            "description": "A pattern to validate a relative URL (no protocol, host, or port)",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 81,
            "description": "Checks to see if the value is a valid ID string",
            "static": 1,
            "itemtype": "method",
            "name": "isIdStr",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 100,
            "description": "Checks to see if the value is a valid ID string or an instance of ObjectID.",
            "static": 1,
            "itemtype": "method",
            "name": "isId",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "String|ObjectID"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 118,
            "description": "Validates an email address",
            "itemtype": "method",
            "name": "validateEmail",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 129,
            "description": "Validates an email address",
            "itemtype": "method",
            "name": "isEmail",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 144,
            "description": "Validates a version number",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateVersionNum",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 155,
            "description": "Validates a version number",
            "itemtype": "method",
            "name": "isVersionNum",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 170,
            "description": "Validates a version expression",
            "itemtype": "method",
            "name": "isVersionExpression",
            "params": [
                {
                    "name": "expression",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 184,
            "description": "Validates an URL",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateUrl",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 195,
            "description": "Validates an URL",
            "itemtype": "method",
            "name": "isUrl",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 210,
            "description": "Validates a file name",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateSafeFileName",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 221,
            "description": "Validates a file name",
            "itemtype": "method",
            "name": "isSafeFileName",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 236,
            "description": "Validates a string",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 247,
            "description": "Validates a string",
            "itemtype": "method",
            "name": "isStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 261,
            "description": "Validates a string is not empty",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateNonEmptyStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 272,
            "description": "Validates a string is not empty",
            "itemtype": "method",
            "name": "isNonEmptyStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 286,
            "description": "Validates an array",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 297,
            "description": "Validates an array",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 311,
            "description": "Validates an object",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 322,
            "description": "Validates an object",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 336,
            "description": "Validates that the value is an integer.",
            "static": 1,
            "itemtype": "method",
            "name": "isInt",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "Integer"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "Indicates",
                    "description": "if the value must be a number rather than a string representing a number.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 358,
            "description": "Validates that the value is a float.",
            "static": 1,
            "itemtype": "method",
            "name": "isFloat",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "Float"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "Indicates",
                    "description": "if the value must be a number rather than a string representing a number.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 380,
            "description": "Validates that the value is a number.",
            "static": 1,
            "itemtype": "method",
            "name": "isNum",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "Number"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 397,
            "description": "Validates that the value is a boolean.",
            "static": 1,
            "itemtype": "method",
            "name": "isBool",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 408,
            "description": "Validates that the value is null, defined, an empty object, or an empty\nstring.",
            "static": 1,
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "*"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 420,
            "description": "Validates that the value is a date object",
            "static": 1,
            "itemtype": "method",
            "name": "isDate",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "*"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\access_management.js",
            "line": 34,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ACCESS_USER",
            "type": "{Integer}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 43,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ACCESS_WRITER",
            "type": "{Integer}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 52,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ACCESS_EDITOR",
            "type": "{Integer}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 61,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ACCESS_MANAGING_EDITOR",
            "type": "{Integer}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 70,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ACCESS_ADMINISTRATOR",
            "type": "{Integer}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 79,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "PASSWORD_CHARS",
            "type": "{Array}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 89,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ROLE_VAL_TO_NAME",
            "type": "{Array}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 104,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ACCESS_",
            "type": "{Integer}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 113,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ACCESS_",
            "type": "{Integer}",
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 122,
            "description": "Retrieves the localized names of access levels as an array",
            "itemtype": "method",
            "name": "getRoleNames",
            "params": [
                {
                    "name": "ls",
                    "description": "The localization service",
                    "type": "Localization"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 134,
            "description": "Provides a hash of the default roles to their translated display name",
            "static": 1,
            "itemtype": "method",
            "name": "getRoleToDisplayNameMap",
            "params": [
                {
                    "name": "ls",
                    "description": "",
                    "type": "Localization"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 155,
            "description": "Returns the constant name of an access level number",
            "itemtype": "method",
            "name": "getRoleName",
            "params": [
                {
                    "name": "accessLevel",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 169,
            "description": "Authenticates a session",
            "static": 1,
            "itemtype": "method",
            "name": "authenticateSession",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "authenticator",
                    "description": "",
                    "type": "Authentication"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 204,
            "description": "Check to see if a user meets security requirements",
            "static": 1,
            "itemtype": "method",
            "name": "isAuthorized",
            "params": [
                {
                    "name": "session",
                    "description": "[description]",
                    "type": "Object"
                },
                {
                    "name": "requirements",
                    "description": "Object containing access requirements",
                    "type": "Object"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 231,
            "description": "Check to see if a session is authentic",
            "itemtype": "method",
            "name": "isAuthenticated",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 246,
            "description": "One way encrypt a string",
            "itemtype": "method",
            "name": "encrypt",
            "params": [
                {
                    "name": "valString\n#return",
                    "description": "{String} Encrypted string",
                    "type": "String"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 259,
            "static": 1,
            "itemtype": "method",
            "name": "generatePassword",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "8"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 278,
            "static": 1,
            "itemtype": "method",
            "name": "getPrincipal",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The authenticated user principal or NULL if not authenticated",
                "type": "Object"
            },
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 37,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "additions",
            "type": "{Array}",
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 46,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "childrenAdditions",
            "type": "{Object}",
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 55,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "DEFAULT_NAV",
            "type": "{Array}",
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 216,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getDefaultNavigation",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 227,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getAdditions",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 238,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "getChildrenAdditions",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 249,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "buildNavigation",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 297,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "localizeNavigation",
            "params": [
                {
                    "name": "navigation",
                    "description": ""
                },
                {
                    "name": "ls",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 315,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "isDuplicate",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "navigation",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 341,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "isDefaultNode",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 352,
            "description": "Retrive the admin navigation hierarchy",
            "static": 1,
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "activeMenuItems",
                    "description": "Array of nav item names that are active",
                    "type": "Array"
                },
                {
                    "name": "ls",
                    "description": "Localization service",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Admin navigation",
                "type": "Object"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 371,
            "description": "Adds a new child node to an existing top level node",
            "static": 1,
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "parentId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 392,
            "description": "Adds a new top level node",
            "static": 1,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 408,
            "description": "Remove a navigation node",
            "static": 1,
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": ""
                },
                {
                    "name": "navigation",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 450,
            "static": 1,
            "itemtype": "method",
            "name": "removeUnauthorized",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "adminNavigation",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "activeItems",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\client_js.js",
            "line": 32,
            "description": "Creates a basic AngularJS controller with a repeat directive for templatizing",
            "static": 1,
            "itemtype": "method",
            "name": "getAngularController",
            "params": [
                {
                    "name": "objects",
                    "description": "Object to be passed into AngularJS scope",
                    "type": "Object"
                },
                {
                    "name": "modules",
                    "description": "Array of AngularJS module names",
                    "type": "Array"
                },
                {
                    "name": "directiveJS",
                    "description": "JavaScript to run after on-finish-render directive",
                    "type": "String"
                }
            ],
            "class": "ClientJs",
            "module": "Services"
        },
        {
            "file": "include\\client_js.js",
            "line": 56,
            "static": 1,
            "itemtype": "method",
            "name": "getAngularObjects",
            "params": [
                {
                    "name": "objects",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ClientJs",
            "module": "Services"
        },
        {
            "file": "include\\client_js.js",
            "line": 76,
            "description": "Creates a JS tag that loads the specified url",
            "static": 1,
            "itemtype": "method",
            "name": "includeJS",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ClientJs",
            "module": "Services"
        },
        {
            "file": "include\\client_js.js",
            "line": 87,
            "description": "Puts the supplied JS code string into a script tag",
            "static": 1,
            "itemtype": "method",
            "name": "getJSTag",
            "params": [
                {
                    "name": "jsCode",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ClientJs",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 40,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "DOCUMENT_ROOT",
            "type": "{String}",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 49,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "EXTERNAL_ROOT",
            "type": "{String}",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 58,
            "description": "Ascending index value",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ASC",
            "type": "{Integer}",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 68,
            "description": "Descending index value",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "DESC",
            "type": "{Integer}",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 78,
            "description": "The default logging directory absolute file path",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "LOG_DIR",
            "type": "{String}",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 88,
            "description": "The default logging file absolute path",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "LOG_FILESC",
            "type": "{String}",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 98,
            "description": "The configuration module overrides file name",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "CONFIG_MODULE_NAME",
            "type": "{String}",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 108,
            "description": "The default list of absolute file paths to try when loading the configuration",
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "OVERRIDE_FILE_PATHS",
            "type": "{Array}",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 121,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BASE_CONFIG",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 692,
            "description": "Retrieve the base configuration",
            "static": 1,
            "itemtype": "method",
            "name": "getBaseConfig",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 702,
            "description": "Loads an external configuration.\nNOTE: This should only be called once by the core code at startup.  Calling\nthis function after the server starts may cause unintended behavior across\nthe system.",
            "static": 1,
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "filePaths",
                    "description": "",
                    "type": "Array|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 757,
            "static": 1,
            "itemtype": "method",
            "name": "mergeWithBase",
            "class": "Configuration",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 31,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "CONTENT_SETTINGS_REF",
            "type": "{String}",
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 41,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "DEFAULT_SETTINGS",
            "type": "{String}",
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 68,
            "description": "A long named alias of 'get'",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 77,
            "description": "Retrieves the content settings.  When settings are not found in storage \nthe service will generate defaults and persist them.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 97,
            "description": "Retrieves the default content settings from installation",
            "itemtype": "method",
            "name": "getDefaultSettings",
            "return": {
                "description": "Content settings",
                "type": "Object"
            },
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 107,
            "description": "Returns a formatted time stamp from a date",
            "itemtype": "method",
            "name": "getTimestampTextFromSettings",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                },
                {
                    "name": "contentSettings",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 127,
            "static": 1,
            "itemtype": "method",
            "name": "getTimestampText",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "date",
                            "description": "",
                            "type": "Date"
                        },
                        {
                            "name": "format",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "twoDigitDate",
                            "description": "",
                            "type": "Boolean"
                        },
                        {
                            "name": "displayTime",
                            "description": "",
                            "type": "Boolean"
                        },
                        {
                            "name": "timeFormat",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "twoDigitTime",
                            "description": "",
                            "type": "Boolean"
                        },
                        {
                            "name": "ls",
                            "description": "",
                            "type": "Localization"
                        }
                    ]
                }
            ],
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 33,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "DEFAULT_SETTINGS",
            "type": "{Object}",
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 55,
            "description": "Retrieves a template and sends it as an email",
            "itemtype": "method",
            "name": "sendFromTemplate",
            "params": [
                {
                    "name": "options",
                    "description": "Object containing the email settings and template name",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 77,
            "description": "Uses an HTML layout and sends it as an email",
            "itemtype": "method",
            "name": "sendFromTemplate",
            "params": [
                {
                    "name": "options",
                    "description": "Object containing the email settings and template name",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 95,
            "description": "Sends an email",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "from",
                    "description": "From name",
                    "type": "String"
                },
                {
                    "name": "to",
                    "description": "To email address",
                    "type": "String"
                },
                {
                    "name": "subject",
                    "description": "Email subject",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Email content",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 150,
            "description": "Retrieves the email settings",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 163,
            "description": "Retrieves the default email settings from installation",
            "itemtype": "method",
            "name": "getDefaultSettings",
            "return": {
                "description": "Email settings",
                "type": "Object"
            },
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 32,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "LIBRARIES_SETTINGS_REF",
            "type": "{String}",
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 42,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "CDN_DEFAULTS",
            "type": "{Object}",
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 81,
            "access": "private",
            "tagname": "",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "BOWER_DEFAULTS",
            "type": "{Object}",
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 120,
            "description": "Retrieves the library settings",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 140,
            "description": "Loads the libraries settings into template service globals. Called on system\nstartup",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 161,
            "description": "Retrieves the default library settings for CDNs",
            "itemtype": "method",
            "name": "getCDNDefaults",
            "return": {
                "description": "CDN defaults",
                "type": "Object"
            },
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 171,
            "description": "Retrieves the default library settings for Bower",
            "itemtype": "method",
            "name": "getBowerDefaults",
            "return": {
                "description": "Bower defaults",
                "type": "Object"
            },
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 44,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "SEP",
            "type": "{String}",
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 53,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "PREFIX",
            "type": "{String}",
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 62,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "ACCEPT_LANG_HEADER",
            "type": "{String}",
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 71,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "storage",
            "type": "{Object}",
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 80,
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "supported",
            "type": "{Locale}",
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 89,
            "description": "Localizes a string by searching for keys within the template and replacing\nthem with the specified values.",
            "itemtype": "method",
            "name": "localize",
            "params": [
                {
                    "name": "sets",
                    "description": "The localizations sets to search in",
                    "type": "Array"
                },
                {
                    "name": "text",
                    "description": "The text to localize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The text where keys have been replaced with translated values",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 126,
            "description": "Translates a single key.  The function accepts a variable number of \nparameters.  The first must be the key to be localized.  The rest are \nconsidered to be injectable values.  The function will call \"util.format\" in \nsituations where the key is found and the nuber of arguments passed to the \nfunction is greater than 1.  See \nhttp://nodejs.org/api/util.html#util_util_format_format for details on \nsuppored formatting.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The variable number of \nparameters to be injected into the localization value",
                    "type": "String|Integer|Float|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The formatted and localized string",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 184,
            "description": "Determines the best language to send a user based on the 'accept-language'\nheader in the request",
            "itemtype": "method",
            "name": "best",
            "params": [
                {
                    "name": "request",
                    "description": "The request object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Locale for the request",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 207,
            "description": "Initializes the location.  Loads all language packs into memory for fast\nretrieval and sets the supported locales for determining what language to\nsend the user based on their list of acceptable languages.",
            "itemtype": "method",
            "name": "init",
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 259,
            "static": 1,
            "itemtype": "method",
            "name": "isSupported",
            "params": [
                {
                    "name": "locale",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 273,
            "static": 1,
            "itemtype": "method",
            "name": "getLocalizationPackage",
            "params": [
                {
                    "name": "locale",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 287,
            "static": 1,
            "itemtype": "method",
            "name": "registerLocalizations",
            "params": [
                {
                    "name": "locale",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "localizations",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 306,
            "static": 1,
            "itemtype": "method",
            "name": "registerLocalization",
            "params": [
                {
                    "name": "locale",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 342,
            "description": "Retrieves the default locale for the instance.  It first inspects the \nConfiguration property localization.defaultLocale.  As a last resort it \nwill fall back to english. The locale is expected to be of the form: \n[language code]_[country code]",
            "static": 1,
            "itemtype": "method",
            "name": "getDefaultLocale",
            "return": {
                "description": "The default locale",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 355,
            "description": "Retrieves the supported locales",
            "static": 1,
            "itemtype": "method",
            "name": "getSupported",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 365,
            "description": "Retrieves the supported locales as an array where each item in the array \ncontains a value (locale) and a name (locale specific representation of \nthe locale).",
            "static": 1,
            "itemtype": "method",
            "name": "getSupportedWithDisplay",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 36,
            "description": "Clones an object by serializing it and then re-parsing it.\nWARNING: Objects with circular dependencies will cause an error to be thrown.",
            "static": 1,
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "object",
                    "description": "The object to clone",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Cloned object",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 48,
            "description": "Performs a deep merge and returns the result.  <b>NOTE:</b> DO NOT ATTEMPT\nTO MERGE PROPERTIES THAT REFERENCE OTHER PROPERTIES.  This could have\nunintended side-effects as well as cause errors due to circular dependencies.",
            "static": 1,
            "itemtype": "method",
            "name": "deepMerge",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 62,
            "description": "Checks if the supplied object is an errof. If the object is an error the\nfunction will throw the error.",
            "static": 1,
            "itemtype": "method",
            "name": "ane",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check",
                    "type": "Object"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 75,
            "description": "Initializes an array with the specified number of values.  The value at each \nindex can be static or a function may be provided.  In the event that a \nfunction is provided the function will be called for each item to be placed \ninto the array.  The return value of the function will be placed into the \narray.",
            "static": 1,
            "itemtype": "method",
            "name": "initArray",
            "params": [
                {
                    "name": "cnt",
                    "description": "The length of the array to create",
                    "type": "Integer"
                },
                {
                    "name": "val",
                    "description": "The value to initialize each index of \nthe array",
                    "type": "Function|String|Number"
                }
            ],
            "return": {
                "description": "The initialized array",
                "type": "Array"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 97,
            "description": "Escapes a regular expression.",
            "static": 1,
            "itemtype": "method",
            "name": "escapeRegExp",
            "params": [
                {
                    "name": "The",
                    "description": "expression to escape",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Escaped regular expression.",
                "type": "String"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 111,
            "description": "Merges the properties from the first parameter into the second. This modifies\nthe second parameter instead of creating a new object.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The 'to' variable",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 127,
            "description": "Creates an object that has both the properties of \"a\" and \"b\".  When both\nobjects have a property with the same name, \"b\"'s value will be preserved.",
            "static": 1,
            "itemtype": "method",
            "name": "union",
            "return": {
                "description": "The union of properties from both a and b.",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 141,
            "description": "Creates a set of tasks that can be executed by the \"async\" module.",
            "static": 1,
            "itemtype": "method",
            "name": "getTasks",
            "params": [
                {
                    "name": "iterable",
                    "description": "The array of items to build tasks for",
                    "type": "Array"
                },
                {
                    "name": "getTaskFunction",
                    "description": "The function that creates and returns the\ntask to be executed.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<code>\nvar items = ['apple', 'orange'];\nvar tasks = util.getTasks(items, function(items, i) {\n    return function(callback) {\n        console.log(items[i]);\n        callback(null, null);\n    };\n});\nasync.series(tasks, util.cb);\n<code>"
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 168,
            "description": "Wraps a function in an anonymous function.  The wrapper function will call \nthe wrapped function with the provided context.  This comes in handy when \ncreating your own task arrays in conjunction with the async function when a \nprototype function needs to be called with a specific context.",
            "static": 1,
            "itemtype": "method",
            "name": "wrapTask",
            "params": [
                {
                    "name": "context",
                    "description": "The value of \"this\" for the function to be called",
                    "type": "Function"
                },
                {
                    "name": "func",
                    "description": "The function to be executed",
                    "type": "Function"
                },
                {
                    "name": "argArray",
                    "description": "The arguments to be supplied to the func parameter \nwhen executed.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 191,
            "description": "Provides an implementation of for each that accepts an array or object.",
            "static": 1,
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "iterable",
                    "description": "",
                    "type": "Object|Array"
                },
                {
                    "name": "handler",
                    "description": "A function that accepts 4 parameters.  The value \nof the current property or index.  The current index (property name if object).  The iterable.  \nFinally, the numerical index if the iterable is an object.",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 222,
            "description": "Hashes an array",
            "static": 1,
            "itemtype": "method",
            "name": "arrayToHash",
            "params": [
                {
                    "name": "array",
                    "description": "The array to hash",
                    "type": "Array"
                },
                {
                    "name": "defaultVal",
                    "description": "Default value if the hashing fails",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Hash",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 251,
            "description": "Converts an array to an object.",
            "static": 1,
            "itemtype": "method",
            "name": "arrayToObj",
            "params": [
                {
                    "name": "array",
                    "description": "The array of items to transform from an array to an \nobject",
                    "type": "Array"
                },
                {
                    "name": "keyFieldOrTransform",
                    "description": "When this field is a string it \nis expected that the array contains objects and that the objects contain a \nproperty that the string represents.  The value of that field will be used \nas the property name in the new object.  When this parameter is a function \nit is passed two parameters: the array being operated on and the index of \nthe current item.  It is expected that the function will return a value \nrepresenting the key in the new object.",
                    "type": "String|Function"
                },
                {
                    "name": "valFieldOrTransform",
                    "description": "When this value is a string \nit is expected that the array contains objects and that the objects contain \na property that the string represents.  The value of that field will be used \nas the property value in the new object.  When this parameter is a function \nit is passed two parameters: the array being operated on and the index of \nthe current item.  It is expected that the function return a value \nrepresenting the value of the derived property for that item.",
                    "type": "String|Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The converted array.",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 309,
            "description": "Converts an array of objects into a hash where the key the value of the \nspecified property. If multiple objects in the array have the same value for \nthe specified value then the last one found will be kept.",
            "static": 1,
            "itemtype": "method",
            "name": "objArrayToHash",
            "params": [
                {
                    "name": "array",
                    "description": "The array to convert",
                    "type": "Array"
                },
                {
                    "name": "hashProp",
                    "description": "The property who's value will be used as the key \nfor each object in the array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A hash of the values in the array",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 332,
            "description": "Converts a hash to an array. When provided, the hashKeyProp will be the\nproperty name of each object in the array that holds the hash key.",
            "static": 1,
            "itemtype": "method",
            "name": "hashToArray",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to convert",
                    "type": "Object"
                },
                {
                    "name": "hashKeyProp",
                    "description": "The property name that will hold the hash key.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of each property value in the hash.",
                "type": "Array"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 357,
            "description": "Inverts a hash",
            "static": 1,
            "itemtype": "method",
            "name": "invertHash",
            "params": [
                {
                    "name": "obj",
                    "description": "Hash object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Inverted hash",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 378,
            "description": "Clones an array",
            "static": 1,
            "itemtype": "method",
            "name": "copyArray",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Cloned array",
                "type": "Array"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 397,
            "description": "Pushes all of one array's values into another",
            "static": 1,
            "itemtype": "method",
            "name": "arrayPushAll",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "FALSE when the parameters are not Arrays",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 415,
            "description": "Empty callback function just used as a place holder if a callback is required\nand the result is not needed.",
            "static": 1,
            "itemtype": "method",
            "name": "cb",
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 425,
            "description": "Creates a unique Id",
            "static": 1,
            "itemtype": "method",
            "name": "uniqueId",
            "return": {
                "description": "Unique Id Object",
                "type": "String"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 435,
            "description": "Tests if a value is an object",
            "static": 1,
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 446,
            "description": "Tests if a value is an string",
            "static": 1,
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 457,
            "description": "Tests if a value is a function",
            "static": 1,
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 468,
            "description": "Tests if a value is NULL or undefined",
            "static": 1,
            "itemtype": "method",
            "name": "isNullOrUndefined",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 479,
            "description": "Tests if a value is a boolean",
            "static": 1,
            "itemtype": "method",
            "name": "isBoolean",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 490,
            "description": "Retrieves the subdirectories of a path",
            "static": 1,
            "itemtype": "method",
            "name": "getDirectories",
            "params": [
                {
                    "name": "dirPath",
                    "description": "The starting path",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 529,
            "description": "Retrieves file and/or directorie absolute paths under a given directory path.",
            "static": 1,
            "itemtype": "method",
            "name": "getFiles",
            "params": [
                {
                    "name": "dirPath",
                    "description": "The path to the directory to be examined",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options that customize the results",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "recursive",
                            "description": "A flag that indicates if \ndirectories should be recursively searched.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "filter",
                            "description": "A function that returns a boolean \nindicating if the file should be included in the result set.  The function \nshould take two parameters.  The first is a string value representing the \nabsolute path of the file.  The second is the stat object for the file.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an \nError, if occurred. The second is an array of strings representing the \nabsolute paths for files that met the criteria specified by the filter \nfunction.",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 663,
            "description": "Synchronously makes the specified directory structure.",
            "static": 1,
            "itemtype": "method",
            "name": "mkdirsSync",
            "params": [
                {
                    "name": "absoluteDirPath",
                    "description": "The absolute path of the directory structure \nto be created",
                    "type": "String"
                },
                {
                    "name": "isFileName",
                    "description": "When true the value after the last file \nseparator is treated as a file.  This means that a directory with that value \nwill not be created.",
                    "type": "Boolean"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 697,
            "description": "Retrieves the extension off of the end of a string that represents a URI to \na resource",
            "static": 1,
            "itemtype": "method",
            "name": "getExtension",
            "params": [
                {
                    "name": "filePath",
                    "description": "URI to the resource",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "lower",
                            "description": "When TRUE the extension will be returned as lower case",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "sep",
                            "description": "The file path separator used in the path.  Defaults to the OS default.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The value after the last '.' character",
                "type": "String"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 739,
            "description": "Overrides the basic inherit functionality to include static functions and \nproperties of prototypes",
            "static": 1,
            "itemtype": "method",
            "name": "inherits",
            "params": [
                {
                    "name": "Type1",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "Type2",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 756,
            "description": "Provides typical conversions for time",
            "static": 1,
            "readonly": "",
            "itemtype": "property",
            "name": "TIME",
            "type": "{Object}",
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 38,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "pb",
            "type": "{Object}",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 47,
            "description": "To be called when the configuration is loaded.  The function is responsible\nfor triggered the startup of the HTTP connection listener as well as start a\nconnection pool to the core DB.",
            "itemtype": "method",
            "name": "init",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 76,
            "description": "Ensures that any log messages by the NPM module are forwarded as output\nto the system logs",
            "static": 1,
            "itemtype": "method",
            "name": "initLogWrappers",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 95,
            "description": "Initializes the request handler.  This causes all system routes to be\nregistered.",
            "static": 1,
            "itemtype": "method",
            "name": "initRequestHandler",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 107,
            "description": "Starts the session handler",
            "itemtype": "method",
            "name": "initSessions",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 116,
            "description": "Initializes the installed plugins.",
            "static": 1,
            "itemtype": "method",
            "name": "initPlugins",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 132,
            "description": "Attempts to initialize a connection pool to the core database",
            "static": 1,
            "itemtype": "method",
            "name": "initDBConnections",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 153,
            "description": "Checks to see if the process should verify that the indices are valid and in \nplace.",
            "static": 1,
            "itemtype": "method",
            "name": "initDBIndices",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 172,
            "description": "Initializes the HTTP server(s).  When SSL is enabled two servers are created.\nOne to handle incoming HTTP traffic and one to handle HTTPS traffic.",
            "static": 1,
            "itemtype": "method",
            "name": "initServer",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 227,
            "description": "The function that handles normal server traffic.  The function ensures that\nthe incoming request is delegated out appropriately.  When SSL Termination\nis in use if the 'x-forwarded-proto' header does equal 'https' then the\nrequest is delegated to the handoff function so the request can be\nredirected appropriately.",
            "static": 1,
            "itemtype": "method",
            "name": "onHttpConnect",
            "params": [
                {
                    "name": "req",
                    "description": "The incoming request",
                    "type": "Request"
                },
                {
                    "name": "resp",
                    "description": "The outgoing response",
                    "type": "Response"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 258,
            "description": "Handles traffic that comes in for HTTP when SSL is enabled.  The request is\nredirected to the appropriately protected HTTPS url.",
            "static": 1,
            "itemtype": "method",
            "name": "onHttpConnectForHandoff",
            "params": [
                {
                    "name": "req",
                    "description": "The incoming request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "The outgoing response",
                    "type": "Response"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 282,
            "description": "Initializes server registration.",
            "static": 1,
            "itemtype": "method",
            "name": "initServerRegistration",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 292,
            "description": "Initializes the command service by calling its \"init\" function.",
            "static": 1,
            "itemtype": "method",
            "name": "initCommandService",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 302,
            "description": "Initializes the libraries service",
            "static": 1,
            "itemtype": "method",
            "name": "initLibraries",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 312,
            "description": "Starts up the instance of PencilBlue",
            "itemtype": "method",
            "name": "start",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "sample.config.js",
            "line": 1,
            "description": "This is a sample configuration meant to get users and up running on a local \nmachine.  The configuration will not support multi-process on a single \nserver or multi-server/elastic environments.  For more detailed information \non the options provided please refer to the /include/config.js file.\n\nThe file can be renamed to \"config.js\" in the same directory as this file \nand it will be used as the configuration when PencilBlue is started.  If \nthis file is used then there is no need to create a \"config.json\"",
            "class": "",
            "module": "Services"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nThis is a sample configuration meant to get users and up running on a local \nmachine.  The configuration will not support multi-process on a single \nserver or multi-server/elastic environments.  For more detailed information \non the options provided please refer to the /include/config.js file.\n\nThe file can be renamed to \"config.js\" in the same directory as this file \nand it will be used as the configuration when PencilBlue is started.  If \nthis file is used then there is no need to create a \"config.json\"",
            "line": " sample.config.js:1"
        }
    ]
}