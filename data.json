{
    "project": {
        "name": "PencilBlue",
        "description": "PencilBlue: Full stack online publishing for Node.js",
        "version": "0.1.3",
        "url": "http://pencilblue.org/",
        "logo": "http://pencilblue.org/img/pb_logo.png"
    },
    "files": {
        "include\\dao\\cache.js": {
            "name": "include\\dao\\cache.js",
            "modules": {},
            "classes": {
                "CacheFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\dao.js": {
            "name": "include\\dao\\dao.js",
            "modules": {
                "Database": 1
            },
            "classes": {
                "DAO": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\db_manager.js": {
            "name": "include\\dao\\db_manager.js",
            "modules": {},
            "classes": {
                "DBManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\error\\pb_error.js": {
            "name": "include\\error\\pb_error.js",
            "modules": {
                "ErrorSuccess": 1
            },
            "classes": {
                "PBError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\http\\request_handler.js": {
            "name": "include\\http\\request_handler.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\model\\create_document.js": {
            "name": "include\\model\\create_document.js",
            "modules": {
                "Model": 1
            },
            "classes": {
                "DocumentCreator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\admin\\admin_subnav_service.js": {
            "name": "include\\service\\admin\\admin_subnav_service.js",
            "modules": {
                "Admin": 1
            },
            "classes": {
                "AdminSubnavService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\article_service.js": {
            "name": "include\\service\\entities\\article_service.js",
            "modules": {
                "Entities": 1
            },
            "classes": {
                "ArticleService": 1,
                "MediaLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\media_service.js": {
            "name": "include\\service\\entities\\media_service.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\plugin_service.js": {
            "name": "include\\service\\entities\\plugin_service.js",
            "modules": {},
            "classes": {
                "PluginService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\section_service.js": {
            "name": "include\\service\\entities\\section_service.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\template_service.js": {
            "name": "include\\service\\entities\\template_service.js",
            "modules": {},
            "classes": {
                "TemplateService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\url_service.js": {
            "name": "include\\service\\entities\\url_service.js",
            "modules": {},
            "classes": {
                "UrlService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\user_service.js": {
            "name": "include\\service\\entities\\user_service.js",
            "modules": {},
            "classes": {
                "UserService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\cache_entity_service.js": {
            "name": "include\\service\\cache_entity_service.js",
            "modules": {
                "Storage": 1
            },
            "classes": {
                "CacheEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\db_entity_service.js": {
            "name": "include\\service\\db_entity_service.js",
            "modules": {},
            "classes": {
                "DBEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\fs_entity_service.js": {
            "name": "include\\service\\fs_entity_service.js",
            "modules": {},
            "classes": {
                "FSEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\json_fs_entity_service.js": {
            "name": "include\\service\\json_fs_entity_service.js",
            "modules": {},
            "classes": {
                "JSONFSEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\memory_entity_service.js": {
            "name": "include\\service\\memory_entity_service.js",
            "modules": {},
            "classes": {
                "MemoryEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\read_only_simple_layered_service.js": {
            "name": "include\\service\\read_only_simple_layered_service.js",
            "modules": {},
            "classes": {
                "ReadOnlySimpleLayeredService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\simple_layered_service.js": {
            "name": "include\\service\\simple_layered_service.js",
            "modules": {},
            "classes": {
                "SimpleLayeredService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\storage\\mongo_session_store.js": {
            "name": "include\\session\\storage\\mongo_session_store.js",
            "modules": {
                "Session": 1
            },
            "classes": {
                "MongoSessionStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\storage\\redis_session_store.js": {
            "name": "include\\session\\storage\\redis_session_store.js",
            "modules": {},
            "classes": {
                "RedisSessionStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\session.js": {
            "name": "include\\session\\session.js",
            "modules": {},
            "classes": {
                "SessionHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\registry\\mongo_registration_provider.js": {
            "name": "include\\system\\registry\\mongo_registration_provider.js",
            "modules": {},
            "classes": {
                "MongoRegistrationProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\registry\\redis_registration_provider.js": {
            "name": "include\\system\\registry\\redis_registration_provider.js",
            "modules": {},
            "classes": {
                "RedisRegistrationProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\server_registration.js": {
            "name": "include\\system\\server_registration.js",
            "modules": {},
            "classes": {
                "ServerRegistration": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\settings.js": {
            "name": "include\\system\\settings.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\theme\\comments.js": {
            "name": "include\\theme\\comments.js",
            "modules": {
                "Theme": 1
            },
            "classes": {
                "CommentService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\theme\\media.js": {
            "name": "include\\theme\\media.js",
            "modules": {},
            "classes": {
                "MediaService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\theme\\top_menu.js": {
            "name": "include\\theme\\top_menu.js",
            "modules": {},
            "classes": {
                "TopMenuService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\validation\\validation_service.js": {
            "name": "include\\validation\\validation_service.js",
            "modules": {},
            "classes": {
                "ValidationService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\access_management.js": {
            "name": "include\\access_management.js",
            "modules": {
                "Security": 1
            },
            "classes": {
                "SecurityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\admin_navigation.js": {
            "name": "include\\admin_navigation.js",
            "modules": {},
            "classes": {
                "AdminNavigation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\client_js.js": {
            "name": "include\\client_js.js",
            "modules": {
                "Services": 1
            },
            "classes": {
                "ClientJS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\config.js": {
            "name": "include\\config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\content.js": {
            "name": "include\\content.js",
            "modules": {},
            "classes": {
                "ContentService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\email.js": {
            "name": "include\\email.js",
            "modules": {},
            "classes": {
                "EmailService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\localization.js": {
            "name": "include\\localization.js",
            "modules": {},
            "classes": {
                "Localization": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\requirements.js": {
            "name": "include\\requirements.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\util.js": {
            "name": "include\\util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "plugins\\ga\\ga.js": {
            "name": "plugins\\ga\\ga.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\portfolio\\portfolio.js": {
            "name": "plugins\\portfolio\\portfolio.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\sample\\services\\text_creator.js": {
            "name": "plugins\\sample\\services\\text_creator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\sample\\sample.js": {
            "name": "plugins\\sample\\sample.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pencilblue.js": {
            "name": "pencilblue.js",
            "modules": {},
            "classes": {
                "PencilBlue": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Database": {
            "name": "Database",
            "submodules": {},
            "classes": {
                "CacheFactory": 1,
                "DAO": 1,
                "DBManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\dao\\db_manager.js",
            "line": 29,
            "description": "Controlls the data model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dbName",
                    "description": "Will default to the config.db.name DB when not provided.",
                    "type": "String",
                    "optional": true
                }
            ],
            "itemtype": "main"
        },
        "ErrorSuccess": {
            "name": "ErrorSuccess",
            "submodules": {},
            "classes": {
                "PBError": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\error\\pb_error.js",
            "line": 18,
            "description": "Specialized application error that knows what status code to return",
            "is_constructor": 1,
            "itemtype": "main"
        },
        "Model": {
            "name": "Model",
            "submodules": {},
            "classes": {
                "DocumentCreator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\model\\create_document.js",
            "line": 18,
            "description": "Creates structures for persistence and cleans various fields.",
            "is_constructor": 1,
            "itemtype": "main"
        },
        "Services": {
            "name": "Services",
            "submodules": {
                "Admin": 1,
                "Entities": 1,
                "Storage": 1,
                "Theme": 1,
                "Validation": 1,
                "Security": 1
            },
            "classes": {
                "AdminSubnavService": 1,
                "ArticleService": 1,
                "MediaLoader": 1,
                "MediaService": 1,
                "PluginService": 1,
                "TemplateService": 1,
                "UrlService": 1,
                "UserService": 1,
                "CacheEntityService": 1,
                "DBEntityService": 1,
                "FSEntityService": 1,
                "JSONFSEntityService": 1,
                "MemoryEntityService": 1,
                "ReadOnlySimpleLayeredService": 1,
                "SimpleLayeredService": 1,
                "CommentService": 1,
                "TopMenuService": 1,
                "ValidationService": 1,
                "SecurityService": 1,
                "AdminNavigation": 1,
                "ClientJS": 1,
                "ContentService": 1,
                "EmailService": 1,
                "Localization": 1,
                "Util": 1,
                "PencilBlue": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "pencilblue.js",
            "line": 21,
            "description": "Service for creating JavaScript tags",
            "is_constructor": 1,
            "params": [
                {
                    "name": "objType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "valueField",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "keyField",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "Admin": {
            "name": "Admin",
            "submodules": {},
            "classes": {
                "AdminSubnavService": 1,
                "AdminNavigation": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\admin_navigation.js",
            "line": 18,
            "description": "Services calls for the admin interface",
            "is_constructor": 1
        },
        "Entities": {
            "name": "Entities",
            "submodules": {},
            "classes": {
                "ArticleService": 1,
                "MediaLoader": 1,
                "PluginService": 1,
                "TemplateService": 1,
                "UrlService": 1,
                "UserService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\user_service.js",
            "line": 18,
            "description": "Service calls for individual entities in the system",
            "is_constructor": 1
        },
        "Storage": {
            "name": "Storage",
            "submodules": {},
            "classes": {
                "CacheEntityService": 1,
                "DBEntityService": 1,
                "FSEntityService": 1,
                "JSONFSEntityService": 1,
                "MemoryEntityService": 1,
                "ReadOnlySimpleLayeredService": 1,
                "SimpleLayeredService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\simple_layered_service.js",
            "line": 18,
            "description": "Services for managing storage",
            "is_constructor": 1,
            "params": [
                {
                    "name": "objType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "valueField",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "keyField",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "Session": {
            "name": "Session",
            "submodules": {},
            "classes": {
                "MongoSessionStore": 1,
                "RedisSessionStore": 1,
                "SessionHandler": 1,
                "MongoRegistrationProvider": 1,
                "RedisRegistrationProvider": 1,
                "ServerRegistration": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "include\\system\\server_registration.js",
            "line": 24,
            "description": "Session storage backed by MongoDB",
            "is_constructor": 1
        },
        "Theme": {
            "name": "Theme",
            "submodules": {},
            "classes": {
                "MediaService": 1,
                "CommentService": 1,
                "TopMenuService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\theme\\top_menu.js",
            "line": 18,
            "description": "Theme content services",
            "is_constructor": 1
        },
        "Validation": {
            "name": "Validation",
            "submodules": {},
            "classes": {
                "ValidationService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "description": "Provides a set of functions for common validations.",
            "file": "include\\validation\\validation_service.js",
            "line": 18
        },
        "Security": {
            "name": "Security",
            "submodules": {},
            "classes": {
                "SecurityService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\access_management.js",
            "line": 18,
            "description": "Service for managing user access",
            "is_constructor": 1
        }
    },
    "classes": {
        "CacheFactory": {
            "name": "CacheFactory",
            "shortname": "CacheFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\dao\\cache.js",
            "line": 18,
            "description": "Creates the cache"
        },
        "DAO": {
            "name": "DAO",
            "shortname": "DAO",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\dao\\dao.js",
            "line": 18,
            "description": "Controlls the data model"
        },
        "DBManager": {
            "name": "DBManager",
            "shortname": "DBManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\dao\\db_manager.js",
            "line": 29,
            "description": "Wrapper that protects against direct access to the active connection pools\nand DB references."
        },
        "PBError": {
            "name": "PBError",
            "shortname": "PBError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ErrorSuccess",
            "namespace": "",
            "file": "include\\error\\pb_error.js",
            "line": 18,
            "description": "Specialized application error that knows what status code to return"
        },
        "DocumentCreator": {
            "name": "DocumentCreator",
            "shortname": "DocumentCreator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Model",
            "namespace": "",
            "file": "include\\model\\create_document.js",
            "line": 18,
            "description": "Creates structures for persistence and cleans various fields."
        },
        "AdminSubnavService": {
            "name": "AdminSubnavService",
            "shortname": "AdminSubnavService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 18,
            "description": "Provides the ability to manage the admin section's sub-nav.  It manages\ncallbacks for specific areas of the admin section that will build a structure\nto represent the sub-nav.  This sub nav, when retrieved will combine all\nregistrants' pills into a single structure which can then be rendered in a UI.",
            "submodule": "Admin"
        },
        "ArticleService": {
            "name": "ArticleService",
            "shortname": "ArticleService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Entities",
            "namespace": "",
            "file": "include\\service\\entities\\article_service.js",
            "line": 31,
            "description": "Retrieves articles and pages",
            "is_constructor": 1
        },
        "MediaLoader": {
            "name": "MediaLoader",
            "shortname": "MediaLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\article_service.js",
            "line": 384,
            "description": "Handles retrieval and injection of media in articles and pages",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "MediaService": {
            "name": "MediaService",
            "shortname": "MediaService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Theme",
            "namespace": "",
            "file": "include\\theme\\media.js",
            "line": 23,
            "description": "Retrieves media information"
        },
        "PluginService": {
            "name": "PluginService",
            "shortname": "PluginService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1,
            "description": "PluginService - Provides functions for interacting with plugins.\nInstall/uninstall, setting retrieval, plugin retrieval, etc.",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "TemplateService": {
            "name": "TemplateService",
            "shortname": "TemplateService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\template_service.js",
            "line": 21,
            "description": "A templating engine that provides the ability to read in file snippets and\ncall back for data based on the flags in the template file.  The instance\ncan be provided a Localization instance which will be used to perform\ntranslations for localization flags are encountered.  Flags are marked in\nhtml files by the pattern ^xzy^.  The values provided here are not HTML\nencoded.  Any reserved characters must be manually encoded by any flag\ncall backs.",
            "submodule": "Entities",
            "is_constructor": 1,
            "params": [
                {
                    "name": "localizationService",
                    "description": "The localization service object",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "UrlService": {
            "name": "UrlService",
            "shortname": "UrlService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\url_service.js",
            "line": 18,
            "description": "A service that provides insight into the system's routes (URLs) along with\nother utility functions to assist in examining and constructing URLs for\nclients to use for interaction with the system.",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "UserService": {
            "name": "UserService",
            "shortname": "UserService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Entities",
            "namespace": "",
            "file": "include\\service\\entities\\user_service.js",
            "line": 18,
            "description": "Service for performing user specific operations."
        },
        "CacheEntityService": {
            "name": "CacheEntityService",
            "shortname": "CacheEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\cache_entity_service.js",
            "line": 18,
            "description": "In-cache storage service",
            "submodule": "Storage"
        },
        "DBEntityService": {
            "name": "DBEntityService",
            "shortname": "DBEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\db_entity_service.js",
            "line": 18,
            "description": "Database storage service"
        },
        "FSEntityService": {
            "name": "FSEntityService",
            "shortname": "FSEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\fs_entity_service.js",
            "line": 18,
            "description": "File system storage service"
        },
        "JSONFSEntityService": {
            "name": "JSONFSEntityService",
            "shortname": "JSONFSEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 18,
            "description": "JSON file system storage service"
        },
        "MemoryEntityService": {
            "name": "MemoryEntityService",
            "shortname": "MemoryEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\memory_entity_service.js",
            "line": 18,
            "description": "Memory storage service"
        },
        "ReadOnlySimpleLayeredService": {
            "name": "ReadOnlySimpleLayeredService",
            "shortname": "ReadOnlySimpleLayeredService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\read_only_simple_layered_service.js",
            "line": 18,
            "description": "Service to set storage services as read only"
        },
        "SimpleLayeredService": {
            "name": "SimpleLayeredService",
            "shortname": "SimpleLayeredService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\simple_layered_service.js",
            "line": 18,
            "description": "Service for layering storage services"
        },
        "MongoSessionStore": {
            "name": "MongoSessionStore",
            "shortname": "MongoSessionStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 18,
            "description": "Session storage backed by MongoDB"
        },
        "RedisSessionStore": {
            "name": "RedisSessionStore",
            "shortname": "RedisSessionStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 18,
            "description": "Session storage backed by Redis"
        },
        "SessionHandler": {
            "name": "SessionHandler",
            "shortname": "SessionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\session.js",
            "line": 24,
            "description": "Responsible for managing user sessions"
        },
        "MongoRegistrationProvider": {
            "name": "MongoRegistrationProvider",
            "shortname": "MongoRegistrationProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 19,
            "description": "Implements the necessary functions in order to be able to create and manage\na service registry for PB processes in the cluster.  This provider uses MongoDB\nas the storage.  In addition, it leverages MongoDB's TTL collections.  The\nreaper for mongo runs every 60 seconds.  It is possible for dead processes to\nappear in the status list for up to that magical 60 second threshold.  The\nname of the collection used to store all statuses is determined by the\nconfiguration property: \"registry.key\".",
            "is_constructor": 1
        },
        "RedisRegistrationProvider": {
            "name": "RedisRegistrationProvider",
            "shortname": "RedisRegistrationProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 18,
            "description": "Implements the necessary functions in order to be able to create and manage\na service registry for PB processes in the cluster.  This provider uses Redis\nas the storage.  In addition, it leverages Redis's expiry functionality to\nexpire entries automatically if they have not been touched.  In order to\nretrieve all nodes/processes in the cluster the provider must execute\nRedis's \"keys\" function which is an expensive operation.  To lessen the\nimpact on production systems the provider creates and manages its own Redis\nclient and switches to DB 2 in order to minimize the number of keys that\nneed to be scanned since the rest of the PB system leverages DB 0.",
            "is_constructor": 1
        },
        "ServerRegistration": {
            "name": "ServerRegistration",
            "shortname": "ServerRegistration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\server_registration.js",
            "line": 24,
            "description": "Service that provides the ability for the process/node to register itself so\nthat other nodes in the system can find it.  In addition, it helps with the\nhealth monitoring of the system.",
            "is_constructor": 1
        },
        "CommentService": {
            "name": "CommentService",
            "shortname": "CommentService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Theme",
            "namespace": "",
            "file": "include\\theme\\comments.js",
            "line": 25,
            "description": "Retrieves comment information"
        },
        "TopMenuService": {
            "name": "TopMenuService",
            "shortname": "TopMenuService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Theme",
            "namespace": "",
            "file": "include\\theme\\top_menu.js",
            "line": 18,
            "description": "Service for top menu navigation"
        },
        "ValidationService": {
            "name": "ValidationService",
            "shortname": "ValidationService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\validation\\validation_service.js",
            "line": 18,
            "description": "Provides a set of functions for common validations.",
            "submodule": "Validation",
            "is_constructor": 1
        },
        "SecurityService": {
            "name": "SecurityService",
            "shortname": "SecurityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Security",
            "namespace": "",
            "file": "include\\access_management.js",
            "line": 18,
            "description": "Service for managing user access"
        },
        "AdminNavigation": {
            "name": "AdminNavigation",
            "shortname": "AdminNavigation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Admin",
            "namespace": "",
            "file": "include\\admin_navigation.js",
            "line": 18,
            "description": "Provides function to construct the structure needed to display the navigation\nin the Admin section of the application."
        },
        "ClientJS": {
            "name": "ClientJS",
            "shortname": "ClientJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\client_js.js",
            "line": 18,
            "description": "Service for creating JavaScript tags"
        },
        "ContentService": {
            "name": "ContentService",
            "shortname": "ContentService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\content.js",
            "line": 18,
            "description": "Service for content settings retrieval"
        },
        "EmailService": {
            "name": "EmailService",
            "shortname": "EmailService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\email.js",
            "line": 21,
            "description": "Service for sending emails."
        },
        "Localization": {
            "name": "Localization",
            "shortname": "Localization",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\localization.js",
            "line": 18,
            "description": "Provides functions to translate items based on keys.  Also\nassists in the determination of the best language for the given user."
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\util.js",
            "line": 21,
            "description": "Provides a set of utility functions used throughout the code base"
        },
        "PencilBlue": {
            "name": "PencilBlue",
            "shortname": "PencilBlue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "pencilblue.js",
            "line": 21,
            "description": "The main driver file for PencilBlue.  Provides the function necessary to\nstart up the master and/or child processes.  In addition, it is responsible\nfor ensuring that all system services are avaialble by requiring the\n\"requirements.js\" file.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "include\\dao\\cache.js",
            "line": 30,
            "description": "Retrieves the instance of Redis or FakeRedis",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "client",
                "type": "Object"
            },
            "class": "CacheFactory",
            "module": "Database"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 45,
            "class": "CacheFactory",
            "module": "Database"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 56,
            "description": "Shuts down the Redis or FakeRedis instance",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheFactory",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 31,
            "description": "Static variable to indicate that all indices of a document should be\nretrieved",
            "itemtype": "property",
            "name": "PROJECT_ALL",
            "type": "{Object}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 39,
            "description": "Static variable to indicate that documents should be retrieve from anywhere",
            "itemtype": "property",
            "name": "ANYWHERE",
            "type": "{Object}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 46,
            "description": "Static variable to indicate that documents should be returned in their\nnatural order",
            "itemtype": "property",
            "name": "NATURAL_ORDER",
            "type": "{Array}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 55,
            "description": "Static varible to sort ascending",
            "itemtype": "property",
            "name": "ASC",
            "type": "{Number}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 62,
            "description": "Static variable to sort descending",
            "itemtype": "property",
            "name": "DESC",
            "type": "{Number}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 70,
            "description": "Retrieves an object by ID",
            "itemtype": "method",
            "name": "loadById",
            "params": [
                {
                    "name": "id",
                    "description": "The unique id of the object",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection the object is in",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 82,
            "description": "Retrieves objects matching a key value pair",
            "itemtype": "method",
            "name": "loadByValue",
            "params": [
                {
                    "name": "key",
                    "description": "The key to search for",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "The value to search for",
                    "type": "*"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 97,
            "description": "Retrieves object matching several key value pairs",
            "itemtype": "method",
            "name": "loadByValues",
            "params": [
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 116,
            "description": "Gets the count of objects matching criteria",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "entityType",
                    "description": "The type of object to search for",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 128,
            "description": "Determines if an object extists matching criteria",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 142,
            "description": "Determines if there is only a single document that matches the specified query",
            "itemtype": "method",
            "name": "unique",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "exclusionId",
                    "description": "Object Id to exclude from the search",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 171,
            "description": "Queries the database",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "entityType",
                    "description": "The type of object to search for",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "select",
                    "description": "Selection type object",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "orderBy",
                    "description": "Order by object (MongoDB syntax)",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "Number of documents to retrieve",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "Start index of retrieval",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise object",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 204,
            "description": "The actual implementation for querying.  The function does not do the same\ntype checking as the wrapper function \"query\".  This funciton is responsible\nfor doing the heavy lifting and returning the result back to the calling intity.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_doQuery",
            "params": [
                {
                    "name": "entityType",
                    "description": "The collection to query",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "The where clause",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "select",
                    "description": "The fields to project",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "orderBy",
                    "description": "The ordering",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "The maximum number of results to return",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "The number of results to skip before returning results.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 253,
            "description": "Persists a DB Object for the first time.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "dbObject",
                    "description": "The database object to persist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise object",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 270,
            "description": "Replaces an existing document with the specified DB Object",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dbObj",
                    "description": "The new document object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise object",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 288,
            "description": "Removes an object from persistence",
            "itemtype": "method",
            "name": "deleteById",
            "params": [
                {
                    "name": "oid",
                    "description": "The Id of the object to remove",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection the object is in",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise object",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 305,
            "description": "Removes objects from persistence that match criteria",
            "itemtype": "method",
            "name": "deleteMatching",
            "params": [
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise object",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 334,
            "description": "Sends a command to the DB.\nhttp://mongodb.github.io/node-mongodb-native/api-generated/db.html#command",
            "itemtype": "method",
            "name": "command",
            "params": [
                {
                    "name": "The",
                    "description": "command to execute",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 349,
            "description": "Attempts to create an index.  If the collection already exists then the\noperation is skipped.\nhttp://mongodb.github.io/node-mongodb-native/api-generated/collection.html#ensureindex",
            "itemtype": "method",
            "name": "ensureIndex",
            "params": [
                {
                    "name": "procedure",
                    "description": "The objects containing the necessary parameters\nand options to create the index.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "collection",
                            "description": "The collection to build an index for",
                            "type": "String"
                        },
                        {
                            "name": "spec",
                            "description": "An object that specifies one or more fields\nand sort direction for the index.",
                            "type": "Object"
                        },
                        {
                            "name": "options",
                            "description": "An optional parameter that can\nspecify the options for the index.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 378,
            "description": "Creates a basic where clause based on the specified Id",
            "static": 1,
            "itemtype": "method",
            "name": "getIDWhere",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 391,
            "description": "Creates a where clause that equates to select where [idProp] is in the\nspecified array of values.",
            "static": 1,
            "itemtype": "method",
            "name": "getIDInWhere",
            "params": [
                {
                    "name": "objArray",
                    "description": "The array of acceptable values",
                    "type": "Array"
                },
                {
                    "name": "The",
                    "description": "property that holds a referenced ID value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 419,
            "description": "Creates a basic where clause based on not equalling the specified Id",
            "static": 1,
            "itemtype": "method",
            "name": "getNotIDWhere",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 432,
            "description": "Creates a where clause that indicates to select where the '_id' field does\nnot equal the specified value.",
            "static": 1,
            "itemtype": "method",
            "name": "getNotIDField",
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 443,
            "description": "Creates an MongoDB ObjectID object",
            "static": 1,
            "itemtype": "method",
            "name": "getObjectID",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ObjectID object",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 454,
            "description": "Updates a DB object with a created time stamp and last modified time stamp.",
            "static": 1,
            "itemtype": "method",
            "name": "updateChangeHistory",
            "params": [
                {
                    "name": "dbObject",
                    "description": "Object to update",
                    "type": "Object"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 23,
            "description": "Legacy variable used to reference the main database\nTODO Remove this once all references are converted over.",
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 39,
            "description": "Keeps track of all active DBs with active connection pools.",
            "params": [
                {
                    "name": "dbs",
                    "description": ""
                }
            ],
            "type": "{Object}",
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 47,
            "description": "Retrieves a handle to the specified database.",
            "itemtype": "method",
            "name": "getDB",
            "params": [
                {
                    "name": "name",
                    "description": "The database name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise object",
                "type": "Object"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 114,
            "description": "Indicates if a connection pool to the specified database has already been\ninitialized",
            "itemtype": "method",
            "name": "hasConnected",
            "return": {
                "description": "Whether the pool has been connected",
                "type": "Boolean"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 125,
            "description": "Iterates over all database handles and call's their shutdown function.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Array of promise objects, one for each shutdown call",
                "type": "Array"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\error\\pb_error.js",
            "line": 38,
            "description": "Sets the localization key for the error",
            "itemtype": "method",
            "name": "setLocalizationKey",
            "params": [
                {
                    "name": "key",
                    "description": "The localization key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The PBError object",
                "type": "Object"
            },
            "class": "PBError",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\error\\pb_error.js",
            "line": 50,
            "description": "Sets the source for the error",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "err",
                    "description": "The error source",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The PBError object",
                "type": "Object"
            },
            "class": "PBError",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 18,
            "description": "Responsible for processing a single req by delegating it to the correct controllers",
            "class": "DocumentCreator",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1091,
            "description": "Processes a request:\n<ol>\n\t<li>Initialize localization</li>\n\t<li>if Public Route:\n\t\t<ol>\n\t\t\t<li>If Valid Content\n\t\t\t\t<ol><li>Serve Public Content</li></ol>\n\t\t\t</li>\n\t\t\t<li>Else Serve 404</li>\n\t\t</ol>\n\t</li>\n\t<li>Else Parse Cookies</li>\n\t<li>Open/Create a session</li>\n\t<li>Get Route</li>\n\n</ol>",
            "class": "DocumentCreator",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 1210,
            "description": "TODO Church this up a bit.  Make it a template and controller like 404.\nTODO install an encoder entity since node prints out function names in angle brackets",
            "class": "DocumentCreator",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 28,
            "description": "Creates a document object ready to be injected into the database",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "object_type",
                    "description": "The type of object to create",
                    "type": "String"
                },
                {
                    "name": "post",
                    "description": "Key value pair object to prepare",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values are to be split from CSVs into arrays",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values are to be null if empty",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The database ready document object",
                "type": "Object"
            },
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 55,
            "description": "Updates a document object with new properties",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pairs to update with",
                    "type": "Object"
                },
                {
                    "name": "existingObject",
                    "description": "Object to update",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values are to be split from CSVs into arrays",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values are to be null if empty",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The database ready document object",
                "type": "Object"
            },
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 70,
            "description": "Hashes all password fields",
            "itemtype": "method",
            "name": "passwordHash",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 89,
            "description": "Formats email fields",
            "itemtype": "method",
            "name": "emailFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 101,
            "description": "Formats usernames",
            "itemtype": "method",
            "name": "usernameFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 113,
            "description": "Formats access levels",
            "itemtype": "method",
            "name": "accessFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 125,
            "description": "Formats string items to integers",
            "itemtype": "method",
            "name": "formatIntegerItems",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "integerItems",
                    "description": "Keys whose values should be formatted as integers",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 142,
            "description": "Formats empty items to null values",
            "itemtype": "method",
            "name": "emptyItemsToNull",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values should be null if empty",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 166,
            "description": "Splits CSV items into arrays",
            "itemtype": "method",
            "name": "csvItemsToArrays",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values should be arrays",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 40,
            "description": "Register a callback with the service",
            "itemtype": "method",
            "name": "registerFor",
            "params": [
                {
                    "name": "key",
                    "description": "The key to register",
                    "type": "String"
                },
                {
                    "name": "getSubNavItems",
                    "description": "The callback function",
                    "type": "Function"
                }
            ],
            "class": "AdminSubnavService",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 59,
            "description": "Retrieves the sub-nav items",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                },
                {
                    "name": "ls",
                    "description": "The localization object",
                    "type": "Object"
                },
                {
                    "name": "activePill",
                    "description": "The name of the active sub-nav pill",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data object to send to the callback function",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The sub-nav items",
                "type": "Object"
            },
            "class": "AdminSubnavService",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 45,
            "description": "Rerieves the content type",
            "itemtype": "method",
            "name": "getContentType",
            "return": {
                "description": "Content type",
                "type": "String"
            },
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 55,
            "description": "Sets the content type (article, page)",
            "itemtype": "method",
            "name": "setContentType",
            "params": [
                {
                    "name": "type",
                    "description": "The content type",
                    "type": "String"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 65,
            "description": "Finds an article or page by Id",
            "itemtype": "method",
            "name": "findById",
            "params": [
                {
                    "name": "articleId",
                    "description": "The article's object Id",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 76,
            "description": "Finds articles by section",
            "itemtype": "method",
            "name": "findBySection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "The section's object Id",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 87,
            "description": "Finds articles and pages by topic",
            "itemtype": "method",
            "name": "findByTopic",
            "params": [
                {
                    "name": "topicId",
                    "description": "The topic's object Id",
                    "type": "[type]"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 98,
            "description": "Finds articles and pages matching criteria",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 147,
            "description": "Retrieves data necessary for displaying an articles and appends it to the\narticle object",
            "itemtype": "method",
            "name": "processArticleForDisplay",
            "params": [
                {
                    "name": "article",
                    "description": "The artice to process",
                    "type": "[type]"
                },
                {
                    "name": "authors",
                    "description": "Available authors retrieved from the database",
                    "type": "[type]"
                },
                {
                    "name": "contentSettings",
                    "description": "Content settings to use for processing",
                    "type": "[type]"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 215,
            "description": "Retrieves the authors of an array of articles",
            "itemtype": "method",
            "name": "getArticleAuthors",
            "params": [
                {
                    "name": "articles",
                    "description": "Array of article objects",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 239,
            "description": "Retrieves the commenters for an array of comments",
            "itemtype": "method",
            "name": "getCommenters",
            "params": [
                {
                    "name": "comments",
                    "description": "Array of comment objects",
                    "type": "Array"
                },
                {
                    "name": "contentSettings",
                    "description": "Content settings to use for processing",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 302,
            "description": "Retrieves the article and byline templates",
            "itemtype": "method",
            "name": "getTemplates",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 317,
            "description": "Retrieves the meta info for an article or page",
            "itemtype": "method",
            "name": "getMetaInfo",
            "params": [
                {
                    "name": "article",
                    "description": "An article or page object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 394,
            "description": "Processes an article or page to insert media",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "articleLayout",
                    "description": "The HTML layout of the article or page",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "[description]",
                    "type": "Function"
                }
            ],
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 433,
            "description": "Replaces an article or page layout's ^media_display^ tag with a media embed",
            "params": [
                {
                    "name": "layout",
                    "description": "The HTML layout of the article or page",
                    "type": "String"
                },
                {
                    "name": "mediaTemplate",
                    "description": "The template of the media embed",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 28,
            "description": "Retrieves whether a media's file path is valid",
            "itemtype": "method",
            "name": "isValidFilePath",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The file path of the media",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 37,
            "description": "Retrieves the names of the active plugins for this instance",
            "itemtype": "method",
            "name": "getActivePluginNames",
            "return": {
                "description": "An array that contain the names of the plugins that\ninitialized successfully within this instance.",
                "type": "Array"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 47,
            "description": "Retrieves a single setting for the specified plugin.",
            "itemtype": "method",
            "name": "getSetting",
            "params": [
                {
                    "name": "settingName",
                    "description": "The name of the setting to retrieve",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who owns the setting",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settingValue).\nNull is returned if the setting does not exist or the specified plugin is not\ninstalled.",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 77,
            "description": "Retrieves all of the settings for the specfied plugin.",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who's settings are being requested"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settings).\nNull is provided in the event that the plugin is not installed."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 89,
            "description": "Replaces a single setting for the specified plugin",
            "itemtype": "method",
            "name": "setSetting",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the setting to change"
                },
                {
                    "name": "value",
                    "description": "The new value for the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin who's setting is being changed."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the setting was persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 135,
            "description": "Replaces the settings for the specified plugin.",
            "itemtype": "method",
            "name": "setSettings",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings object to be validated and persisted"
                },
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who's settings are being represented"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 169,
            "description": "Replaces a single theme setting for the specified plugin",
            "itemtype": "method",
            "name": "setThemeSetting",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the setting to change"
                },
                {
                    "name": "value",
                    "description": "The new value for the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin who's setting is being changed."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the setting was persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 215,
            "description": "Replaces the theme settings for the specified plugin.",
            "itemtype": "method",
            "name": "setThemeSettings",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings object to be validated and persisted"
                },
                {
                    "name": "pluginName",
                    "description": "The uid of the plugin who's settings are being represented"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 249,
            "description": "Retrieves a single theme setting value.",
            "itemtype": "method",
            "name": "getThemeSetting",
            "params": [
                {
                    "name": "settingName",
                    "description": "The uid of the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin to retrieve the setting from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settingValue)"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 277,
            "description": "Retrieves the theme settings for the specified plugin",
            "itemtype": "method",
            "name": "getThemeSettings",
            "params": [
                {
                    "name": "pluginName",
                    "description": "The uid of the plugin"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(err, settingsObject)"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 288,
            "description": "Indicates if a plugin by the specified identifier is installed.",
            "itemtype": "method",
            "name": "isInstalled",
            "params": [
                {
                    "name": "pluginIdentifer",
                    "description": "The identifier can either be an ObjectID or the\nplugin name"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the plugin is installed, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 303,
            "description": "Retrieves a plugin descriptor (plugin document)",
            "itemtype": "method",
            "name": "getPlugin",
            "params": [
                {
                    "name": "pluginIdentifier",
                    "description": "The identifier can either be an ObjectID or the\nplugin name"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, plugin).  If the\nplugin does exist null is provided."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 335,
            "description": "Convenience function to generate a service to handle settings for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "genSettingsService",
            "params": [
                {
                    "name": "objType",
                    "description": "The type of object that will be dealt with.  (plugin_settings,\ntheme_settings)"
                },
                {
                    "name": "useMemory",
                    "description": "Indicates if the generated layered service should\nuse an in memory service.",
                    "type": "Boolean"
                },
                {
                    "name": "useCache",
                    "description": "Indicates if the generated layered service should\nuse a cache service.",
                    "type": "Boolean"
                },
                {
                    "name": "serviceName",
                    "description": "The name of the service"
                }
            ],
            "return": {
                "description": "",
                "type": "SimpleLayeredService"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 367,
            "description": "Loads the settings from a details object and persists them in the DB.  Any\nexisting settings for the plugin are deleted before the new settings are\npersisted.",
            "itemtype": "method",
            "name": "resetSettings",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to extract the settings from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were successfully cleared and reloaded. FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 418,
            "description": "Loads the Theme settings from a details object and persists them in the DB.  Any\nexisting theme settings for the plugin are deleted before the new settings\nare persisted. If the plugin does not have a theme then false is provided in\nthe callback.",
            "itemtype": "method",
            "name": "resetThemeSettings",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to extract the settings from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were successfully cleared and reloaded. FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 761,
            "description": "Installs a plugin by stepping through a series of steps that must be\ncompleted in order.  There is currently no fallback plan for a failed install.\nIn order for a plugin to be fully installed it must perform the following\nactions without error:\n<ol>\n<li>Load and parse the plugin's details.json file</li>\n<li>Pass validation</li>\n<li>Must not already be installed</li>\n<li>Successfully register itself with the system</li>\n<li>Successfully load any plugin settings</li>\n<li>Successfully load any theme settings</li>\n<li>Successfully execute the plugin's onInstall function</li>\n<li>Successfully initialize the plugin for runtime</li>\n</ol>",
            "itemtype": "method",
            "name": "installPlugin",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that contains the\nplugin and its details.json file.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(err, TRUE/FALSE)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 946,
            "description": "Initializes a plugin during startup or just after a plugin has been installed.",
            "params": [
                {
                    "name": "pluginName",
                    "description": "",
                    "type": "Plugin"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1188,
            "description": "Retrieves the absolute file path to a plugin's public directory",
            "static": 1,
            "itemtype": "method",
            "name": "getPublicPath",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that contains the intended\nplugin"
                }
            ],
            "return": {
                "description": "the absolute file path to a plugin's public directory",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1201,
            "return": {
                "description": "The absolute file path to the plugins directory",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1208,
            "description": "Constructs the path to a specific plugin's details.json file",
            "return": {
                "description": "The absolute file path to the details.json file for a plugin",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1216,
            "description": "Attempts to load and parse the details.json file for a plugin.",
            "params": [
                {
                    "name": "filePath",
                    "description": "The absolute path to the details.json file"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, detailsObject)"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1241,
            "description": "Validates a plugin's details.json file.",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to validate"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory containing the original\ndetails.json file that the details object was derived from."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the details object passes validation, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1471,
            "description": "Validates the path to the plugin's icon file.  The path is considered valid\nif the path to a valid file.  The path may be absolute or relative to the\nplugin's public directory.",
            "params": [
                {
                    "name": "iconPath",
                    "description": "The path to the icon (image) file"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory housing the plugin"
                }
            ],
            "return": {
                "description": "TRUE if the path is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1492,
            "description": "Validates the path of a main module file.  The path is considered valid if\nthe path points to JS file.  The path may be absolute or relative to the\nspecific plugin directory.",
            "params": [
                {
                    "name": "mmPath",
                    "description": "The relative or absolute path to the main module file"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory housing the plugin"
                }
            ],
            "return": {
                "description": "TRUE if the path is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1505,
            "description": "Validates a setting from a details.json file.",
            "params": [
                {
                    "name": "setting",
                    "description": "The setting to validate"
                },
                {
                    "name": "position",
                    "description": "The position in the settings array where the setting resides\nas a 0 based index."
                }
            ],
            "return": {
                "description": "The array of errors that were generated.  If no errors were\nproduced an empty array is returned.",
                "type": "Array"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1540,
            "description": "Validates a details.json file's setting value.  The value is required to be a\nstring or a number.  Null, undefined, Arrays, Objects, and prototypes are NOT\nallowed.",
            "params": [
                {
                    "name": "value",
                    "description": "The value to validate"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1552,
            "description": "Retrieves all services (initialized).  The services are provided in the\ncallback.",
            "params": [
                {
                    "name": "pathToPlugin",
                    "description": "The absolute file path to the specific plugin directory."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, servicesHash);"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1592,
            "description": "Loads a plugin service and initializes it.  The service is required to\nimplement an \"init\" function. The service is then provided as a parameter in\nthe callback.",
            "params": [
                {
                    "name": "pathToService",
                    "description": "The absolute file path to the service javascript file."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, initializedService)"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1688,
            "description": "Derives the name of a plugin service instance.  The function attempts to get\nthe name of the service by looking to see if the service has implemented the\ngetName function.  If it has not then the service name is set to be the file\nname minus any extension.",
            "params": [
                {
                    "name": "pathToService",
                    "description": "The file path to the service"
                },
                {
                    "name": "service",
                    "description": "The service prototype"
                }
            ],
            "return": {
                "description": "The derived service name",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 18,
            "description": "Service for managing the site's navigation",
            "class": "TemplateService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 525,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "ls",
                    "description": "",
                    "type": "Localization"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "TemplateService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 560,
            "static": 1,
            "itemtype": "method",
            "name": "isValidType",
            "params": [
                {
                    "name": "|{Object}",
                    "description": "type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 70,
            "description": "Indicates if the data from the registered flags\nshould be reprocessed.  The value is FALSE by default.",
            "itemtype": "property",
            "name": "reprocess",
            "type": "{Boolean}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 89,
            "description": "A container that provides the mapping for global call backs.  These should\nonly be added to at the start of the application or on plugin install/update.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 110,
            "description": "Sets the prioritized theme to use when loading templates",
            "itemtype": "method",
            "name": "setTheme",
            "params": [
                {
                    "name": "theme",
                    "description": "The name of the theme.",
                    "type": "String"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 120,
            "description": "Retrieves the prioratized theme",
            "itemtype": "method",
            "name": "getTheme",
            "return": {
                "description": "The prioritized theme to use when loading templates",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 130,
            "description": "Retrieves the raw template based on a priority.  The path to the template is\nderived from the specified relative path and the following order of\ndirectories:\n<ol>\n<li>The theme provided by \"getTheme\" if not null</li>\n<li>The globally set active_theme</li>\n<li>Iterates over the list of active plugins looking for the template</li>\n<li>The system template directory</li>\n</ol>",
            "itemtype": "method",
            "name": "getTemplateContentsByPriority",
            "params": [
                {
                    "name": "relativePath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 189,
            "description": "Loads a template file along with any encountered sub-template files and\nprocesses any flags.  The call back provides any error encountered and a\nsecond parameter that is the transformed content.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "The relative location of the template file.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 211,
            "description": "Scans the template for flags.  The callback provides any error and a second\nparameter that is the populated template with any registered flags replaced.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "content",
                    "description": "The raw content to be inspected for flags",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 289,
            "description": "Called when a flag is encountered by the processing engine.  The function is\nresponsible for delegating out the responsibility of the flag to the\nregistered entity.  Some flags are handled by default (although they can\nalways be overriden locally or globally).  The following flags are considered\n\"baked in\" and will be handled automatically unless overriden:\n<ul>\n<li>^loc_xyz^ - A localization flag.  When provided, the Localization\ninstance will have its \"get\" function called in an attempt to retrieve the\nproperly translated value for the key (the part betwee \"^loc_\" and the ending\n\"^\").\n</li>\n<li>^tmp_somedir=someotherdir=templatefileminusext^ - Specifies a\nsub-template that should be loaded processed.  The file is expected to have\na .html extension.\n</li>\n</ul>",
            "itemtype": "method",
            "name": "processFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag to be processed. The value should NOT contain\nthe carrot (^) prefix or postfix.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 347,
            "description": "When a sub-template flag is encountered by the processing engine this\nfunction is called to parse the flag and delegate out the loading and\nprocessing of the sub-template.",
            "itemtype": "method",
            "name": "handleTemplateReplacement",
            "params": [
                {
                    "name": "flag",
                    "description": "The sub-template flag",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 368,
            "description": "Called when the processing engine encounters a non-sub-template flag.  The\nfunction delegates the content transformation out to either the locally or\nglobally registered function.  In the event that a value was registered and not\na function then the value is used as the second parameter in the callback.\nDuring template re-assembly the value will be converted to a string.",
            "itemtype": "method",
            "name": "handleReplacement",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag to transform",
                    "type": "String"
                },
                {
                    "name": "replacement",
                    "description": "The value can either be a function to handle the\nreplacement or a value.",
                    "type": "Mixed"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 411,
            "description": "Registers a value or function for the specified",
            "itemtype": "method",
            "name": "registerLocal",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag name to map to the value when encountered in a\ntemplate.",
                    "type": "String"
                },
                {
                    "name": "callbackFunctionOrValue",
                    "description": "The function to execute to perform the\ntransformation or the value to substitute in place of the flag.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "TRUE when registered successfully, FALSE if not",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 426,
            "description": "Retrieves the content template names and locations for the active theme.",
            "itemtype": "method",
            "name": "getTemplatesForActiveTheme",
            "params": [
                {
                    "name": "cb",
                    "description": "A call back that provides two parameters: cb(err, [{templateName: templateLocation])",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 480,
            "description": "Retrieves the content templates that are available for use to render\nArticles and pages.",
            "itemtype": "method",
            "name": "getAvailableContentTemplates",
            "return": {
                "description": "An array of template definitions",
                "type": "Array"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 500,
            "description": "Registers a value or function for the specified",
            "static": 1,
            "itemtype": "method",
            "name": "registerGlobal",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag name to map to the value when encountered in a\ntemplate.",
                    "type": "String"
                },
                {
                    "name": "callbackFunctionOrValue",
                    "description": "The function to execute to perform the\ntransformation or the value to substitute in place of the flag.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "TRUE when registered successfully, FALSE if not",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 516,
            "description": "Retrieves the default path to a template file based on the assumption that\nthe provided path is relative to the pencilblue/templates/ directory.",
            "static": 1,
            "itemtype": "method",
            "name": "getDefaultPath",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute path",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 529,
            "description": "Retrieves the path to a template file based on the assumption that\nthe provided path is relative to the pencilblue/plugins/[themeName]/templates/ directory.",
            "static": 1,
            "itemtype": "method",
            "name": "getCustomPath",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute path",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 33,
            "description": "Takes the URL path and tests it against registered routes.",
            "static": 1,
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The themed route specification for the first route that\nmatches the given URL path.  When no routes match NULL is returned.",
                "type": "Object"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 55,
            "description": "Look at a specific content type to see if a matching URL key exists.  An\noptional ID can be provided to ensure that only an existing key for the\nobject with that ID exists.",
            "itemtype": "method",
            "name": "existsForType",
            "params": [
                {
                    "name": "params",
                    "description": "Contains the options for the function.  \"url\"\n(string) and \"type\" (string) are required.  \"id\" (string) is optional.",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 102,
            "description": "Takes a variable set of arguments and joins them together to form a URL path.",
            "itemtype": "method",
            "name": "urlJoin",
            "return": {
                "description": "a URL path",
                "type": "String"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 120,
            "description": "Takes a url and extracts the wild card part.",
            "itemtype": "method",
            "name": "getCustomUrl",
            "params": [
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The custom part of the URL",
                "type": "String"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 145,
            "description": "Determines whether a URL is external to the system by parsing the URL and\nthen looking to see if the host matches that of the provided request.",
            "itemtype": "method",
            "name": "isExternalUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "request",
                    "description": "",
                    "type": "Request"
                }
            ],
            "return": {
                "description": "TRUE if the link is external to the system, FALSE if not.",
                "type": "Boolean"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 171,
            "description": "Indicates if the URL is fully qualified, meaning that the URL provides the\n'http' protocol at the beginning of the URL.",
            "itemtype": "method",
            "name": "isFullyQualifiedUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "The URL to inspect",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if fully qualified, FALSE if not",
                "type": "Boolean"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 28,
            "description": "Gets the full name of a user",
            "itemtype": "method",
            "name": "getFullName",
            "params": [
                {
                    "name": "userId",
                    "description": "The object Id of the user",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 56,
            "description": "Gets the full names for the supplied authors",
            "itemtype": "method",
            "name": "getAuthors",
            "params": [
                {
                    "name": "objArry",
                    "description": "An array of user object",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 76,
            "description": "Retrieves the available access privileges to assign to a user",
            "itemtype": "method",
            "name": "getAdminOptions",
            "params": [
                {
                    "name": "session",
                    "description": "The current session object",
                    "type": "Object"
                },
                {
                    "name": "ls",
                    "description": "The localization object",
                    "type": "Object"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 131,
            "description": "Sends a verification email to an unverified user",
            "itemtype": "method",
            "name": "sendVerificationEmail",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 154,
            "description": "Sends a password reset email to a user",
            "itemtype": "method",
            "name": "sendPasswordResetEmail",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                },
                {
                    "name": "passwordReset",
                    "description": "A password reset object containing the verification code",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 180,
            "description": "Checks to see if a proposed user name or email is already in the system",
            "itemtype": "method",
            "name": "isUserNameOrEmailTaken",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "User object Id to exclude from the search",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 203,
            "description": "Gets the total counts of a username and email in both the user and unverified_user collections",
            "itemtype": "method",
            "name": "getExistingUsernameEmailCounts",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "User object Id to exclude from the search",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 237,
            "description": "Verifies if a user has the provided access level or higher",
            "itemtype": "method",
            "name": "hasAccessLevel",
            "params": [
                {
                    "name": "uid",
                    "description": "The user's object Id",
                    "type": "String"
                },
                {
                    "name": "accessLevel",
                    "description": "The access level to test against",
                    "type": "Number"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 41,
            "description": "Retrieve a value from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 75,
            "description": "Set a value in the cache",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 116,
            "description": "Purge the cache of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 36,
            "description": "Retrieve a value from the database",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DBEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 70,
            "description": "Set a value in the database",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DBEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 122,
            "description": "Purge the database of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DBEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 32,
            "description": "Retrieve a value from the file system",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 51,
            "description": "Set a value in the file system",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 63,
            "description": "Purge the file system of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 35,
            "description": "Retrieve a value from the file system",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 61,
            "description": "Set a value in the file system",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 84,
            "description": "Purge the file system of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 37,
            "description": "Retrieve a value from memory",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 66,
            "description": "Set a value in memory",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 100,
            "description": "Purge membory of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 48,
            "description": "Retrieves the setting value from various storage areas.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Object"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 104,
            "description": "Persists a new value for the setting.  When the setting does not exist a new\none is created.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 131,
            "description": "Removes the value from storage.",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 29,
            "description": "The mongo collection that stores the sessions",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 34,
            "description": "Responsible for retrieving the session for persistent storage.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The identifier of the session to retrieve.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [Object])",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 57,
            "description": "Responsible for persisting the session object between user requests",
            "params": [
                {
                    "name": "session",
                    "description": "The session object to store.  The session object must contain\nthe following in addition to other data:\n<pre>\n\n</pre>",
                    "type": "!~YUIDOC_LINE~!\tuid: [primitive]!~YUIDOC_LINE~!"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, 'OK')",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "set",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 83,
            "description": "Deletes a session if it exists.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [int SESSIONS_CLEARED])",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 98,
            "description": "Constructs a query to find a session in Mongo",
            "itemtype": "method",
            "name": "getSessionQuery",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The session identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 111,
            "description": "Queries for any expired sessions in Mongo and deletes them",
            "itemtype": "method",
            "name": "clearExpired",
            "params": [
                {
                    "name": "cb",
                    "description": "cb Callback of form cb(err, [int SESSIONS_CLEARED])",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 135,
            "description": "Responsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 146,
            "description": "Responsable for ensuring that the mechanism that expires sessions becomes\nactive.",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 29,
            "description": "The prefix to prepend to the session ID in order to construct a cache key",
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 34,
            "description": "Responsable for retrieving the session for persistent storage.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The identifier of the session to retrieve.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [Object])",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 54,
            "description": "Responsable for persisting the session object between user requests",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "session",
                    "description": "The session object to store.  The session object must contain\nthe following in addition to other data:\n<pre>\n{\n\tuid: [primitive]\n}\n</pre>",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, 'OK')",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 77,
            "description": "Deletes a session if it exists.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [int SESSIONS_CLEARED])",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 89,
            "description": "Constructs a session cache key provided a session id.",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[RedisSessionStore.SESSION_KEY_PREFIX][sessionId]",
                "type": "String"
            },
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 98,
            "description": "Responsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 107,
            "description": "Repsonsible for ensuring that the mechanism that expires sessions becomes\nactive.",
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 53,
            "description": "Retrieves a session for the current request.  When the session ID is\navailable the existing session is retrieved otherwise a new session is\ncreated.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "request",
                    "description": "The request descriptor",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "The callback(ERROR, SESSION_OBJ)",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 98,
            "description": "Closes the session and persists it when no other requests are currently\naccessing the session.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 137,
            "description": "Sets the session in a state that it should be terminated after the last request has completed.",
            "itemtype": "method",
            "name": "end",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 149,
            "description": "NOTE: This function should only be called <b>AFTER</b> SessionHandler.open\n is called and callsback successfully.",
            "itemtype": "method",
            "name": "gl",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Session",
                "type": "Object"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 163,
            "description": "Keeps a reference to the session in memory in case multiple requests come in.",
            "itemtype": "method",
            "name": "setLocal",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 182,
            "description": "Purges the session from local memory unless multiple requests have accessed\nthe session.",
            "itemtype": "method",
            "name": "purgeLocal",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The session identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 213,
            "description": "Tests if the session is stored locally",
            "itemtype": "method",
            "name": "isLocal",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The ID of the session to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the session is stored locally",
                "type": "Boolean"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 224,
            "description": "Creates the shell of a session object",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "request",
                    "description": ""
                }
            ],
            "return": {
                "description": "Session",
                "type": "Object"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 247,
            "description": "Generates a unique client ID based on the user agent and the remote address.",
            "itemtype": "method",
            "name": "getClientId",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Unique Id",
                "type": "String"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 260,
            "description": "Loads a session store based on the configuration.",
            "itemtype": "method",
            "name": "getSessionStore",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 290,
            "description": "Extracts the session id from the returned cookie",
            "itemtype": "method",
            "name": "getSessionIdFromCookie",
            "params": [
                {
                    "name": "request",
                    "description": "The object that describes the incoming user request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Session Id if available NULL if it cannot be found",
                "type": "String"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 317,
            "description": "Shuts down the sesison handler and the associated session store",
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 32,
            "description": "Retrieves the entire cluster status as an array of status objects.  The '_id'\nproperty uniquely identifies each process/node.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 51,
            "description": "Updates the status of a single node.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the process/node",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "The status information",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 76,
            "description": "Purges all statuses from storage.",
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 92,
            "description": "This function should only be called once at startup.  It is responsible for\nsetting up the collection and ensuring that the TTL index is configured\ncorrectly based on the the executing processes configuration.  <b>NOTE:</b>\nThe collection only supports one TTL value. The last process to startup and\nconfigure the index will win.  Please be careful to ensure that all PB\nprocesses/nodes have the same registry.update_interval value.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 135,
            "description": "Should be called during shutdown.  It is responsible for removing the\nprocess/node from the registry.",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 34,
            "description": "The Redis DB used for storage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "REGISTRY_DB",
            "type": "{Integer}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 42,
            "description": "The character used to separate the registry key prefix from the unique value\nthat identifies the process/node.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "SEP",
            "type": "{String}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 51,
            "description": "The Redis client used to connect to the service registry",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "CLIENT",
            "type": "{Integer}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 59,
            "description": "Retrieves the entire cluster status as an array of status objects.  The '_id'\nproperty uniquely identifies each process/node.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 93,
            "description": "Updates the status of a single node.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the process/node",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "The status information",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 111,
            "description": "Purges all statuses from storage.",
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 128,
            "description": "This function should only be called once at startup.  It is responsible for\ncreating the Redis client that connects to the service registry.  It also\nensures the proper Redis DB is selected.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 142,
            "description": "Should be called during shutdown.  It is responsible for removing the\nprocess/node from the registry.",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 160,
            "description": "Creates the cache key used to store the status update",
            "static": 1,
            "itemtype": "method",
            "name": "getKey",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cache key to be used for storing the update",
                "type": "String"
            },
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 171,
            "description": "Creates the glob pattern to be used to find service registry keys",
            "static": 1,
            "itemtype": "method",
            "name": "getPattern",
            "return": {
                "description": "The glob patern to be used to find all status updates",
                "type": "String"
            },
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 33,
            "description": "The instance of the RegistrationProvider interface to use as the storage\nprovider.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "PROVIDER",
            "type": "{RedisRegistrationProvider|MongoRegistrationProvider}",
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 42,
            "description": "The default set of functions that gather the default set of information.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "ITEM_CALLBACKS",
            "type": "{Object}",
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 100,
            "description": "The handle to the interval that is set to ensure that updates are regularly\nsent to the storage provider.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "TIMER_HANDLE",
            "type": "{Integer}",
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 109,
            "description": "Retrieves the most recent status from the entire cluster.",
            "itemtype": "method",
            "name": "getClusterStatus",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 118,
            "description": "Removes all entries from the server registry",
            "static": 1,
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 128,
            "description": "Should only be called once at startup.  The function verifies that the\nregistry is enabled and initializes the correct storage provider.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 171,
            "description": "Called during shutdown.  The function is responsible for clearing any\nscheduled updates and shutting down the storage provider.",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 190,
            "description": "Registers a function to be called on every status update.  The function\nshould take one parameter: a callback function that accepts two parameters,\nthe first being an error if it occurred and the second being the current\nvalue for the information requested.",
            "static": 1,
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "name",
                    "description": "The name and/or description of the information being\ngathered",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "function to be called to gather the data.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if the function is successfully registered, FALSE if not.",
                "type": "Boolean"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 211,
            "description": "Performs the request for information and persists it through the storage\nprovider.",
            "static": 1,
            "itemtype": "method",
            "name": "doRegistration",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 251,
            "description": "Generates the unique key for the PB process/node.",
            "static": 1,
            "itemtype": "method",
            "name": "generateKey",
            "return": {
                "description": "The unique identifier",
                "type": "String"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 261,
            "description": "Retrieves the first IP address found for the node.",
            "static": 1,
            "itemtype": "method",
            "name": "getIp",
            "return": {
                "description": "The first IP address found for the node",
                "type": "String"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\settings.js",
            "line": 18,
            "description": "SettingServiceFactory - Creates a service that will provide access to settings *",
            "class": "CommentService",
            "module": "Session"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 35,
            "description": "Retrieves the template for comments",
            "itemtype": "method",
            "name": "getCommentsTemplates",
            "params": [
                {
                    "name": "contentSettings",
                    "description": "The content settings to use with retrieval",
                    "type": "Object"
                },
                {
                    "name": "output",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 59,
            "description": "Retrieves the necessary user information for a commenter",
            "itemtype": "method",
            "name": "getCommentingUser",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\media.js",
            "line": 18,
            "description": "TODO: add options like sizing\nTODO: move hard coded HTML to template",
            "class": "MediaService",
            "module": "Services"
        },
        {
            "file": "include\\theme\\media.js",
            "line": 33,
            "description": "Retrieves the correct embed HTML for a media object",
            "itemtype": "method",
            "name": "getMediaEmbed",
            "params": [
                {
                    "name": "mediaObject",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\media.js",
            "line": 68,
            "description": "Gets the proper CSS style for a media object",
            "itemtype": "method",
            "name": "getMediaStyleString",
            "params": [
                {
                    "name": "template",
                    "description": "Media embed HTML template",
                    "type": "String"
                },
                {
                    "name": "styleString",
                    "description": "The style string from the article layout's media directive",
                    "type": "String"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 31,
            "description": "Retrieves the data needed for the top menu",
            "itemtype": "method",
            "name": "getTopMenu",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "localizationService",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 67,
            "description": "Retrieves the information needed to draw account buttons",
            "itemtype": "method",
            "name": "getAccountButtons",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "ls",
                    "description": "The localization service",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 132,
            "description": "Returns a bootstrap ready ul list for a nav element",
            "itemtype": "method",
            "name": "getBootstrapNav",
            "params": [
                {
                    "name": "navigation",
                    "description": "Navigation object",
                    "type": "Object"
                },
                {
                    "name": "accountButtons",
                    "description": "Account buttons object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 34,
            "description": "Validates an email address",
            "itemtype": "method",
            "name": "validateEmail",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 49,
            "description": "Validates a version number",
            "itemtype": "method",
            "name": "validateVersionNum",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 64,
            "description": "Validates an URL",
            "itemtype": "method",
            "name": "validateUrl",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 79,
            "description": "Validates a file name",
            "itemtype": "method",
            "name": "validateSafeFileName",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 94,
            "description": "Validates a string",
            "itemtype": "method",
            "name": "validateStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 108,
            "description": "Validates a string is not empty",
            "itemtype": "method",
            "name": "validateNonEmptyStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 122,
            "description": "Validates an array",
            "itemtype": "method",
            "name": "validateArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 136,
            "description": "Validates an object",
            "itemtype": "method",
            "name": "validateObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\access_management.js",
            "line": 38,
            "description": "Retrieves the localized names of access levels",
            "itemtype": "method",
            "name": "getRoleNames",
            "params": [
                {
                    "name": "ls",
                    "description": "The localization service",
                    "type": "Object"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 62,
            "description": "Returns the constant name of an access level number",
            "itemtype": "method",
            "name": "getRoleName",
            "params": [
                {
                    "name": "accessLevel",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 107,
            "description": "Check to see if a user meets security requirements",
            "itemtype": "method",
            "name": "isAuthorized",
            "params": [
                {
                    "name": "session",
                    "description": "[description]",
                    "type": "Object"
                },
                {
                    "name": "requirements",
                    "description": "Object containing access requirements",
                    "type": "Object"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 134,
            "description": "Check to see if a session is authentic",
            "itemtype": "method",
            "name": "isAuthenticated",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 149,
            "description": "One way encrypt a string",
            "itemtype": "method",
            "name": "encrypt",
            "params": [
                {
                    "name": "valString!~YUIDOC_LINE~!#return",
                    "description": "{String} Encrypted string",
                    "type": "String"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 165,
            "description": "Retrive the admin navigation hierarchy",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "activeMenuItems",
                    "description": "Array of nav item names that are active",
                    "type": "Array"
                },
                {
                    "name": "ls",
                    "description": "Localization service",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Admin navigation",
                "type": "Object"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\client_js.js",
            "line": 27,
            "description": "Creates a basic AngularJS controller with a repeat directive for templatizing",
            "itemtype": "method",
            "name": "getAngularController",
            "params": [
                {
                    "name": "objects",
                    "description": "Object to be passed into AngularJS scope",
                    "type": "Object"
                },
                {
                    "name": "modules",
                    "description": "Array of AngularJS module names",
                    "type": "Array"
                },
                {
                    "name": "directiveJS",
                    "description": "JavaScript to run after on-finish-render directive",
                    "type": "String"
                }
            ],
            "class": "ClientJS",
            "module": "Services"
        },
        {
            "file": "include\\client_js.js",
            "line": 66,
            "description": "Creates a JS tag that loads the specified url",
            "itemtype": "method",
            "name": "includeJS",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ClientJS",
            "module": "Services"
        },
        {
            "file": "include\\client_js.js",
            "line": 76,
            "description": "Puts the supplied JS code string into a script tag",
            "itemtype": "method",
            "name": "getJSTag",
            "params": [
                {
                    "name": "jsCode",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ClientJS",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 20,
            "description": "Default configuration.  The settings here should be overriden by taking the\nexample file \"sample.config.json\" and modifying it to override the properties\nshown below.  In order to properly override the default configuration do the\nfollowing:\n1) copy \"sample.config.json\" to \"/etc/pencilblue/config.json\"\n2) Override the properties as desired.\n3) Add any custom properties you wish to provide for your specific purposes.",
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 201,
            "description": "Loads an external configuration.\nNOTE: This should only be called once by the core code at startup.  Calling\nthis function after the server starts may cause unintended behavior across\nthe system.",
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 27,
            "description": "Retrieves the content settings",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 43,
            "description": "Retrieves the default content settings from installation",
            "itemtype": "method",
            "name": "getDefaultSettings",
            "return": {
                "description": "Content settings",
                "type": "Object"
            },
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 67,
            "description": "Returns a formatted time stamp from a date",
            "itemtype": "method",
            "name": "getTimestampTextFromSettings",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                },
                {
                    "name": "contentSettings",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 31,
            "description": "Retrieves a template and sends it as an email",
            "itemtype": "method",
            "name": "sendFromTemplate",
            "params": [
                {
                    "name": "options",
                    "description": "Object containing the email settings and template name",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 53,
            "description": "Sends an email",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "from",
                    "description": "From name",
                    "type": "String"
                },
                {
                    "name": "to",
                    "description": "To email address",
                    "type": "String"
                },
                {
                    "name": "subject",
                    "description": "Email subject",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Email content",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 107,
            "description": "Retrieves the email settings",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 120,
            "description": "Retrieves the default email settings from installation",
            "itemtype": "method",
            "name": "getDefaultSettings",
            "return": {
                "description": "Email settings",
                "type": "Object"
            },
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 38,
            "description": "Localizes a string by searching for keys within the template and replacing\nthem with the specified values.",
            "itemtype": "method",
            "name": "localize",
            "params": [
                {
                    "name": "sets",
                    "description": "The localizations sets to search in",
                    "type": "Array"
                },
                {
                    "name": "text",
                    "description": "The text to localize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The text where keys have been replaced with translated values",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 72,
            "description": "Translates a single key.  The key should not be enclosed by the special '^'\ncharacter.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "defaultVal",
                    "description": "The default value to return if the value can't be found",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 112,
            "description": "Determines the best language to send a user based on the 'accept-language'\nheader in the request",
            "itemtype": "method",
            "name": "best",
            "params": [
                {
                    "name": "request",
                    "description": "The request object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Locale for the request",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 135,
            "description": "Initializes the location.  Loads all language packs into memory for fast\nretrieval and sets the supported locales for determining what language to\nsend the user based on their list of acceptable languages.",
            "itemtype": "method",
            "name": "init",
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\requirements.js",
            "line": 1,
            "description": "Requirements - Responsible for declaring all of the system types and modules\nneeded to construct the system API object.",
            "copyright": "PencilBlue, all rights reserved.",
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 30,
            "description": "Takes an array of promises and waits for each to be resolved before calling\nback.",
            "static": 1,
            "itemtype": "method",
            "name": "onPromisesOk",
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "A",
                    "description": "callback that takes zero arguments.  It is executed when\nall promises have been resolved.",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 55,
            "description": "Clones an object by serializing it and then re-parsing it.\nWARNING: Objects with circular dependencies will cause an error to be thrown.",
            "static": 1,
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "object",
                    "description": "The object to clone",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Cloned object",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 67,
            "description": "Performs a deep merge and returns the result.  <b>NOTE:</b> DO NOT ATTEMPT\nTO MERGE PROPERTIES THAT REFERENCE OTHER PROPERTIES.  This could have\nunintended side-effects as well as cause errors due to circular dependencies.",
            "static": 1,
            "itemtype": "method",
            "name": "deepMerge",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 81,
            "description": "Checks if the supplied object is an errof. If the object is an error the\nfunction will throw the error.",
            "static": 1,
            "itemtype": "method",
            "name": "ane",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check",
                    "type": "Object"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 94,
            "description": "Escapes a regular expression.",
            "static": 1,
            "itemtype": "method",
            "name": "escapeRegExp",
            "params": [
                {
                    "name": "The",
                    "description": "expression to escape",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Escaped regular expression.",
                "type": "String"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 108,
            "description": "Merges the properties from the first parameter into the second. This modifies\nthe second parameter instead of creating a new object.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 122,
            "description": "Creates an object that has both the properties of \"a\" and \"b\".  When both\nobjects have a property with the same name, \"b\"'s value will be preserved.",
            "static": 1,
            "itemtype": "method",
            "name": "union",
            "return": {
                "description": "The union of properties from both a and b.",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 136,
            "description": "Creates a set of tasks that can be executed by the \"async\" module.",
            "static": 1,
            "itemtype": "method",
            "name": "getTasks",
            "params": [
                {
                    "name": "iterable",
                    "description": "The array of items to build tasks for",
                    "type": "Array"
                },
                {
                    "name": "getTaskFunction",
                    "description": "The function that creates and returns the\ntask to be executed.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<code>\nvar items = ['apple', 'orange'];\nvar tasks = pb.utils.getTasks(items, function(items, i) {\n    return function(callback) {\n        console.log(items[i]);\n        callback(null, null);\n    };\n});\nasync.series(tasks, pb.utils.cb);\n<code>"
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 163,
            "description": "Hashes an array",
            "static": 1,
            "itemtype": "method",
            "name": "arrayToHash",
            "params": [
                {
                    "name": "array",
                    "description": "The array to hash",
                    "type": "Array"
                },
                {
                    "name": "defaultVal",
                    "description": "Default value if the hashing fails",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Hash",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 189,
            "description": "Converts a hash to an array. When provided, the hashKeyProp will be the\nproperty name of each object in the array that holds the hash key.",
            "static": 1,
            "itemtype": "method",
            "name": "hashToArray",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to convert",
                    "type": "Object"
                },
                {
                    "name": "hashKeyProp",
                    "description": "The property name that will hold the hash key.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of each property value in the hash.",
                "type": "Array"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 214,
            "description": "Inverts a hash",
            "static": 1,
            "itemtype": "method",
            "name": "invertHash",
            "params": [
                {
                    "name": "obj",
                    "description": "Hash object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Inverted hash",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 235,
            "description": "Clones an array",
            "static": 1,
            "itemtype": "method",
            "name": "copyArray",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Cloned array",
                "type": "Array"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 254,
            "description": "Pushes all of one array's values into another",
            "static": 1,
            "itemtype": "method",
            "name": "arrayPushAll",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 271,
            "description": "Empty callback function just used as a place holder if a callback is required\nand the result is not needed.",
            "static": 1,
            "itemtype": "method",
            "name": "cb",
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 281,
            "description": "Creates a unique Id",
            "static": 1,
            "itemtype": "method",
            "name": "uniqueId",
            "return": {
                "description": "Unique Id Object",
                "type": "ObjectID"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 291,
            "description": "Tests if a value is an object",
            "static": 1,
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 302,
            "description": "Tests if a value is an string",
            "static": 1,
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 313,
            "description": "Tests if a value is a function",
            "static": 1,
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 324,
            "description": "Tests if a value is a boolean",
            "static": 1,
            "itemtype": "method",
            "name": "isBoolean",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 335,
            "description": "Retrieves the subdirectories of a path",
            "static": 1,
            "itemtype": "method",
            "name": "getDirectories",
            "params": [
                {
                    "name": "dirPath",
                    "description": "The starting path",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 372,
            "description": "Provides typical conversions for time",
            "itemtype": "property",
            "name": "TIME",
            "type": "{Object}",
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 1,
            "description": "GoogleAnalytics - A sample for exemplifying what the main module file should\nlook like.",
            "author": "Brian Hyder <brian@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 10,
            "description": "Called when the application is being installed for the first time.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 20,
            "description": "Called when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 32,
            "description": "Called when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 56,
            "description": "Called when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 1,
            "description": "Portfolio - A portfolio site theme for PencilBlue",
            "author": "Blake Callens <blake@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 9,
            "description": "Called when the application is being installed for the first time.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 19,
            "description": "Called when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 31,
            "description": "Called when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 52,
            "description": "Called when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\services\\text_creator.js",
            "line": 1,
            "description": "TextCreaterService - An example of a service that generates random text.",
            "author": "Brian Hyder <brian@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC.  All Rights Reserved",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\services\\text_creator.js",
            "line": 12,
            "description": "This function is called when the service is being setup by the system.  It is \nresponsible for any setup that is needed when first created.  The services \nare all instantiated at once and are not added to the platform untill all \ninitialization is complete.  Relying on other plugin services in the \ninitialization could result in failure.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that should provide one argument: cb(error) or cb(null) \nif initialization proceeded successfully."
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\services\\text_creator.js",
            "line": 27,
            "description": "Generates a random string of 5 characters.  The service functions can return \nvalues or use call backs.  There is no standard for how a service should \nprovide functionality.  The only requirement is that an instance be provided \nas the exported object with the understanding that services should be \nstateless.",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 1,
            "description": "SamplePlugin - A sample for exemplifying what the main module file should \nlook like.",
            "author": "Brian Hyder <brian@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 10,
            "description": "Called when the application is being installed for the first time.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).  \nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 20,
            "description": "Called when the application is uninstalling this plugin.  The plugin should \nmake every effort to clean up any plugin-specific DB items or any in function \noverrides it makes.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).  \nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 32,
            "description": "Called when the application is starting up. The function is also called at \nthe end of a successful install. It is guaranteed that all core PB services \nwill be available including access to the core DB.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).  \nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 44,
            "description": "Called when the application is gracefully shutting down.  No guarantees are \nprovided for how much time will be provided the plugin to shut down.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).  \nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 31,
            "description": "To be called when the configuration is loaded.  The function is responsible\nfor triggered the startup of the HTTP connection listener as well as start a\nconnection pool to the core DB.",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 52,
            "description": "Initializes the request handler.  This causes all system routes to be\nregistered.",
            "static": 1,
            "itemtype": "method",
            "name": "initRequestHandler",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 64,
            "description": "Initializes the installed plugins.",
            "static": 1,
            "itemtype": "method",
            "name": "initPlugins",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 74,
            "description": "Attempts to initialize a connection pool to the core database",
            "static": 1,
            "itemtype": "method",
            "name": "initDBConnections",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 97,
            "description": "Initializes the HTTP server(s).  When SSL is enabled two servers are created.\nOne to handle incoming HTTP traffic and one to handle HTTPS traffic.",
            "static": 1,
            "itemtype": "method",
            "name": "initServer",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 137,
            "description": "The function that handles normal server traffic.  The function ensures that\nthe incoming request is delegated out appropriately.  When SSL Termination\nis in use if the 'x-forwarded-proto' header does equal 'https' then the\nrequest is delegated to the handoff function so the request can be\nredirected appropriately.",
            "static": 1,
            "itemtype": "method",
            "name": "onHttpConnect",
            "params": [
                {
                    "name": "req",
                    "description": "The incoming request",
                    "type": "Request"
                },
                {
                    "name": "resp",
                    "description": "The outgoing response",
                    "type": "Response"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 168,
            "description": "Handles traffic that comes in for HTTP when SSL is enabled.  The request is\nredirected to the appropriately protected HTTPS url.",
            "static": 1,
            "itemtype": "method",
            "name": "onHttpConnectForHandoff",
            "params": [
                {
                    "name": "req",
                    "description": "The incoming request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "The outgoing response",
                    "type": "Response"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 192,
            "description": "Initializes server registration.",
            "static": 1,
            "itemtype": "method",
            "name": "initServerRegistration",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\system\\server_registration.js:190"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\system\\server_registration.js:251"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\system\\server_registration.js:261"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\localization.js:38"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\localization.js:72"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\localization.js:112"
        },
        {
            "message": "unknown tag: copyright",
            "line": " include\\requirements.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\ga\\ga.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\portfolio\\portfolio.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\sample\\services\\text_creator.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\sample\\sample.js:1"
        },
        {
            "message": "Missing item type",
            "line": " include\\dao\\cache.js:45"
        },
        {
            "message": "Missing item type\nLegacy variable used to reference the main database\nTODO Remove this once all references are converted over.",
            "line": " include\\dao\\db_manager.js:23"
        },
        {
            "message": "Missing item type\nKeeps track of all active DBs with active connection pools.",
            "line": " include\\dao\\db_manager.js:39"
        },
        {
            "message": "Missing item type\nResponsible for processing a single req by delegating it to the correct controllers",
            "line": " include\\http\\request_handler.js:18"
        },
        {
            "message": "Missing item type\nProcesses a request:\n<ol>\n\t<li>Initialize localization</li>\n\t<li>if Public Route:\n\t\t<ol>\n\t\t\t<li>If Valid Content\n\t\t\t\t<ol><li>Serve Public Content</li></ol>\n\t\t\t</li>\n\t\t\t<li>Else Serve 404</li>\n\t\t</ol>\n\t</li>\n\t<li>Else Parse Cookies</li>\n\t<li>Open/Create a session</li>\n\t<li>Get Route</li>\n\n</ol>",
            "line": " include\\http\\request_handler.js:1091"
        },
        {
            "message": "Missing item type\nTODO Church this up a bit.  Make it a template and controller like 404.\nTODO install an encoder entity since node prints out function names in angle brackets",
            "line": " include\\http\\request_handler.js:1210"
        },
        {
            "message": "Missing item type\nReplaces an article or page layout's ^media_display^ tag with a media embed",
            "line": " include\\service\\entities\\article_service.js:433"
        },
        {
            "message": "Missing item type\nInitializes a plugin during startup or just after a plugin has been installed.",
            "line": " include\\service\\entities\\plugin_service.js:946"
        },
        {
            "message": "Missing item type",
            "line": " include\\service\\entities\\plugin_service.js:1201"
        },
        {
            "message": "Missing item type\nConstructs the path to a specific plugin's details.json file",
            "line": " include\\service\\entities\\plugin_service.js:1208"
        },
        {
            "message": "Missing item type\nAttempts to load and parse the details.json file for a plugin.",
            "line": " include\\service\\entities\\plugin_service.js:1216"
        },
        {
            "message": "Missing item type\nValidates a plugin's details.json file.",
            "line": " include\\service\\entities\\plugin_service.js:1241"
        },
        {
            "message": "Missing item type\nValidates the path to the plugin's icon file.  The path is considered valid\nif the path to a valid file.  The path may be absolute or relative to the\nplugin's public directory.",
            "line": " include\\service\\entities\\plugin_service.js:1471"
        },
        {
            "message": "Missing item type\nValidates the path of a main module file.  The path is considered valid if\nthe path points to JS file.  The path may be absolute or relative to the\nspecific plugin directory.",
            "line": " include\\service\\entities\\plugin_service.js:1492"
        },
        {
            "message": "Missing item type\nValidates a setting from a details.json file.",
            "line": " include\\service\\entities\\plugin_service.js:1505"
        },
        {
            "message": "Missing item type\nValidates a details.json file's setting value.  The value is required to be a\nstring or a number.  Null, undefined, Arrays, Objects, and prototypes are NOT\nallowed.",
            "line": " include\\service\\entities\\plugin_service.js:1540"
        },
        {
            "message": "Missing item type\nRetrieves all services (initialized).  The services are provided in the\ncallback.",
            "line": " include\\service\\entities\\plugin_service.js:1552"
        },
        {
            "message": "Missing item type\nLoads a plugin service and initializes it.  The service is required to\nimplement an \"init\" function. The service is then provided as a parameter in\nthe callback.",
            "line": " include\\service\\entities\\plugin_service.js:1592"
        },
        {
            "message": "Missing item type\nDerives the name of a plugin service instance.  The function attempts to get\nthe name of the service by looking to see if the service has implemented the\ngetName function.  If it has not then the service name is set to be the file\nname minus any extension.",
            "line": " include\\service\\entities\\plugin_service.js:1688"
        },
        {
            "message": "Missing item type\nService for managing the site's navigation",
            "line": " include\\service\\entities\\section_service.js:18"
        },
        {
            "message": "Missing item type\nThe mongo collection that stores the sessions",
            "line": " include\\session\\storage\\mongo_session_store.js:29"
        },
        {
            "message": "Missing item type\nResponsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "line": " include\\session\\storage\\mongo_session_store.js:135"
        },
        {
            "message": "Missing item type\nResponsable for ensuring that the mechanism that expires sessions becomes\nactive.",
            "line": " include\\session\\storage\\mongo_session_store.js:146"
        },
        {
            "message": "Missing item type\nThe prefix to prepend to the session ID in order to construct a cache key",
            "line": " include\\session\\storage\\redis_session_store.js:29"
        },
        {
            "message": "Missing item type\nConstructs a session cache key provided a session id.",
            "line": " include\\session\\storage\\redis_session_store.js:89"
        },
        {
            "message": "Missing item type\nResponsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "line": " include\\session\\storage\\redis_session_store.js:98"
        },
        {
            "message": "Missing item type\nRepsonsible for ensuring that the mechanism that expires sessions becomes\nactive.",
            "line": " include\\session\\storage\\redis_session_store.js:107"
        },
        {
            "message": "Missing item type\nShuts down the sesison handler and the associated session store",
            "line": " include\\session\\session.js:317"
        },
        {
            "message": "Missing item type\nSettingServiceFactory - Creates a service that will provide access to settings *",
            "line": " include\\system\\settings.js:18"
        },
        {
            "message": "Missing item type\nTODO: add options like sizing\nTODO: move hard coded HTML to template",
            "line": " include\\theme\\media.js:18"
        },
        {
            "message": "Missing item type\nDefault configuration.  The settings here should be overriden by taking the\nexample file \"sample.config.json\" and modifying it to override the properties\nshown below.  In order to properly override the default configuration do the\nfollowing:\n1) copy \"sample.config.json\" to \"/etc/pencilblue/config.json\"\n2) Override the properties as desired.\n3) Add any custom properties you wish to provide for your specific purposes.",
            "line": " include\\config.js:20"
        },
        {
            "message": "Missing item type\nLoads an external configuration.\nNOTE: This should only be called once by the core code at startup.  Calling\nthis function after the server starts may cause unintended behavior across\nthe system.",
            "line": " include\\config.js:201"
        },
        {
            "message": "Missing item type\nRequirements - Responsible for declaring all of the system types and modules\nneeded to construct the system API object.",
            "line": " include\\requirements.js:1"
        },
        {
            "message": "Missing item type\nGoogleAnalytics - A sample for exemplifying what the main module file should\nlook like.",
            "line": " plugins\\ga\\ga.js:1"
        },
        {
            "message": "Missing item type\nCalled when the application is being installed for the first time.",
            "line": " plugins\\ga\\ga.js:10"
        },
        {
            "message": "Missing item type\nCalled when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "line": " plugins\\ga\\ga.js:20"
        },
        {
            "message": "Missing item type\nCalled when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "line": " plugins\\ga\\ga.js:32"
        },
        {
            "message": "Missing item type\nCalled when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "line": " plugins\\ga\\ga.js:56"
        },
        {
            "message": "Missing item type\nPortfolio - A portfolio site theme for PencilBlue",
            "line": " plugins\\portfolio\\portfolio.js:1"
        },
        {
            "message": "Missing item type\nCalled when the application is being installed for the first time.",
            "line": " plugins\\portfolio\\portfolio.js:9"
        },
        {
            "message": "Missing item type\nCalled when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "line": " plugins\\portfolio\\portfolio.js:19"
        },
        {
            "message": "Missing item type\nCalled when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "line": " plugins\\portfolio\\portfolio.js:31"
        },
        {
            "message": "Missing item type\nCalled when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "line": " plugins\\portfolio\\portfolio.js:52"
        },
        {
            "message": "Missing item type\nTextCreaterService - An example of a service that generates random text.",
            "line": " plugins\\sample\\services\\text_creator.js:1"
        },
        {
            "message": "Missing item type\nThis function is called when the service is being setup by the system.  It is \nresponsible for any setup that is needed when first created.  The services \nare all instantiated at once and are not added to the platform untill all \ninitialization is complete.  Relying on other plugin services in the \ninitialization could result in failure.",
            "line": " plugins\\sample\\services\\text_creator.js:12"
        },
        {
            "message": "Missing item type\nGenerates a random string of 5 characters.  The service functions can return \nvalues or use call backs.  There is no standard for how a service should \nprovide functionality.  The only requirement is that an instance be provided \nas the exported object with the understanding that services should be \nstateless.",
            "line": " plugins\\sample\\services\\text_creator.js:27"
        },
        {
            "message": "Missing item type\nSamplePlugin - A sample for exemplifying what the main module file should \nlook like.",
            "line": " plugins\\sample\\sample.js:1"
        },
        {
            "message": "Missing item type\nCalled when the application is being installed for the first time.",
            "line": " plugins\\sample\\sample.js:10"
        },
        {
            "message": "Missing item type\nCalled when the application is uninstalling this plugin.  The plugin should \nmake every effort to clean up any plugin-specific DB items or any in function \noverrides it makes.",
            "line": " plugins\\sample\\sample.js:20"
        },
        {
            "message": "Missing item type\nCalled when the application is starting up. The function is also called at \nthe end of a successful install. It is guaranteed that all core PB services \nwill be available including access to the core DB.",
            "line": " plugins\\sample\\sample.js:32"
        },
        {
            "message": "Missing item type\nCalled when the application is gracefully shutting down.  No guarantees are \nprovided for how much time will be provided the plugin to shut down.",
            "line": " plugins\\sample\\sample.js:44"
        },
        {
            "message": "Missing item type\nTo be called when the configuration is loaded.  The function is responsible\nfor triggered the startup of the HTTP connection listener as well as start a\nconnection pool to the core DB.",
            "line": " pencilblue.js:31"
        }
    ]
}