{
    "project": {
        "name": "PencilBlue",
        "description": "PencilBlue: Full stack online publishing for Node.js",
        "version": "0.2.3",
        "url": "http://pencilblue.org/",
        "logo": "http://pencilblue.org/img/pb_logo.png"
    },
    "files": {
        "controllers\\actions\\admin\\content\\articles\\delete_article.js": {
            "name": "controllers\\actions\\admin\\content\\articles\\delete_article.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\articles\\edit_article.js": {
            "name": "controllers\\actions\\admin\\content\\articles\\edit_article.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\articles\\new_article.js": {
            "name": "controllers\\actions\\admin\\content\\articles\\new_article.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\comments\\delete_comment.js": {
            "name": "controllers\\actions\\admin\\content\\comments\\delete_comment.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\custom_objects\\delete_object.js": {
            "name": "controllers\\actions\\admin\\content\\custom_objects\\delete_object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\custom_objects\\delete_object_type.js": {
            "name": "controllers\\actions\\admin\\content\\custom_objects\\delete_object_type.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\custom_objects\\edit_object.js": {
            "name": "controllers\\actions\\admin\\content\\custom_objects\\edit_object.js",
            "modules": {},
            "classes": {
                "EditObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\custom_objects\\edit_object_type.js": {
            "name": "controllers\\actions\\admin\\content\\custom_objects\\edit_object_type.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\custom_objects\\new_object.js": {
            "name": "controllers\\actions\\admin\\content\\custom_objects\\new_object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\custom_objects\\new_object_type.js": {
            "name": "controllers\\actions\\admin\\content\\custom_objects\\new_object_type.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\custom_objects\\sort_objects.js": {
            "name": "controllers\\actions\\admin\\content\\custom_objects\\sort_objects.js",
            "modules": {},
            "classes": {
                "SortObjectsPostController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\media\\add_media.js": {
            "name": "controllers\\actions\\admin\\content\\media\\add_media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\media\\delete_media.js": {
            "name": "controllers\\actions\\admin\\content\\media\\delete_media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\media\\edit_media.js": {
            "name": "controllers\\actions\\admin\\content\\media\\edit_media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\media\\inline_add_media.js": {
            "name": "controllers\\actions\\admin\\content\\media\\inline_add_media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\media\\upload_media.js": {
            "name": "controllers\\actions\\admin\\content\\media\\upload_media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\pages\\delete_page.js": {
            "name": "controllers\\actions\\admin\\content\\pages\\delete_page.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\pages\\edit_page.js": {
            "name": "controllers\\actions\\admin\\content\\pages\\edit_page.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\pages\\new_page.js": {
            "name": "controllers\\actions\\admin\\content\\pages\\new_page.js",
            "modules": {},
            "classes": {
                "NewPagePostController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\sections\\delete_section.js": {
            "name": "controllers\\actions\\admin\\content\\sections\\delete_section.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\sections\\edit_section.js": {
            "name": "controllers\\actions\\admin\\content\\sections\\edit_section.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\sections\\new_section.js": {
            "name": "controllers\\actions\\admin\\content\\sections\\new_section.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\sections\\section_map.js": {
            "name": "controllers\\actions\\admin\\content\\sections\\section_map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\topics\\delete_topic.js": {
            "name": "controllers\\actions\\admin\\content\\topics\\delete_topic.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\topics\\import_topics.js": {
            "name": "controllers\\actions\\admin\\content\\topics\\import_topics.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\content\\topics\\new_topic.js": {
            "name": "controllers\\actions\\admin\\content\\topics\\new_topic.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\site_settings\\configuration.js": {
            "name": "controllers\\actions\\admin\\site_settings\\configuration.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\site_settings\\content.js": {
            "name": "controllers\\actions\\admin\\site_settings\\content.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\site_settings\\email.js": {
            "name": "controllers\\actions\\admin\\site_settings\\email.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\site_settings\\libraries.js": {
            "name": "controllers\\actions\\admin\\site_settings\\libraries.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\themes\\index.js": {
            "name": "controllers\\actions\\admin\\themes\\index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\users\\change_password.js": {
            "name": "controllers\\actions\\admin\\users\\change_password.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\users\\delete_unverified_user.js": {
            "name": "controllers\\actions\\admin\\users\\delete_unverified_user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\users\\delete_user.js": {
            "name": "controllers\\actions\\admin\\users\\delete_user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\users\\edit_user.js": {
            "name": "controllers\\actions\\admin\\users\\edit_user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\users\\new_user.js": {
            "name": "controllers\\actions\\admin\\users\\new_user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\users\\send_password_reset.js": {
            "name": "controllers\\actions\\admin\\users\\send_password_reset.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\admin\\users\\verify_user.js": {
            "name": "controllers\\actions\\admin\\users\\verify_user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\user\\manage_account\\change_password.js": {
            "name": "controllers\\actions\\user\\manage_account\\change_password.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\user\\manage_account\\profile.js": {
            "name": "controllers\\actions\\user\\manage_account\\profile.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\user\\resend_verification.js": {
            "name": "controllers\\actions\\user\\resend_verification.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\user\\reset_password.js": {
            "name": "controllers\\actions\\user\\reset_password.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\user\\sign_up.js": {
            "name": "controllers\\actions\\user\\sign_up.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\user\\verify_email.js": {
            "name": "controllers\\actions\\user\\verify_email.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\forgot_password.js": {
            "name": "controllers\\actions\\forgot_password.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\login.js": {
            "name": "controllers\\actions\\login.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\logout.js": {
            "name": "controllers\\actions\\logout.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\actions\\setup.js": {
            "name": "controllers\\actions\\setup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\articles\\edit_article.js": {
            "name": "controllers\\admin\\content\\articles\\edit_article.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\articles\\manage_articles.js": {
            "name": "controllers\\admin\\content\\articles\\manage_articles.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\articles\\new_article.js": {
            "name": "controllers\\admin\\content\\articles\\new_article.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\comments\\manage_comments.js": {
            "name": "controllers\\admin\\content\\comments\\manage_comments.js",
            "modules": {},
            "classes": {
                "ManageComments": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\custom_objects\\edit_object.js": {
            "name": "controllers\\admin\\content\\custom_objects\\edit_object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\custom_objects\\edit_object_type.js": {
            "name": "controllers\\admin\\content\\custom_objects\\edit_object_type.js",
            "modules": {},
            "classes": {
                "EditObjectType": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\custom_objects\\manage_object_types.js": {
            "name": "controllers\\admin\\content\\custom_objects\\manage_object_types.js",
            "modules": {},
            "classes": {
                "ManageObjectTypes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\custom_objects\\manage_objects.js": {
            "name": "controllers\\admin\\content\\custom_objects\\manage_objects.js",
            "modules": {},
            "classes": {
                "ManageObjects": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\custom_objects\\new_object.js": {
            "name": "controllers\\admin\\content\\custom_objects\\new_object.js",
            "modules": {},
            "classes": {
                "NewObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\custom_objects\\new_object_type.js": {
            "name": "controllers\\admin\\content\\custom_objects\\new_object_type.js",
            "modules": {},
            "classes": {
                "NewObjectType": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\custom_objects\\sort_objects.js": {
            "name": "controllers\\admin\\content\\custom_objects\\sort_objects.js",
            "modules": {},
            "classes": {
                "SortObjects": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\media\\add_media.js": {
            "name": "controllers\\admin\\content\\media\\add_media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\media\\edit_media.js": {
            "name": "controllers\\admin\\content\\media\\edit_media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\media\\manage_media.js": {
            "name": "controllers\\admin\\content\\media\\manage_media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\pages\\edit_page.js": {
            "name": "controllers\\admin\\content\\pages\\edit_page.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\pages\\manage_pages.js": {
            "name": "controllers\\admin\\content\\pages\\manage_pages.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\pages\\new_page.js": {
            "name": "controllers\\admin\\content\\pages\\new_page.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\sections\\edit_section.js": {
            "name": "controllers\\admin\\content\\sections\\edit_section.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\sections\\new_section.js": {
            "name": "controllers\\admin\\content\\sections\\new_section.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\sections\\section_map.js": {
            "name": "controllers\\admin\\content\\sections\\section_map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\topics\\import_topics.js": {
            "name": "controllers\\admin\\content\\topics\\import_topics.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\topics\\manage_topics.js": {
            "name": "controllers\\admin\\content\\topics\\manage_topics.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\topics\\new_topic.js": {
            "name": "controllers\\admin\\content\\topics\\new_topic.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\articles.js": {
            "name": "controllers\\admin\\content\\articles.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\comments.js": {
            "name": "controllers\\admin\\content\\comments.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\custom_objects.js": {
            "name": "controllers\\admin\\content\\custom_objects.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\media.js": {
            "name": "controllers\\admin\\content\\media.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\pages.js": {
            "name": "controllers\\admin\\content\\pages.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\sections.js": {
            "name": "controllers\\admin\\content\\sections.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\content\\topics.js": {
            "name": "controllers\\admin\\content\\topics.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\plugins\\details.js": {
            "name": "controllers\\admin\\plugins\\details.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\plugins\\index.js": {
            "name": "controllers\\admin\\plugins\\index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\plugins\\settings.js": {
            "name": "controllers\\admin\\plugins\\settings.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\site_settings\\configuration.js": {
            "name": "controllers\\admin\\site_settings\\configuration.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\site_settings\\content.js": {
            "name": "controllers\\admin\\site_settings\\content.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\site_settings\\email.js": {
            "name": "controllers\\admin\\site_settings\\email.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\site_settings\\libraries.js": {
            "name": "controllers\\admin\\site_settings\\libraries.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\themes\\index.js": {
            "name": "controllers\\admin\\themes\\index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\themes\\settings.js": {
            "name": "controllers\\admin\\themes\\settings.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\users\\change_password.js": {
            "name": "controllers\\admin\\users\\change_password.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\users\\edit_user.js": {
            "name": "controllers\\admin\\users\\edit_user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\users\\manage_users.js": {
            "name": "controllers\\admin\\users\\manage_users.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\users\\new_user.js": {
            "name": "controllers\\admin\\users\\new_user.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\users\\permissions.js": {
            "name": "controllers\\admin\\users\\permissions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\users\\unverified_users.js": {
            "name": "controllers\\admin\\users\\unverified_users.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\index.js": {
            "name": "controllers\\admin\\index.js",
            "modules": {},
            "classes": {
                "AdminIndexController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\login.js": {
            "name": "controllers\\admin\\login.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\site_settings.js": {
            "name": "controllers\\admin\\site_settings.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\admin\\users.js": {
            "name": "controllers\\admin\\users.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\admin\\content\\articles\\save_draft.js": {
            "name": "controllers\\api\\admin\\content\\articles\\save_draft.js",
            "modules": {},
            "classes": {
                "SaveArticleDraft": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\admin\\content\\pages\\save_draft.js": {
            "name": "controllers\\api\\admin\\content\\pages\\save_draft.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\admin\\system\\cluster_api.js": {
            "name": "controllers\\api\\admin\\system\\cluster_api.js",
            "modules": {},
            "classes": {
                "ClusterApiController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\admin\\url_api.js": {
            "name": "controllers\\api\\admin\\url_api.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\comments\\new_comment.js": {
            "name": "controllers\\api\\comments\\new_comment.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\content\\get_articles.js": {
            "name": "controllers\\api\\content\\get_articles.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\content\\get_media_embed.js": {
            "name": "controllers\\api\\content\\get_media_embed.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\content\\search.js": {
            "name": "controllers\\api\\content\\search.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\custom_objects\\get_object_type_name_available.js": {
            "name": "controllers\\api\\custom_objects\\get_object_type_name_available.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\jobs\\job_api_controller.js": {
            "name": "controllers\\api\\jobs\\job_api_controller.js",
            "modules": {},
            "classes": {
                "JobApiController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\plugins\\plugin_api.js": {
            "name": "controllers\\api\\plugins\\plugin_api.js",
            "modules": {},
            "classes": {
                "PluginApi": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\user\\get_username_available.js": {
            "name": "controllers\\api\\user\\get_username_available.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\api\\api_action_controller.js": {
            "name": "controllers\\api\\api_action_controller.js",
            "modules": {},
            "classes": {
                "ApiActionController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\error\\404.js": {
            "name": "controllers\\error\\404.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\user\\change_password.js": {
            "name": "controllers\\user\\change_password.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\user\\login.js": {
            "name": "controllers\\user\\login.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\user\\manage_account.js": {
            "name": "controllers\\user\\manage_account.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\user\\resend_verification.js": {
            "name": "controllers\\user\\resend_verification.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\user\\sign_up.js": {
            "name": "controllers\\user\\sign_up.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\user\\verification_sent.js": {
            "name": "controllers\\user\\verification_sent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\article.js": {
            "name": "controllers\\article.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\base_controller.js": {
            "name": "controllers\\base_controller.js",
            "modules": {},
            "classes": {
                "BaseController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\delete_controller.js": {
            "name": "controllers\\delete_controller.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\feed.js": {
            "name": "controllers\\feed.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\form_controller.js": {
            "name": "controllers\\form_controller.js",
            "modules": {},
            "classes": {
                "FormController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\index.js": {
            "name": "controllers\\index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\page.js": {
            "name": "controllers\\page.js",
            "modules": {},
            "classes": {
                "PageController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\preview.js": {
            "name": "controllers\\preview.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\public.js": {
            "name": "controllers\\public.js",
            "modules": {},
            "classes": {
                "PluginPublicContentController": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "controllers\\section.js": {
            "name": "controllers\\section.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\setup.js": {
            "name": "controllers\\setup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "controllers\\sitemap.js": {
            "name": "controllers\\sitemap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\cache.js": {
            "name": "include\\dao\\cache.js",
            "modules": {},
            "classes": {
                "CacheFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\dao.js": {
            "name": "include\\dao\\dao.js",
            "modules": {
                "Database": 1
            },
            "classes": {
                "DAO": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\dao\\db_manager.js": {
            "name": "include\\dao\\db_manager.js",
            "modules": {},
            "classes": {
                "DBManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\error\\pb_error.js": {
            "name": "include\\error\\pb_error.js",
            "modules": {
                "ErrorSuccess": 1
            },
            "classes": {
                "PBError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\http\\request_handler.js": {
            "name": "include\\http\\request_handler.js",
            "modules": {},
            "classes": {
                "RequestHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\model\\create_document.js": {
            "name": "include\\model\\create_document.js",
            "modules": {
                "Model": 1
            },
            "classes": {
                "DocumentCreator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\admin\\admin_subnav_service.js": {
            "name": "include\\service\\admin\\admin_subnav_service.js",
            "modules": {
                "Admin": 1
            },
            "classes": {
                "AdminSubnavService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\article_service.js": {
            "name": "include\\service\\entities\\article_service.js",
            "modules": {
                "Entities": 1
            },
            "classes": {
                "ArticleService": 1,
                "MediaLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\custom_object_service.js": {
            "name": "include\\service\\entities\\custom_object_service.js",
            "modules": {},
            "classes": {
                "CustomObjectService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\job_service.js": {
            "name": "include\\service\\entities\\job_service.js",
            "modules": {},
            "classes": {
                "JobService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\media_service.js": {
            "name": "include\\service\\entities\\media_service.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\plugin_service.js": {
            "name": "include\\service\\entities\\plugin_service.js",
            "modules": {},
            "classes": {
                "PluginService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\section_service.js": {
            "name": "include\\service\\entities\\section_service.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\template_service.js": {
            "name": "include\\service\\entities\\template_service.js",
            "modules": {},
            "classes": {
                "TemplateService": 1,
                "TemplateValue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\url_service.js": {
            "name": "include\\service\\entities\\url_service.js",
            "modules": {},
            "classes": {
                "UrlService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\entities\\user_service.js": {
            "name": "include\\service\\entities\\user_service.js",
            "modules": {},
            "classes": {
                "UserService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\plugins\\plugin_available_job.js": {
            "name": "include\\service\\jobs\\plugins\\plugin_available_job.js",
            "modules": {},
            "classes": {
                "PluginAvailableJob": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\plugins\\plugin_dependencies_job.js": {
            "name": "include\\service\\jobs\\plugins\\plugin_dependencies_job.js",
            "modules": {},
            "classes": {
                "PluginDependenciesJob": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\plugins\\plugin_initialize_job.js": {
            "name": "include\\service\\jobs\\plugins\\plugin_initialize_job.js",
            "modules": {},
            "classes": {
                "PluginInitializeJob": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\plugins\\plugin_install_job.js": {
            "name": "include\\service\\jobs\\plugins\\plugin_install_job.js",
            "modules": {},
            "classes": {
                "PluginInstallJob": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\plugins\\plugin_job_runner.js": {
            "name": "include\\service\\jobs\\plugins\\plugin_job_runner.js",
            "modules": {},
            "classes": {
                "PluginJobRunner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\plugins\\plugin_uninstall_job.js": {
            "name": "include\\service\\jobs\\plugins\\plugin_uninstall_job.js",
            "modules": {},
            "classes": {
                "PluginUninstallJob": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\async_job_runner.js": {
            "name": "include\\service\\jobs\\async_job_runner.js",
            "modules": {},
            "classes": {
                "AsyncJobRunner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\cluster_job_runner.js": {
            "name": "include\\service\\jobs\\cluster_job_runner.js",
            "modules": {},
            "classes": {
                "ClusterJobRunner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\jobs\\job_runner.js": {
            "name": "include\\service\\jobs\\job_runner.js",
            "modules": {},
            "classes": {
                "JobRunner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\cache_entity_service.js": {
            "name": "include\\service\\cache_entity_service.js",
            "modules": {
                "Storage": 1
            },
            "classes": {
                "CacheEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\db_entity_service.js": {
            "name": "include\\service\\db_entity_service.js",
            "modules": {},
            "classes": {
                "DBEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\fs_entity_service.js": {
            "name": "include\\service\\fs_entity_service.js",
            "modules": {},
            "classes": {
                "FSEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\json_fs_entity_service.js": {
            "name": "include\\service\\json_fs_entity_service.js",
            "modules": {},
            "classes": {
                "JSONFSEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\memory_entity_service.js": {
            "name": "include\\service\\memory_entity_service.js",
            "modules": {},
            "classes": {
                "MemoryEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\read_only_simple_layered_service.js": {
            "name": "include\\service\\read_only_simple_layered_service.js",
            "modules": {},
            "classes": {
                "ReadOnlySimpleLayeredService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\simple_layered_service.js": {
            "name": "include\\service\\simple_layered_service.js",
            "modules": {},
            "classes": {
                "SimpleLayeredService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\service\\template_entity_service.js": {
            "name": "include\\service\\template_entity_service.js",
            "modules": {},
            "classes": {
                "TemplateEntityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\storage\\mongo_session_store.js": {
            "name": "include\\session\\storage\\mongo_session_store.js",
            "modules": {
                "Session": 1
            },
            "classes": {
                "MongoSessionStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\storage\\redis_session_store.js": {
            "name": "include\\session\\storage\\redis_session_store.js",
            "modules": {},
            "classes": {
                "RedisSessionStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\session\\session.js": {
            "name": "include\\session\\session.js",
            "modules": {},
            "classes": {
                "SessionHandler": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\command\\command_service.js": {
            "name": "include\\system\\command\\command_service.js",
            "modules": {},
            "classes": {
                "CommandService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\command\\redis_command_broker.js": {
            "name": "include\\system\\command\\redis_command_broker.js",
            "modules": {},
            "classes": {
                "RedisCommandBroker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\registry\\mongo_registration_provider.js": {
            "name": "include\\system\\registry\\mongo_registration_provider.js",
            "modules": {},
            "classes": {
                "MongoRegistrationProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\registry\\redis_registration_provider.js": {
            "name": "include\\system\\registry\\redis_registration_provider.js",
            "modules": {},
            "classes": {
                "RedisRegistrationProvider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\server_registration.js": {
            "name": "include\\system\\server_registration.js",
            "modules": {},
            "classes": {
                "ServerRegistration": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\system\\settings.js": {
            "name": "include\\system\\settings.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\theme\\comments.js": {
            "name": "include\\theme\\comments.js",
            "modules": {
                "Theme": 1
            },
            "classes": {
                "CommentService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\theme\\media.js": {
            "name": "include\\theme\\media.js",
            "modules": {},
            "classes": {
                "MediaService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\theme\\top_menu.js": {
            "name": "include\\theme\\top_menu.js",
            "modules": {},
            "classes": {
                "TopMenuService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\validation\\validation_service.js": {
            "name": "include\\validation\\validation_service.js",
            "modules": {},
            "classes": {
                "ValidationService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\access_management.js": {
            "name": "include\\access_management.js",
            "modules": {
                "Security": 1
            },
            "classes": {
                "SecurityService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\admin_navigation.js": {
            "name": "include\\admin_navigation.js",
            "modules": {},
            "classes": {
                "AdminNavigation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\client_js.js": {
            "name": "include\\client_js.js",
            "modules": {
                "Services": 1
            },
            "classes": {
                "ClientJS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\config.js": {
            "name": "include\\config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\content.js": {
            "name": "include\\content.js",
            "modules": {},
            "classes": {
                "ContentService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\email.js": {
            "name": "include\\email.js",
            "modules": {},
            "classes": {
                "EmailService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\libraries.js": {
            "name": "include\\libraries.js",
            "modules": {},
            "classes": {
                "LibrariesService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\localization.js": {
            "name": "include\\localization.js",
            "modules": {},
            "classes": {
                "Localization": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "include\\requirements.js": {
            "name": "include\\requirements.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "include\\util.js": {
            "name": "include\\util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "plugins\\ga\\ga.js": {
            "name": "plugins\\ga\\ga.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\portfolio\\controllers\\blog.js": {
            "name": "plugins\\portfolio\\controllers\\blog.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\portfolio\\controllers\\blog_filter.js": {
            "name": "plugins\\portfolio\\controllers\\blog_filter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\portfolio\\controllers\\home_page_settings.js": {
            "name": "plugins\\portfolio\\controllers\\home_page_settings.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\portfolio\\controllers\\index.js": {
            "name": "plugins\\portfolio\\controllers\\index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\portfolio\\controllers\\save_home_page_settings.js": {
            "name": "plugins\\portfolio\\controllers\\save_home_page_settings.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\portfolio\\portfolio.js": {
            "name": "plugins\\portfolio\\portfolio.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\sample\\controllers\\hello_world.js": {
            "name": "plugins\\sample\\controllers\\hello_world.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\sample\\controllers\\test_page.js": {
            "name": "plugins\\sample\\controllers\\test_page.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\sample\\services\\text_creator.js": {
            "name": "plugins\\sample\\services\\text_creator.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\sample\\sample.js": {
            "name": "plugins\\sample\\sample.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\wp_import\\controllers\\import_action.js": {
            "name": "plugins\\wp_import\\controllers\\import_action.js",
            "modules": {},
            "classes": {
                "ImportWP": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "plugins\\wp_import\\services\\wp_xml_parse.js": {
            "name": "plugins\\wp_import\\services\\wp_xml_parse.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "plugins\\wp_import\\wp_import.js": {
            "name": "plugins\\wp_import\\wp_import.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "pencilblue.js": {
            "name": "pencilblue.js",
            "modules": {},
            "classes": {
                "PencilBlue": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Database": {
            "name": "Database",
            "submodules": {},
            "classes": {
                "EditObject": 1,
                "EditObjectType": 1,
                "NewObject": 1,
                "NewObjectType": 1,
                "SortObjectsPostController": 1,
                "NewPagePostController": 1,
                "ManageComments": 1,
                "ManageObjectTypes": 1,
                "ManageObjects": 1,
                "SortObjects": 1,
                "AdminIndexController": 1,
                "SaveArticleDraft": 1,
                "ClusterApiController": 1,
                "JobApiController": 1,
                "PluginApi": 1,
                "ApiActionController": 1,
                "BaseController": 1,
                "FormController": 1,
                "PageController": 1,
                "PluginPublicContentController": 1,
                "CacheFactory": 1,
                "DAO": 1,
                "DBManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\dao\\db_manager.js",
            "line": 29,
            "description": "Controlls the data model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "dbName",
                    "description": "Will default to the config.db.name DB when not\nprovided.",
                    "type": "String",
                    "optional": true
                }
            ],
            "itemtype": "main"
        },
        "ErrorSuccess": {
            "name": "ErrorSuccess",
            "submodules": {},
            "classes": {
                "PBError": 1,
                "RequestHandler": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\http\\request_handler.js",
            "line": 18,
            "description": "Specialized application error that knows what status code to return",
            "is_constructor": 1,
            "itemtype": "main"
        },
        "Model": {
            "name": "Model",
            "submodules": {},
            "classes": {
                "DocumentCreator": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "include\\model\\create_document.js",
            "line": 18,
            "description": "Creates structures for persistence and cleans various fields.",
            "is_constructor": 1,
            "itemtype": "main"
        },
        "Services": {
            "name": "Services",
            "submodules": {
                "Admin": 1,
                "Entities": 1,
                "Storage": 1,
                "Theme": 1,
                "Validation": 1,
                "Security": 1
            },
            "classes": {
                "AdminSubnavService": 1,
                "ArticleService": 1,
                "MediaLoader": 1,
                "CustomObjectService": 1,
                "JobService": 1,
                "MediaService": 1,
                "PluginService": 1,
                "TemplateService": 1,
                "TemplateValue": 1,
                "UrlService": 1,
                "UserService": 1,
                "PluginAvailableJob": 1,
                "PluginDependenciesJob": 1,
                "PluginInitializeJob": 1,
                "PluginInstallJob": 1,
                "PluginJobRunner": 1,
                "PluginUninstallJob": 1,
                "AsyncJobRunner": 1,
                "ClusterJobRunner": 1,
                "JobRunner": 1,
                "CacheEntityService": 1,
                "DBEntityService": 1,
                "FSEntityService": 1,
                "JSONFSEntityService": 1,
                "MemoryEntityService": 1,
                "ReadOnlySimpleLayeredService": 1,
                "SimpleLayeredService": 1,
                "TemplateEntityService": 1,
                "CommentService": 1,
                "TopMenuService": 1,
                "ValidationService": 1,
                "SecurityService": 1,
                "AdminNavigation": 1,
                "ClientJS": 1,
                "ContentService": 1,
                "EmailService": 1,
                "LibrariesService": 1,
                "Localization": 1,
                "Util": 1,
                "ImportWP": 1,
                "PencilBlue": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "pencilblue.js",
            "line": 21,
            "description": "Service for creating JavaScript tags",
            "is_constructor": 1,
            "params": [
                {
                    "name": "objType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "valueField",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "keyField",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "Admin": {
            "name": "Admin",
            "submodules": {},
            "classes": {
                "AdminSubnavService": 1,
                "AdminNavigation": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\admin_navigation.js",
            "line": 18,
            "description": "Services calls for the admin interface",
            "is_constructor": 1
        },
        "Entities": {
            "name": "Entities",
            "submodules": {},
            "classes": {
                "ArticleService": 1,
                "MediaLoader": 1,
                "PluginService": 1,
                "TemplateService": 1,
                "TemplateValue": 1,
                "UrlService": 1,
                "UserService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\user_service.js",
            "line": 18,
            "description": "Service calls for individual entities in the system",
            "is_constructor": 1
        },
        "Storage": {
            "name": "Storage",
            "submodules": {},
            "classes": {
                "CacheEntityService": 1,
                "DBEntityService": 1,
                "FSEntityService": 1,
                "JSONFSEntityService": 1,
                "MemoryEntityService": 1,
                "ReadOnlySimpleLayeredService": 1,
                "SimpleLayeredService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\simple_layered_service.js",
            "line": 18,
            "description": "Services for managing storage",
            "is_constructor": 1,
            "params": [
                {
                    "name": "objType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "valueField",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "keyField",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "Session": {
            "name": "Session",
            "submodules": {},
            "classes": {
                "MongoSessionStore": 1,
                "RedisSessionStore": 1,
                "SessionHandler": 1,
                "CommandService": 1,
                "RedisCommandBroker": 1,
                "MongoRegistrationProvider": 1,
                "RedisRegistrationProvider": 1,
                "ServerRegistration": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "include\\system\\server_registration.js",
            "line": 24,
            "description": "Session storage backed by MongoDB",
            "is_constructor": 1
        },
        "Theme": {
            "name": "Theme",
            "submodules": {},
            "classes": {
                "MediaService": 1,
                "CommentService": 1,
                "TopMenuService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\theme\\top_menu.js",
            "line": 18,
            "description": "Theme content services",
            "is_constructor": 1
        },
        "Validation": {
            "name": "Validation",
            "submodules": {},
            "classes": {
                "ValidationService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "description": "Provides a set of functions for common validations.",
            "file": "include\\validation\\validation_service.js",
            "line": 18
        },
        "Security": {
            "name": "Security",
            "submodules": {},
            "classes": {
                "SecurityService": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Services",
            "namespace": "",
            "file": "include\\access_management.js",
            "line": 18,
            "description": "Service for managing user access",
            "is_constructor": 1
        }
    },
    "classes": {
        "EditObject": {
            "name": "EditObject",
            "shortname": "EditObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\actions\\admin\\content\\custom_objects\\edit_object.js",
            "line": 18,
            "description": "Edits an object",
            "is_constructor": 1,
            "extends": "FormController"
        },
        "EditObjectType": {
            "name": "EditObjectType",
            "shortname": "EditObjectType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\admin\\content\\custom_objects\\edit_object_type.js",
            "line": 21,
            "description": "Interface for editing an object type",
            "is_constructor": 1,
            "extends": "FormController"
        },
        "NewObject": {
            "name": "NewObject",
            "shortname": "NewObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\admin\\content\\custom_objects\\new_object.js",
            "line": 21,
            "description": "Interface for creating a new object",
            "is_constructor": 1,
            "extends": "FormController"
        },
        "NewObjectType": {
            "name": "NewObjectType",
            "shortname": "NewObjectType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\admin\\content\\custom_objects\\new_object_type.js",
            "line": 21,
            "description": "Interface for creating a new object type",
            "is_constructor": 1,
            "extends": "FormController"
        },
        "SortObjectsPostController": {
            "name": "SortObjectsPostController",
            "shortname": "SortObjectsPostController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\actions\\admin\\content\\custom_objects\\sort_objects.js",
            "line": 18,
            "description": "Sets the sorting of objects"
        },
        "NewPagePostController": {
            "name": "NewPagePostController",
            "shortname": "NewPagePostController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\actions\\admin\\content\\pages\\new_page.js",
            "line": 18,
            "description": "Creates a new page",
            "is_constructor": 1,
            "extends": "FormController"
        },
        "ManageComments": {
            "name": "ManageComments",
            "shortname": "ManageComments",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\admin\\content\\comments\\manage_comments.js",
            "line": 21,
            "description": "Interface for managing comments",
            "is_constructor": 1
        },
        "ManageObjectTypes": {
            "name": "ManageObjectTypes",
            "shortname": "ManageObjectTypes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\admin\\content\\custom_objects\\manage_object_types.js",
            "line": 21,
            "description": "Interface for managing object types",
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "ManageObjects": {
            "name": "ManageObjects",
            "shortname": "ManageObjects",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\admin\\content\\custom_objects\\manage_objects.js",
            "line": 18,
            "description": "Interface for managing objects",
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "SortObjects": {
            "name": "SortObjects",
            "shortname": "SortObjects",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\admin\\content\\custom_objects\\sort_objects.js",
            "line": 18,
            "description": "Interface for sorting objects",
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "AdminIndexController": {
            "name": "AdminIndexController",
            "shortname": "AdminIndexController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\admin\\index.js",
            "line": 18,
            "description": "Interface for the admin dashboard",
            "is_constructor": 1
        },
        "SaveArticleDraft": {
            "name": "SaveArticleDraft",
            "shortname": "SaveArticleDraft",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\api\\admin\\content\\articles\\save_draft.js",
            "line": 18,
            "description": "Automatic draft saving of articles",
            "is_constructor": 1
        },
        "ClusterApiController": {
            "name": "ClusterApiController",
            "shortname": "ClusterApiController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\api\\admin\\system\\cluster_api.js",
            "line": 18,
            "description": "Controller to properly route and handle remote calls to interact with\nthe cluster",
            "is_constructor": 1
        },
        "JobApiController": {
            "name": "JobApiController",
            "shortname": "JobApiController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\api\\jobs\\job_api_controller.js",
            "line": 23,
            "description": "Controller to properly route and handle remote calls to interact with\nthe JobsService",
            "is_constructor": 1,
            "extends": "ApiActionController"
        },
        "PluginApi": {
            "name": "PluginApi",
            "shortname": "PluginApi",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\api\\plugins\\plugin_api.js",
            "line": 18,
            "description": "Controller to properly route and handle remote calls to interact with\nthe PluginService",
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "ApiActionController": {
            "name": "ApiActionController",
            "shortname": "ApiActionController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\api\\api_action_controller.js",
            "line": 23,
            "description": "Controller interface used to map simple actions to handlers and provide\na flow for validation and error handling.",
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "BaseController": {
            "name": "BaseController",
            "shortname": "BaseController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\base_controller.js",
            "line": 21,
            "description": "The base controller provides functions for the majority of\nthe heavy lifing for a controller. It accepts and provides access to\nextending controllers for items such as the request, response, session, etc.",
            "is_constructor": 1
        },
        "FormController": {
            "name": "FormController",
            "shortname": "FormController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\form_controller.js",
            "line": 21,
            "description": "Provides the basic functionality for implementing a controller that\nneeds access to a posted form.",
            "is_constructor": 1
        },
        "PageController": {
            "name": "PageController",
            "shortname": "PageController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\page.js",
            "line": 21,
            "description": "Loads a page",
            "is_constructor": 1
        },
        "PluginPublicContentController": {
            "name": "PluginPublicContentController",
            "shortname": "PluginPublicContentController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "file": "controllers\\public.js",
            "line": 18,
            "description": "Loads files in a plugin's public folder",
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "CacheFactory": {
            "name": "CacheFactory",
            "shortname": "CacheFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\dao\\cache.js",
            "line": 18,
            "description": "Creates the cache"
        },
        "DAO": {
            "name": "DAO",
            "shortname": "DAO",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\dao\\dao.js",
            "line": 18,
            "description": "Controlls the data model"
        },
        "DBManager": {
            "name": "DBManager",
            "shortname": "DBManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Database",
            "namespace": "",
            "file": "include\\dao\\db_manager.js",
            "line": 29,
            "description": "Wrapper that protects against direct access to the active connection pools\nand DB references."
        },
        "PBError": {
            "name": "PBError",
            "shortname": "PBError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ErrorSuccess",
            "namespace": "",
            "file": "include\\error\\pb_error.js",
            "line": 18,
            "description": "Specialized application error that knows what status code to return"
        },
        "RequestHandler": {
            "name": "RequestHandler",
            "shortname": "RequestHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ErrorSuccess",
            "namespace": "",
            "file": "include\\http\\request_handler.js",
            "line": 18,
            "description": "Responsible for processing a single req by delegating it to the correct controllers",
            "is_constructor": 1,
            "params": [
                {
                    "name": "server",
                    "description": "The http server that the request came in on",
                    "type": "Server"
                },
                {
                    "name": "req",
                    "description": "The incoming request",
                    "type": "Request"
                },
                {
                    "name": "resp",
                    "description": "The outgoing response",
                    "type": "Response"
                }
            ]
        },
        "DocumentCreator": {
            "name": "DocumentCreator",
            "shortname": "DocumentCreator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Model",
            "namespace": "",
            "file": "include\\model\\create_document.js",
            "line": 18,
            "description": "Creates structures for persistence and cleans various fields."
        },
        "AdminSubnavService": {
            "name": "AdminSubnavService",
            "shortname": "AdminSubnavService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 18,
            "description": "Provides the ability to manage the admin section's sub-nav.  It manages\ncallbacks for specific areas of the admin section that will build a structure\nto represent the sub-nav.  This sub nav, when retrieved will combine all\nregistrants' pills into a single structure which can then be rendered in a UI.",
            "submodule": "Admin"
        },
        "ArticleService": {
            "name": "ArticleService",
            "shortname": "ArticleService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Entities",
            "namespace": "",
            "file": "include\\service\\entities\\article_service.js",
            "line": 34,
            "description": "Retrieves articles and pages",
            "is_constructor": 1
        },
        "MediaLoader": {
            "name": "MediaLoader",
            "shortname": "MediaLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\article_service.js",
            "line": 384,
            "description": "Handles retrieval and injection of media in articles and pages",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "CustomObjectService": {
            "name": "CustomObjectService",
            "shortname": "CustomObjectService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 21,
            "is_constructor": 1
        },
        "JobService": {
            "name": "JobService",
            "shortname": "JobService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\job_service.js",
            "line": 18,
            "description": "Provides the ability to interact with jobs that have already been created.",
            "is_constructor": 1
        },
        "MediaService": {
            "name": "MediaService",
            "shortname": "MediaService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Theme",
            "namespace": "",
            "file": "include\\theme\\media.js",
            "line": 23,
            "description": "Retrieves media information"
        },
        "PluginService": {
            "name": "PluginService",
            "shortname": "PluginService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 24,
            "description": "PluginService - Provides functions for interacting with plugins.\nInstall/uninstall, setting retrieval, plugin retrieval, etc.",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "TemplateService": {
            "name": "TemplateService",
            "shortname": "TemplateService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\template_service.js",
            "line": 21,
            "description": "A templating engine that provides the ability to read in file snippets and\ncall back for data based on the flags in the template file.  The instance\ncan be provided a Localization instance which will be used to perform\ntranslations for localization flags are encountered.  Flags are marked in\nhtml files by the pattern ^xzy^.  The values provided here are not HTML\nencoded.  Any reserved characters must be manually encoded by any flag\ncall backs.",
            "submodule": "Entities",
            "is_constructor": 1,
            "params": [
                {
                    "name": "localizationService",
                    "description": "The localization service object",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "TemplateValue": {
            "name": "TemplateValue",
            "shortname": "TemplateValue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Entities",
            "namespace": "",
            "file": "include\\service\\entities\\template_service.js",
            "line": 593,
            "description": "A value that has special meaning to TemplateService.  It acts as a wrapper\nfor a value to be used in a template along with special processing\ninstructions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "The",
                    "description": "raw value to be included in the template processing",
                    "type": "String"
                },
                {
                    "name": "htmlEncode",
                    "description": "Indicates if the value should be\nencoded during serialization.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "UrlService": {
            "name": "UrlService",
            "shortname": "UrlService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\entities\\url_service.js",
            "line": 18,
            "description": "A service that provides insight into the system's routes (URLs) along with\nother utility functions to assist in examining and constructing URLs for\nclients to use for interaction with the system.",
            "submodule": "Entities",
            "is_constructor": 1
        },
        "UserService": {
            "name": "UserService",
            "shortname": "UserService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Entities",
            "namespace": "",
            "file": "include\\service\\entities\\user_service.js",
            "line": 18,
            "description": "Service for performing user specific operations."
        },
        "PluginAvailableJob": {
            "name": "PluginAvailableJob",
            "shortname": "PluginAvailableJob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\plugins\\plugin_available_job.js",
            "line": 21,
            "description": "A system job that coordinates the check to see if a plugin is available for\ninstall on each process across the cluster.",
            "is_constructor": 1,
            "extends": "PluginJobRunner"
        },
        "PluginDependenciesJob": {
            "name": "PluginDependenciesJob",
            "shortname": "PluginDependenciesJob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\plugins\\plugin_dependencies_job.js",
            "line": 21,
            "description": "A system job that coordinates the installation of a plugin's dependencies to\nthe plugin's node modules directory.",
            "is_constructor": 1,
            "extends": "PluginJobRunner"
        },
        "PluginInitializeJob": {
            "name": "PluginInitializeJob",
            "shortname": "PluginInitializeJob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\plugins\\plugin_initialize_job.js",
            "line": 21,
            "description": "A system job that coordinates the initialization of a plugin across a\ncluster",
            "is_constructor": 1,
            "extends": "PluginJobRunner"
        },
        "PluginInstallJob": {
            "name": "PluginInstallJob",
            "shortname": "PluginInstallJob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\plugins\\plugin_install_job.js",
            "line": 21,
            "description": "A system job that coordinates the uninstall of a plugin across the cluster.\nThe job has two modes.  The first is initiator.  This is the process that\nreceives the request to uninstall the plugin.  It coordinates a sequenced\nuninstall from each process in the cluster.  The initiator does this by\ngetting a list of active processes through the service registry.  It then\nuses the registry to send a message to each process to uninstall the plugin.\nSome operations are repeated for each server but this is ok based on the\ncurrent set of operations.  When a command is received that instructs a\nprocess to uninstall a plugin it creates an instance of the plugin uninstall\njob with isInitiator = FALSE.  This changes causes the actual uninstall\nprocess to take place.  Log statements are sent both to the system logger\nand to the job log persistence entity.",
            "is_constructor": 1,
            "extends": "PluginJobRunner"
        },
        "PluginJobRunner": {
            "name": "PluginJobRunner",
            "shortname": "PluginJobRunner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\plugins\\plugin_job_runner.js",
            "line": 21,
            "description": "The framework for a cluster wide job that affects 1 or more plugins.",
            "is_constructor": 1,
            "extends": "ClusterJobRunner"
        },
        "PluginUninstallJob": {
            "name": "PluginUninstallJob",
            "shortname": "PluginUninstallJob",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\plugins\\plugin_uninstall_job.js",
            "line": 21,
            "description": "A system job that coordinates the uninstall of a plugin across the cluster.\nThe job has two modes.  The first is initiator.  This is the process that\nreceives the request to uninstall the plugin.  It coordinates a sequenced\nuninstall from each process in the cluster.  The initiator does this by\ngetting a list of active processes through the service registry.  It then\nuses the registry to send a message to each process to uninstall the plugin.\nSome operations are repeated for each server but this is ok based on the\ncurrent set of operations.  When a command is received that instructs a\nprocess to uninstall a plugin it creates an instance of the plugin uninstall\njob with isInitiator = FALSE.  This changes causes the actual uninstall\nprocess to take place.  Log statements are sent both to the system logger\nand to the job log persistence entity.",
            "is_constructor": 1,
            "extends": "PluginJobRunner"
        },
        "AsyncJobRunner": {
            "name": "AsyncJobRunner",
            "shortname": "AsyncJobRunner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 21,
            "description": "An abstract implementation of JobRunner that handles performing a series of\nasynchronous tasks.  The runner provides the ability to run the tasks in\nparallel or 1 after another.  The extending implementation must provides the\nset of tasks to execute",
            "is_constructor": 1,
            "extends": "JobRunner"
        },
        "ClusterJobRunner": {
            "name": "ClusterJobRunner",
            "shortname": "ClusterJobRunner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 21,
            "description": "Abstract prototype used to run a job against an entire cluster by running in\none of two modes:  initiator and worker.",
            "is_constructor": 1,
            "extends": "AsyncJobRunner"
        },
        "JobRunner": {
            "name": "JobRunner",
            "shortname": "JobRunner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 18,
            "description": "A base interface that system jobs can implement.  The premise is that every\njob will have an ID and a name.  The job is initialized by calling the\n\"init\" function and started by calling the \"run\" function.  The specific\nimplementation is also provided with functions to report the start, update,\nand end of the job run.  The advantage to extending this prototype is that\nthe provided functions allow for creating a persisted record of the job.  In\naddition, log statements generated by the job are also persisted (as long as\nthe provided \"log\" function is called).",
            "is_constructor": 1
        },
        "CacheEntityService": {
            "name": "CacheEntityService",
            "shortname": "CacheEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\cache_entity_service.js",
            "line": 18,
            "description": "In-cache storage service",
            "submodule": "Storage"
        },
        "DBEntityService": {
            "name": "DBEntityService",
            "shortname": "DBEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\db_entity_service.js",
            "line": 18,
            "description": "Database storage service"
        },
        "FSEntityService": {
            "name": "FSEntityService",
            "shortname": "FSEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\fs_entity_service.js",
            "line": 18,
            "description": "File system storage service"
        },
        "JSONFSEntityService": {
            "name": "JSONFSEntityService",
            "shortname": "JSONFSEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 18,
            "description": "JSON file system storage service"
        },
        "MemoryEntityService": {
            "name": "MemoryEntityService",
            "shortname": "MemoryEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\memory_entity_service.js",
            "line": 18,
            "description": "Memory storage service"
        },
        "ReadOnlySimpleLayeredService": {
            "name": "ReadOnlySimpleLayeredService",
            "shortname": "ReadOnlySimpleLayeredService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\read_only_simple_layered_service.js",
            "line": 18,
            "description": "Service to set storage services as read only"
        },
        "SimpleLayeredService": {
            "name": "SimpleLayeredService",
            "shortname": "SimpleLayeredService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Storage",
            "namespace": "",
            "file": "include\\service\\simple_layered_service.js",
            "line": 18,
            "description": "Service for layering storage services"
        },
        "TemplateEntityService": {
            "name": "TemplateEntityService",
            "shortname": "TemplateEntityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\service\\template_entity_service.js",
            "line": 18,
            "description": "Service that is used to load the HTML templates from the file system.  If\nthe template is available it is compiled."
        },
        "MongoSessionStore": {
            "name": "MongoSessionStore",
            "shortname": "MongoSessionStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 18,
            "description": "Session storage backed by MongoDB"
        },
        "RedisSessionStore": {
            "name": "RedisSessionStore",
            "shortname": "RedisSessionStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 18,
            "description": "Session storage backed by Redis"
        },
        "SessionHandler": {
            "name": "SessionHandler",
            "shortname": "SessionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\session\\session.js",
            "line": 24,
            "description": "Responsible for managing user sessions"
        },
        "CommandService": {
            "name": "CommandService",
            "shortname": "CommandService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\command\\command_service.js",
            "line": 18,
            "description": "Provides a mechanism to send commands to all members of the cluster or a\nspecific member.",
            "is_constructor": 1
        },
        "RedisCommandBroker": {
            "name": "RedisCommandBroker",
            "shortname": "RedisCommandBroker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 18,
            "description": "Brokers messages using Redis as the medium.  The implementation follows a\npublish/subscribe model that allows for listening for changes based on a a\nspecified channel.",
            "is_constructor": 1
        },
        "MongoRegistrationProvider": {
            "name": "MongoRegistrationProvider",
            "shortname": "MongoRegistrationProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 19,
            "description": "Implements the necessary functions in order to be able to create and manage\na service registry for PB processes in the cluster.  This provider uses MongoDB\nas the storage.  In addition, it leverages MongoDB's TTL collections.  The\nreaper for mongo runs every 60 seconds.  It is possible for dead processes to\nappear in the status list for up to that magical 60 second threshold.  The\nname of the collection used to store all statuses is determined by the\nconfiguration property: \"registry.key\".",
            "is_constructor": 1
        },
        "RedisRegistrationProvider": {
            "name": "RedisRegistrationProvider",
            "shortname": "RedisRegistrationProvider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 18,
            "description": "Implements the necessary functions in order to be able to create and manage\na service registry for PB processes in the cluster.  This provider uses Redis\nas the storage.  In addition, it leverages Redis's expiry functionality to\nexpire entries automatically if they have not been touched.  In order to\nretrieve all nodes/processes in the cluster the provider must execute\nRedis's \"keys\" function which is an expensive operation.  To lessen the\nimpact on production systems the provider creates and manages its own Redis\nclient and switches to DB 2 in order to minimize the number of keys that\nneed to be scanned since the rest of the PB system leverages DB 0.",
            "is_constructor": 1
        },
        "ServerRegistration": {
            "name": "ServerRegistration",
            "shortname": "ServerRegistration",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Session",
            "namespace": "",
            "file": "include\\system\\server_registration.js",
            "line": 24,
            "description": "Service that provides the ability for the process/node to register itself so\nthat other nodes in the system can find it.  In addition, it helps with the\nhealth monitoring of the system.",
            "is_constructor": 1
        },
        "CommentService": {
            "name": "CommentService",
            "shortname": "CommentService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Theme",
            "namespace": "",
            "file": "include\\theme\\comments.js",
            "line": 25,
            "description": "Retrieves comment information"
        },
        "TopMenuService": {
            "name": "TopMenuService",
            "shortname": "TopMenuService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Theme",
            "namespace": "",
            "file": "include\\theme\\top_menu.js",
            "line": 18,
            "description": "Service for top menu navigation"
        },
        "ValidationService": {
            "name": "ValidationService",
            "shortname": "ValidationService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\validation\\validation_service.js",
            "line": 18,
            "description": "Provides a set of functions for common validations.",
            "submodule": "Validation",
            "is_constructor": 1
        },
        "SecurityService": {
            "name": "SecurityService",
            "shortname": "SecurityService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Security",
            "namespace": "",
            "file": "include\\access_management.js",
            "line": 18,
            "description": "Service for managing user access"
        },
        "AdminNavigation": {
            "name": "AdminNavigation",
            "shortname": "AdminNavigation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "submodule": "Admin",
            "namespace": "",
            "file": "include\\admin_navigation.js",
            "line": 18,
            "description": "Provides function to construct the structure needed to display the navigation\nin the Admin section of the application."
        },
        "ClientJS": {
            "name": "ClientJS",
            "shortname": "ClientJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\client_js.js",
            "line": 18,
            "description": "Service for creating JavaScript tags"
        },
        "ContentService": {
            "name": "ContentService",
            "shortname": "ContentService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\content.js",
            "line": 18,
            "description": "Service for content settings retrieval"
        },
        "EmailService": {
            "name": "EmailService",
            "shortname": "EmailService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\email.js",
            "line": 21,
            "description": "Service for sending emails."
        },
        "LibrariesService": {
            "name": "LibrariesService",
            "shortname": "LibrariesService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\libraries.js",
            "line": 18,
            "description": "Service for library settings retrieval"
        },
        "Localization": {
            "name": "Localization",
            "shortname": "Localization",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\localization.js",
            "line": 18,
            "description": "Provides functions to translate items based on keys.  Also\nassists in the determination of the best language for the given user."
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "include\\util.js",
            "line": 21,
            "description": "Provides a set of utility functions used throughout the code base"
        },
        "ImportWP": {
            "name": "ImportWP",
            "shortname": "ImportWP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "plugins\\wp_import\\controllers\\import_action.js",
            "line": 21,
            "is_constructor": 1,
            "extends": "BaseController"
        },
        "PencilBlue": {
            "name": "PencilBlue",
            "shortname": "PencilBlue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Services",
            "namespace": "",
            "file": "pencilblue.js",
            "line": 21,
            "description": "The main driver file for PencilBlue.  Provides the function necessary to\nstart up the master and/or child processes.  In addition, it is responsible\nfor ensuring that all system services are avaialble by requiring the\n\"requirements.js\" file.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "controllers\\actions\\admin\\content\\articles\\delete_article.js",
            "line": 18,
            "description": "Deletes an article",
            "class": "EditObject"
        },
        {
            "file": "controllers\\actions\\admin\\content\\articles\\edit_article.js",
            "line": 18,
            "description": "Edits an article",
            "class": "EditObject"
        },
        {
            "file": "controllers\\actions\\admin\\content\\articles\\new_article.js",
            "line": 18,
            "description": "Creates a new article",
            "class": "EditObject"
        },
        {
            "file": "controllers\\actions\\admin\\content\\comments\\delete_comment.js",
            "line": 18,
            "description": "Deletes a comment",
            "class": "EditObject"
        },
        {
            "file": "controllers\\actions\\admin\\content\\custom_objects\\delete_object.js",
            "line": 18,
            "description": "Deletes an object",
            "class": "EditObject"
        },
        {
            "file": "controllers\\actions\\admin\\content\\custom_objects\\delete_object_type.js",
            "line": 18,
            "description": "Deletes an object type",
            "class": "EditObject"
        },
        {
            "file": "controllers\\actions\\admin\\content\\media\\add_media.js",
            "line": 18,
            "description": "Adds new media",
            "class": "NewPagePostController"
        },
        {
            "file": "controllers\\actions\\admin\\content\\media\\delete_media.js",
            "line": 18,
            "description": "Deletes media",
            "class": "NewPagePostController"
        },
        {
            "file": "controllers\\actions\\admin\\content\\media\\edit_media.js",
            "line": 18,
            "description": "Edits media",
            "class": "NewPagePostController"
        },
        {
            "file": "controllers\\actions\\admin\\content\\media\\inline_add_media.js",
            "line": 18,
            "description": "Adds new media from inside a non-media form",
            "class": "NewPagePostController"
        },
        {
            "file": "controllers\\actions\\admin\\content\\media\\upload_media.js",
            "line": 18,
            "description": "Uploads a media file to the system",
            "class": "NewPagePostController"
        },
        {
            "file": "controllers\\actions\\admin\\content\\pages\\delete_page.js",
            "line": 18,
            "description": "Deletes a page",
            "class": "NewPagePostController"
        },
        {
            "file": "controllers\\actions\\admin\\content\\pages\\edit_page.js",
            "line": 18,
            "description": "Edits a page",
            "cclass": "EditPagePostController",
            "is_constructor": 1,
            "extends": "FormController",
            "class": "NewPagePostController"
        },
        {
            "file": "controllers\\actions\\admin\\content\\sections\\delete_section.js",
            "line": 18,
            "description": "Deletes a section",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\content\\sections\\edit_section.js",
            "line": 18,
            "description": "Edits a section",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\content\\sections\\new_section.js",
            "line": 18,
            "description": "Creates a new section",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\content\\sections\\section_map.js",
            "line": 18,
            "description": "Updates the navigation",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\content\\topics\\delete_topic.js",
            "line": 18,
            "description": "Deletes a topic",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\content\\topics\\import_topics.js",
            "line": 18,
            "description": "Imports a CSV of topics",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\content\\topics\\new_topic.js",
            "line": 18,
            "description": "Creates a new topic",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\site_settings\\configuration.js",
            "line": 18,
            "description": "Saves the site's setting to call home",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\site_settings\\content.js",
            "line": 18,
            "description": "Saves the site's content settings",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\site_settings\\email.js",
            "line": 18,
            "description": "Saves the site's email settings",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\site_settings\\libraries.js",
            "line": 18,
            "description": "Saves the site's content settings",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\themes\\index.js",
            "line": 18,
            "description": "Saves the site's theme settings",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\users\\change_password.js",
            "line": 18,
            "description": "Changes a user's password",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\users\\delete_unverified_user.js",
            "line": 18,
            "description": "Deletes an unverified user",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\users\\delete_user.js",
            "line": 18,
            "description": "Deletes a user",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\users\\edit_user.js",
            "line": 18,
            "description": "Edits a user",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\users\\new_user.js",
            "line": 18,
            "description": "Creates a new user",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\users\\send_password_reset.js",
            "line": 18,
            "description": "Sends a password reset email",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\admin\\users\\verify_user.js",
            "line": 18,
            "description": "Verifies a user",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\user\\manage_account\\change_password.js",
            "line": 18,
            "description": "Changes the logged in user's password",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\user\\manage_account\\profile.js",
            "line": 18,
            "description": "Edits the logged in user's information",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\user\\resend_verification.js",
            "line": 18,
            "description": "Resends an account verification email",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\user\\reset_password.js",
            "line": 18,
            "description": "Resets the logged in user's password",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\user\\sign_up.js",
            "line": 18,
            "description": "Creates an READER level user",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\user\\verify_email.js",
            "line": 18,
            "description": "Tests the token from a verication email and verifies the user if correct",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\forgot_password.js",
            "line": 18,
            "description": "Sends a password reset email",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\login.js",
            "line": 18,
            "description": "Authenticates a user",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\logout.js",
            "line": 18,
            "description": "Logs a user out of the system",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\actions\\setup.js",
            "line": 18,
            "description": "Creates the initial admin user",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\admin\\content\\articles\\edit_article.js",
            "line": 18,
            "description": "Interface for editing an article",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\admin\\content\\articles\\manage_articles.js",
            "line": 18,
            "description": "Interface for managing articles",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\admin\\content\\articles\\new_article.js",
            "line": 18,
            "description": "Interface for creating a new article",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\admin\\content\\comments\\manage_comments.js",
            "line": 31,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "SUB_NAV_KEY",
            "type": "{String}",
            "class": "ManageComments"
        },
        {
            "file": "controllers\\admin\\content\\comments\\manage_comments.js",
            "line": 40,
            "see": [
                "BaseController.render"
            ],
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ManageComments"
        },
        {
            "file": "controllers\\admin\\content\\comments\\manage_comments.js",
            "line": 88,
            "itemtype": "method",
            "name": "getCommentDetails",
            "params": [
                {
                    "name": "comments",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dao",
                    "description": "",
                    "type": "DAO"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ManageComments"
        },
        {
            "file": "controllers\\admin\\content\\comments\\manage_comments.js",
            "line": 129,
            "static": 1,
            "itemtype": "method",
            "name": "getSubNavItems",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ls",
                    "description": "",
                    "type": "Localization"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "ManageComments"
        },
        {
            "file": "controllers\\admin\\content\\custom_objects\\edit_object.js",
            "line": 18,
            "description": "Interface for editing an object",
            "class": "EditObjectType"
        },
        {
            "file": "controllers\\admin\\content\\media\\add_media.js",
            "line": 18,
            "description": "Interface for adding media",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\media\\edit_media.js",
            "line": 18,
            "description": "Interface for editing media",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\media\\manage_media.js",
            "line": 18,
            "description": "Interface for managing media",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\pages\\edit_page.js",
            "line": 18,
            "description": "Interface for editing a page",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\pages\\manage_pages.js",
            "line": 18,
            "description": "Interface for managing pages",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\pages\\new_page.js",
            "line": 18,
            "description": "Interface for creating a new page",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\sections\\edit_section.js",
            "line": 18,
            "description": "Interface for editing a section",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\sections\\new_section.js",
            "line": 18,
            "description": "Interface for creating a section",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\sections\\section_map.js",
            "line": 18,
            "description": "Interface for editing the navigation",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\topics\\import_topics.js",
            "line": 18,
            "description": "Interface for importing topics from CSV",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\topics\\manage_topics.js",
            "line": 18,
            "description": "Interface for managing topics",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\topics\\new_topic.js",
            "line": 18,
            "description": "Interface for creating new topics",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\articles.js",
            "line": 18,
            "description": "Parent articles controller",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\comments.js",
            "line": 18,
            "description": "Parent comments controller",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\custom_objects.js",
            "line": 18,
            "description": "Parent custom objects controller",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\media.js",
            "line": 18,
            "description": "Parent media controller",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\pages.js",
            "line": 18,
            "description": "Parent pages controller",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\sections.js",
            "line": 18,
            "description": "Parent sections controller",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\content\\topics.js",
            "line": 18,
            "description": "Parent topics controller",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\plugins\\details.js",
            "line": 18,
            "description": "Interface for viewing plugin details",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\plugins\\index.js",
            "line": 18,
            "description": "Interface for managing plugins",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\plugins\\settings.js",
            "line": 18,
            "description": "Interface for changing a plugin's settings",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\site_settings\\configuration.js",
            "line": 18,
            "description": "Interface for displaying the site's configuration settings",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\site_settings\\content.js",
            "line": 18,
            "description": "Interface for the site's content settings",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\site_settings\\email.js",
            "line": 18,
            "description": "Interface for the site's email settings",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\site_settings\\libraries.js",
            "line": 18,
            "description": "Interface for the site's libraries settings",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\themes\\index.js",
            "line": 18,
            "description": "Interface for managing themes",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\themes\\settings.js",
            "line": 18,
            "description": "Interface for changing a theme's settings",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\users\\change_password.js",
            "line": 18,
            "description": "Interface for changing the logged in user's password",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\users\\edit_user.js",
            "line": 18,
            "description": "Interface for editing a user",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\users\\manage_users.js",
            "line": 18,
            "description": "Interface for managing users",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\users\\new_user.js",
            "line": 18,
            "description": "Interface for creating a new user",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\users\\permissions.js",
            "line": 18,
            "description": "Interface for displaying how a plugin's user permissions are organized",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\users\\unverified_users.js",
            "line": 18,
            "description": "Interface for managing users",
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\index.js",
            "line": 28,
            "see": [
                "BaseController#render"
            ],
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\index.js",
            "line": 68,
            "description": "Gather all necessary data for rendering the dashboard.\n<ul>\n<li>Article count</li>\n<li>Page Count</li>\n<li>Cluster Status</li>\n</ul>",
            "itemtype": "method",
            "name": "gatherData",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "AdminIndexController"
        },
        {
            "file": "controllers\\admin\\login.js",
            "line": 18,
            "description": "Interface for admin login",
            "class": "SaveArticleDraft"
        },
        {
            "file": "controllers\\admin\\site_settings.js",
            "line": 18,
            "description": "Parent site settings controller",
            "class": "SaveArticleDraft"
        },
        {
            "file": "controllers\\admin\\users.js",
            "line": 18,
            "description": "Parent users controller",
            "class": "SaveArticleDraft"
        },
        {
            "file": "controllers\\api\\admin\\content\\articles\\save_draft.js",
            "line": 28,
            "description": "Processes the request to persist a draft.  Redirects the request after\ncompletion.",
            "see": [
                "FormController#onPostParamsRetrieved"
            ],
            "itemtype": "method",
            "name": "onPostParamsRetrieved",
            "params": [
                {
                    "name": "The",
                    "description": "posted parameters",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SaveArticleDraft"
        },
        {
            "file": "controllers\\api\\admin\\content\\articles\\save_draft.js",
            "line": 96,
            "description": "The required parameters",
            "itemtype": "method",
            "name": "getRequiredFields",
            "return": {
                "description": "Parameter names that must be present in order to pass\nvalidation.",
                "type": "Array"
            },
            "class": "SaveArticleDraft"
        },
        {
            "file": "controllers\\api\\admin\\content\\articles\\save_draft.js",
            "line": 106,
            "see": [
                "BaseController#getSanitizationRules"
            ],
            "itemtype": "method",
            "name": "getSanitizationRules",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SaveArticleDraft"
        },
        {
            "file": "controllers\\api\\admin\\content\\pages\\save_draft.js",
            "line": 18,
            "description": "Automatic draft saving of pages",
            "class": "ClusterApiController"
        },
        {
            "file": "controllers\\api\\admin\\content\\pages\\save_draft.js",
            "line": 26,
            "description": "Processes the request to persist a draft.  Redirects the request after\ncompletion.",
            "see": [
                "FormController#onPostParamsRetrieved"
            ],
            "itemtype": "method",
            "name": "onPostParamsRetrieved",
            "params": [
                {
                    "name": "The",
                    "description": "posted parameters",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ClusterApiController"
        },
        {
            "file": "controllers\\api\\admin\\content\\pages\\save_draft.js",
            "line": 93,
            "description": "The required parameters",
            "itemtype": "method",
            "name": "getRequiredFields",
            "return": {
                "description": "Parameter names that must be present in order to pass\nvalidation.",
                "type": "Array"
            },
            "class": "ClusterApiController"
        },
        {
            "file": "controllers\\api\\admin\\content\\pages\\save_draft.js",
            "line": 103,
            "see": [
                "BaseController#getSanitizationRules"
            ],
            "itemtype": "method",
            "name": "getSanitizationRules",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ClusterApiController"
        },
        {
            "file": "controllers\\api\\admin\\system\\cluster_api.js",
            "line": 39,
            "description": "Provides the hash of all actions supported by this controller",
            "itemtype": "method",
            "name": "getActions",
            "return": {
                "description": "Hash of acceptable actions",
                "type": "Object"
            },
            "class": "ClusterApiController"
        },
        {
            "file": "controllers\\api\\admin\\system\\cluster_api.js",
            "line": 48,
            "description": "Causes the service registration storage to flush all status updates.  An API\nobject is returned to the client that specifies the correct amount of time to\nwait before the service registry is updated again by all nodes.",
            "itemtype": "method",
            "name": "refresh",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ClusterApiController"
        },
        {
            "file": "controllers\\api\\admin\\url_api.js",
            "line": 18,
            "description": "Controller to properly route and handle remote calls to interact with\nthe UrlService",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\admin\\url_api.js",
            "line": 39,
            "description": "Provides the hash of all actions supported by this controller",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\admin\\url_api.js",
            "line": 46,
            "description": "Validates any path parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded.",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\admin\\url_api.js",
            "line": 55,
            "description": "Validates any query parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded.",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\admin\\url_api.js",
            "line": 79,
            "description": "The \"exists\" action handler.  Calls the UrlService function <i>exists</i> to\nsee whether or not the provided URL path could trigger a controller to be\nexecuted.",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\admin\\url_api.js",
            "line": 92,
            "description": "The \"exists_for\" action handler.  Calls the UrlService function\n<i>existsForType</i> to see whether or not the provided URL path the URL key\nof that particular object type.",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\comments\\new_comment.js",
            "line": 18,
            "description": "Creates a new comment",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\content\\get_articles.js",
            "line": 18,
            "description": "Retrieve articles",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\content\\get_articles.js",
            "line": 30,
            "description": "Get articles within indices, for real time pagination",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\content\\get_media_embed.js",
            "line": 18,
            "description": "Retrieve a media embed",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\content\\search.js",
            "line": 18,
            "description": "Search for headline or subheading matching search term",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\custom_objects\\get_object_type_name_available.js",
            "line": 18,
            "description": "Checks to see if the proposed name for a custom object type is available",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\jobs\\job_api_controller.js",
            "line": 36,
            "description": "The hash of actions that are available to execute for this controller. When\nthe key's value is TRUE, it indicates that a valid object ID must be part of\nthe request as a path variable \"id\".",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "VALID_ACTIONS",
            "type": "{Object}",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\jobs\\job_api_controller.js",
            "line": 50,
            "description": "Provides the hash of all actions supported by this controller",
            "see": [
                "ApiActionController#getActions"
            ],
            "itemtype": "method",
            "name": "getActions",
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\jobs\\job_api_controller.js",
            "line": 59,
            "description": "Overrides the default implementation of getPostParams to parse for incoming\nJSON instead of multipart form data. The function calls back with an object\nreprenting the posted JSON.",
            "itemtype": "method",
            "name": "getPostParams",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\jobs\\job_api_controller.js",
            "line": 70,
            "description": "Validates any post parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded. The default implementation passes an empty\nerror array.",
            "see": [
                "ApiActionController#validatePostParameters"
            ],
            "itemtype": "method",
            "name": "validatePostParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "post",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\jobs\\job_api_controller.js",
            "line": 92,
            "description": "The \"getLogs\" action handler.  Calls the JobService function <i>getLogs</i> to\nretrieve the array of log entries for the specified time range and job.",
            "itemtype": "method",
            "name": "getLogs",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\jobs\\job_api_controller.js",
            "line": 115,
            "description": "The \"get\" action handler.  Calls the JobService function <i>loadById</i> to\nretrieve the job descriptor",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "JobApiController"
        },
        {
            "file": "controllers\\api\\plugins\\plugin_api.js",
            "line": 36,
            "description": "The hash of actions that are available to execute for this controller. When\nthe key's value is TRUE, it indicates that a valid object ID must be part of\nthe request as a path variable \"id\".",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "VALID_ACTIONS",
            "type": "{Object}",
            "class": "PluginApi"
        },
        {
            "file": "controllers\\api\\plugins\\plugin_api.js",
            "line": 53,
            "description": "Properly routes the incoming request to the handler after validation of the\nproperties",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginApi"
        },
        {
            "file": "controllers\\api\\plugins\\plugin_api.js",
            "line": 84,
            "description": "Triggers the installation of a plugin",
            "itemtype": "method",
            "name": "install",
            "params": [
                {
                    "name": "uid",
                    "description": "The unique id of the plugin to install",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginApi"
        },
        {
            "file": "controllers\\api\\plugins\\plugin_api.js",
            "line": 96,
            "description": "Triggers a plugin to uninstall from the cluster",
            "itemtype": "method",
            "name": "uninstall",
            "params": [
                {
                    "name": "uid",
                    "description": "The unique id of the plugin to uninstall",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginApi"
        },
        {
            "file": "controllers\\api\\plugins\\plugin_api.js",
            "line": 110,
            "description": "Triggers the plugin's settings to be flushed and reloaded from the details.json file",
            "itemtype": "method",
            "name": "reset_settings",
            "params": [
                {
                    "name": "uid",
                    "description": "The unique id of the plugin to flush the settings for",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginApi"
        },
        {
            "file": "controllers\\api\\plugins\\plugin_api.js",
            "line": 175,
            "description": "Attempts to initialize a plugin",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "uid",
                    "description": "The unique id of the plugin to initialize",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginApi"
        },
        {
            "file": "controllers\\api\\plugins\\plugin_api.js",
            "line": 204,
            "description": "Attempts to set the active theme",
            "itemtype": "method",
            "name": "set_theme",
            "params": [
                {
                    "name": "uid",
                    "description": "The unique id of the plugin to set as the active theme",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginApi"
        },
        {
            "file": "controllers\\api\\user\\get_username_available.js",
            "line": 18,
            "description": "Checks to see if the proposed username is available",
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 35,
            "description": "Flag to indicate if the form should automatically sanitize the incoming\nvalues.  In this case sanitize means it will attempt to strip away any\nHTML tags to prevent HTML injection and XSS.",
            "itemtype": "property",
            "name": "autoSanitize",
            "type": "{Boolean}",
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 44,
            "description": "The entry point called by the RequestHandler.  Executes the calls to the\nvalidation framework then, if passes, executes the action handler.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 69,
            "description": "Provides the hash of all actions supported by this controller",
            "itemtype": "method",
            "name": "getActions",
            "return": {
                "description": "An empty hash of actions since this is meant to be\noverriden.",
                "type": "Object"
            },
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 79,
            "description": "Validates the query, path, and post parameters in parallel and calls back\nwith any validation errors.",
            "itemtype": "method",
            "name": "validateParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 138,
            "itemtype": "method",
            "name": "getAutoSanitize",
            "return": {
                "description": "{Boolean"
            },
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 146,
            "itemtype": "method",
            "name": "setAutoSanitize",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 154,
            "description": "Validates any path parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded. The default implementation examines the\nvalue for the action in the value returned by ApiActionController#getActions.\nIf the value evaluates to true then the implementation will validate that an\n\"id\" path parameter was passed.",
            "itemtype": "method",
            "name": "validatePathParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 175,
            "description": "Validates any query parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded. The default implementation passes an empty\nerror array.",
            "itemtype": "method",
            "name": "validateQueryParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\api\\api_action_controller.js",
            "line": 188,
            "description": "Validates any post parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded. The default implementation passes an empty\nerror array.",
            "itemtype": "method",
            "name": "validatePostParameters",
            "params": [
                {
                    "name": "action",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "post",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ApiActionController"
        },
        {
            "file": "controllers\\error\\404.js",
            "line": 18,
            "description": "404 error",
            "class": "BaseController"
        },
        {
            "file": "controllers\\user\\change_password.js",
            "line": 18,
            "description": "Interface for logged in user to change password",
            "class": "BaseController"
        },
        {
            "file": "controllers\\user\\login.js",
            "line": 18,
            "description": "Interface for logging in",
            "class": "BaseController"
        },
        {
            "file": "controllers\\user\\manage_account.js",
            "line": 18,
            "description": "Interface for logged in user to manage account information",
            "class": "BaseController"
        },
        {
            "file": "controllers\\user\\resend_verification.js",
            "line": 18,
            "description": "Interface for resending a verification email",
            "class": "BaseController"
        },
        {
            "file": "controllers\\user\\sign_up.js",
            "line": 18,
            "description": "Interface for creating a new READER level user",
            "class": "BaseController"
        },
        {
            "file": "controllers\\user\\verification_sent.js",
            "line": 18,
            "description": "Verification email sent page",
            "class": "BaseController"
        },
        {
            "file": "controllers\\article.js",
            "line": 18,
            "description": "Loads a single article",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 31,
            "description": "The code for a successful API call",
            "static": 1,
            "itemtype": "property",
            "name": "API_SUCCESS",
            "type": "{Integer}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 39,
            "description": "The code for a failed API call",
            "static": 1,
            "itemtype": "property",
            "name": "API_FAILURE",
            "type": "{Integer}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 47,
            "description": "The snippet of JS code that will ensure that a form is refilled with values\nfrom the post",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "FORM_REFILL_PATTERN",
            "type": "{String}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 59,
            "description": "The snippet of HTML that will display an alert box",
            "static": 1,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "ALERT_PATTERN",
            "type": "{String}",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 68,
            "description": "Responsible for initializing a controller.  Properties from the\nRequestHandler are passed down so that the controller has complete access to\na variety of request specified properties.  By default the function transfers the options over to instance variables that can be access during rendering.  In addition, the function sets up the template service along with a set of local flags:\n<ul>\n<li>locale - The selected locale for the request (NOTE: this may not match the requested language if not supported)</li>\n<li>error_success - An alert box if one was registered by the controller</li>\n<li>page_name - The title of the page</li>\n<li>localization_script - Includes the localization script so that it can be used client side</li>\n<li>analytics - Inserts the necessary javascript for analytics providers</li>\n</ul>",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "props",
                    "description": "The properties needed to initialize the controller",
                    "type": "Object",
                    "props": [
                        {
                            "name": "request_handler",
                            "description": "",
                            "type": "RequestHandler"
                        },
                        {
                            "name": "request",
                            "description": "The incoming request",
                            "type": "Request"
                        },
                        {
                            "name": "response",
                            "description": "The outgoing response",
                            "type": "Response"
                        },
                        {
                            "name": "session",
                            "description": "The session object",
                            "type": "Object"
                        },
                        {
                            "name": "localization_service",
                            "description": "The localization service instance for the request",
                            "type": "Localization"
                        },
                        {
                            "name": "path_vars",
                            "description": "The path variables associated with the URL for the request",
                            "type": "Object"
                        },
                        {
                            "name": "query",
                            "description": "The query string variables associated with the URL for the request",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that takes a single optional argument: cb(Error)",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 121,
            "itemtype": "method",
            "name": "requiresClientLocalization",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 130,
            "itemtype": "method",
            "name": "requiresClientLocalizationCallback",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 144,
            "itemtype": "method",
            "name": "formError",
            "params": [
                {
                    "name": "message",
                    "description": "The error message to be displayed",
                    "type": "String"
                },
                {
                    "name": "redirectLocation",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 157,
            "itemtype": "method",
            "name": "displayErrorOrSuccessCallback",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 179,
            "description": "Provides a page title.  This is picked up by the template engine when the\n^page_name^ key is found in a template.",
            "itemtype": "method",
            "name": "getPageName",
            "return": {
                "description": "The page title",
                "type": "String"
            },
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 189,
            "description": "Sets the page title",
            "itemtype": "method",
            "name": "setPageName",
            "params": [
                {
                    "name": "pageName",
                    "description": "The desired page title",
                    "type": "String"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 198,
            "itemtype": "method",
            "name": "getPostParams",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 215,
            "description": "Parses the incoming payload of a request as JSON formatted data.",
            "itemtype": "method",
            "name": "getJSONPostParams",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 239,
            "itemtype": "method",
            "name": "getPostData",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 259,
            "itemtype": "method",
            "name": "hasRequiredParams",
            "params": [
                {
                    "name": "queryObject",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "requiredParameters",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 286,
            "itemtype": "method",
            "name": "setFormFieldValues",
            "params": [
                {
                    "name": "post",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 296,
            "itemtype": "method",
            "name": "checkForFormRefill",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 314,
            "description": "Sanitizes an object.  This function is handy for incoming post objects.  It\niterates over each field.  If the field is a string value it will be\nsanitized based on the default sanitization rules\n(BaseController.getDefaultSanitizationRules) or those provided by the call\nto BaseController.getSanitizationRules.",
            "itemtype": "method",
            "name": "sanitizeObject",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 338,
            "itemtype": "method",
            "name": "getSanitizationRules",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 346,
            "description": "The sanitization rules that apply to Pages and Articles",
            "static": 1,
            "itemtype": "method",
            "name": "getContentSanitizationRules",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 376,
            "static": 1,
            "itemtype": "method",
            "name": "getDefaultSanitizationRules",
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 387,
            "static": 1,
            "itemtype": "method",
            "name": "sanitize",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "config",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 404,
            "description": "Redirects a request to a different location",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "BaseController"
        },
        {
            "file": "controllers\\base_controller.js",
            "line": 414,
            "description": "Generates an generic API response object",
            "static": 1,
            "itemtype": "method",
            "name": "apiResponse",
            "return": {
                "description": "JSON",
                "type": "String"
            },
            "class": "BaseController"
        },
        {
            "file": "controllers\\delete_controller.js",
            "line": 18,
            "description": "Deletes objects from the database",
            "class": "FormController"
        },
        {
            "file": "controllers\\feed.js",
            "line": 18,
            "description": "RSS Feed",
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 32,
            "description": "Instructs the controller to automatically sanitize any incoming post data\nwhen set to TRUE.",
            "itemtype": "property",
            "name": "autoSanitize",
            "type": "{Boolean}",
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 40,
            "description": "Responsible for gathering the payload data from the request and parsing it.\nThe result is passed down to the controller's onPostParamsRetrieved function.\nIn addition and the <i>autoSanitize</i> property is TRUE, the posted\nparameters will be sanitized.",
            "see": [
                "BaseController#render"
            ],
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 64,
            "itemtype": "method",
            "name": "getAutoSanitize",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 73,
            "itemtype": "method",
            "name": "setAutoSanitize",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 82,
            "itemtype": "method",
            "name": "onPostParamsError",
            "params": [
                {
                    "name": "err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FormController"
        },
        {
            "file": "controllers\\form_controller.js",
            "line": 93,
            "description": "Called after the posted parameters have been received and parsed.  The\nfunction should be overriden in order to continue processing and render the\nresult of the request.  The default implementation echoes the received\nparameters as JSON.",
            "itemtype": "method",
            "name": "onPostParamsRetrieved",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "FormController"
        },
        {
            "file": "controllers\\index.js",
            "line": 18,
            "description": "Index page of the pencilblue theme",
            "class": "PageController"
        },
        {
            "file": "controllers\\page.js",
            "line": 31,
            "description": "Looks up a page and renders it",
            "see": [
                "BaseController#render"
            ],
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PageController"
        },
        {
            "file": "controllers\\page.js",
            "line": 76,
            "description": "Retrieves the name of the page.  The page's headhile",
            "class": "PageController"
        },
        {
            "file": "controllers\\preview.js",
            "line": 18,
            "description": "Preview an article or page",
            "class": "PluginPublicContentController"
        },
        {
            "file": "controllers\\public.js",
            "line": 33,
            "see": [
                "BaseController.render"
            ],
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginPublicContentController"
        },
        {
            "file": "controllers\\section.js",
            "line": 18,
            "description": "Loads a section",
            "class": "CacheFactory"
        },
        {
            "file": "controllers\\setup.js",
            "line": 18,
            "description": "Initial setup page",
            "class": "CacheFactory"
        },
        {
            "file": "controllers\\sitemap.js",
            "line": 18,
            "description": "Google sitemap",
            "class": "CacheFactory"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 30,
            "description": "Retrieves the instance of Redis or FakeRedis",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "client",
                "type": "Object"
            },
            "class": "CacheFactory",
            "module": "Database"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 45,
            "class": "CacheFactory",
            "module": "Database"
        },
        {
            "file": "include\\dao\\cache.js",
            "line": 56,
            "description": "Shuts down the Redis or FakeRedis instance",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheFactory",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 30,
            "description": "The name of the DB that this instance is intended to interact with.  By\ndefault, it goes to the name of the DB provided by system configuration\nproperty db.name.",
            "itemtype": "property",
            "name": "dbName",
            "type": "{String}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 40,
            "description": "Static variable to indicate that all indices of a document should be\nretrieved",
            "itemtype": "property",
            "name": "PROJECT_ALL",
            "type": "{Object}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 49,
            "description": "Static variable to indicate that documents should be retrieve from anywhere",
            "itemtype": "property",
            "name": "ANYWHERE",
            "type": "{Object}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 57,
            "description": "Static variable to indicate that documents should be returned in their\nnatural order",
            "itemtype": "property",
            "name": "NATURAL_ORDER",
            "type": "{Array}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 66,
            "description": "Static varible to sort ascending",
            "itemtype": "property",
            "name": "ASC",
            "type": "{Number}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 74,
            "description": "Static variable to sort descending",
            "itemtype": "property",
            "name": "DESC",
            "type": "{Number}",
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 82,
            "description": "Retrieves an object by ID",
            "itemtype": "method",
            "name": "loadById",
            "params": [
                {
                    "name": "id",
                    "description": "The unique id of the object",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection the object is in",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 94,
            "description": "Retrieves objects matching a key value pair",
            "itemtype": "method",
            "name": "loadByValue",
            "params": [
                {
                    "name": "key",
                    "description": "The key to search for",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "The value to search for",
                    "type": "*"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 109,
            "description": "Retrieves object matching several key value pairs",
            "itemtype": "method",
            "name": "loadByValues",
            "params": [
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 128,
            "description": "Gets the count of objects matching criteria",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "entityType",
                    "description": "The type of object to search for",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 140,
            "description": "Determines if an object extists matching criteria",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 154,
            "description": "Determines if there is only a single document that matches the specified query",
            "itemtype": "method",
            "name": "unique",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "exclusionId",
                    "description": "Object Id to exclude from the search",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 183,
            "description": "Queries the database",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "entityType",
                    "description": "The type of object to search for",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "select",
                    "description": "Selection type object",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "orderBy",
                    "description": "Order by object (MongoDB syntax)",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "Number of documents to retrieve",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "Start index of retrieval",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise object",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 216,
            "description": "The actual implementation for querying.  The function does not do the same\ntype checking as the wrapper function \"query\".  This funciton is responsible\nfor doing the heavy lifting and returning the result back to the calling intity.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_doQuery",
            "params": [
                {
                    "name": "entityType",
                    "description": "The collection to query",
                    "type": "String"
                },
                {
                    "name": "where",
                    "description": "The where clause",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "select",
                    "description": "The fields to project",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "orderBy",
                    "description": "The ordering",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "The maximum number of results to return",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "The number of results to skip before returning results.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "The MongoDB cursor that provides the results of the query",
                "type": "Cursor"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 266,
            "description": "Persists a DB Object for the first time.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "dbObject",
                    "description": "The database object to persist",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise object",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 283,
            "description": "Replaces an existing document with the specified DB Object",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dbObj",
                    "description": "The new document object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise object",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 312,
            "description": "Updates a specific set of fields. This is handy for performing upserts.",
            "itemtype": "method",
            "name": "updateFields",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to update object(s) in",
                    "type": "String"
                },
                {
                    "name": "query",
                    "description": "The query to execute to find the existing object",
                    "type": "Object"
                },
                {
                    "name": "updates",
                    "description": "The updates to perform",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Any options to go along with the update",
                    "type": "Object",
                    "props": [
                        {
                            "name": "upsert",
                            "description": "Inserts the object is not found",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "multi",
                            "description": "Updates multiple records if the query\nfinds more than 1",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 335,
            "description": "Removes an object from persistence",
            "itemtype": "method",
            "name": "deleteById",
            "params": [
                {
                    "name": "oid",
                    "description": "The Id of the object to remove",
                    "type": "String"
                },
                {
                    "name": "collection",
                    "description": "The collection the object is in",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise object",
                "type": "Promise"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 352,
            "description": "Removes objects from persistence that match criteria",
            "itemtype": "method",
            "name": "deleteMatching",
            "params": [
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "collection",
                    "description": "The collection to search in",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise object",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 381,
            "description": "Sends a command to the DB.\nhttp://mongodb.github.io/node-mongodb-native/api-generated/db.html#command",
            "itemtype": "method",
            "name": "command",
            "params": [
                {
                    "name": "The",
                    "description": "command to execute",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 396,
            "description": "Attempts to create an index.  If the collection already exists then the\noperation is skipped.\nhttp://mongodb.github.io/node-mongodb-native/api-generated/collection.html#ensureindex",
            "itemtype": "method",
            "name": "ensureIndex",
            "params": [
                {
                    "name": "procedure",
                    "description": "The objects containing the necessary parameters\nand options to create the index.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "collection",
                            "description": "The collection to build an index for",
                            "type": "String"
                        },
                        {
                            "name": "spec",
                            "description": "An object that specifies one or more fields\nand sort direction for the index.",
                            "type": "Object"
                        },
                        {
                            "name": "options",
                            "description": "An optional parameter that can\nspecify the options for the index.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "{}"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 425,
            "description": "Creates a basic where clause based on the specified Id",
            "static": 1,
            "itemtype": "method",
            "name": "getIDWhere",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 438,
            "description": "Creates a where clause that equates to select where [idProp] is in the\nspecified array of values.",
            "static": 1,
            "itemtype": "method",
            "name": "getIDInWhere",
            "params": [
                {
                    "name": "objArray",
                    "description": "The array of acceptable values",
                    "type": "Array"
                },
                {
                    "name": "The",
                    "description": "property that holds a referenced ID value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 466,
            "description": "Creates a basic where clause based on not equalling the specified Id",
            "static": 1,
            "itemtype": "method",
            "name": "getNotIDWhere",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 479,
            "description": "Creates a where clause that indicates to select where the '_id' field does\nnot equal the specified value.",
            "static": 1,
            "itemtype": "method",
            "name": "getNotIDField",
            "return": {
                "description": "Where clause",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 490,
            "description": "Creates an MongoDB ObjectID object",
            "static": 1,
            "itemtype": "method",
            "name": "getObjectID",
            "params": [
                {
                    "name": "oid",
                    "description": "Object Id String",
                    "type": "String"
                }
            ],
            "return": {
                "description": "ObjectID object",
                "type": "Object"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 501,
            "description": "Updates a DB object with a created time stamp and last modified time stamp.",
            "static": 1,
            "itemtype": "method",
            "name": "updateChangeHistory",
            "params": [
                {
                    "name": "dbObject",
                    "description": "Object to update",
                    "type": "Object"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 521,
            "description": "Transfers a system object from one type to another.  The system specific\nproperties are cleared so that when the object is persisted it will receive\nits own properties.",
            "static": 1,
            "itemtype": "method",
            "name": "transfer",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to convert",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "The type to convert it to",
                    "type": "String"
                }
            ],
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\dao.js",
            "line": 541,
            "description": "Retrieves the field in system objects that represents the unique identifier.\nThe default implementation returns the mongo field '_id'.",
            "static": 1,
            "itemtype": "method",
            "name": "getIdField",
            "return": {
                "description": "'_id'",
                "type": "String"
            },
            "class": "DAO",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 23,
            "description": "Legacy variable used to reference the main database\nTODO Remove this once all references are converted over.",
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 39,
            "description": "Keeps track of all active DBs with active connection pools.",
            "params": [
                {
                    "name": "dbs",
                    "description": ""
                }
            ],
            "type": "{Object}",
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 47,
            "description": "Retrieves a handle to the specified database.",
            "itemtype": "method",
            "name": "getDB",
            "params": [
                {
                    "name": "name",
                    "description": "The database name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise object",
                "type": "Object"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 114,
            "description": "Indicates if a connection pool to the specified database has already been\ninitialized",
            "itemtype": "method",
            "name": "hasConnected",
            "return": {
                "description": "Whether the pool has been connected",
                "type": "Boolean"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\dao\\db_manager.js",
            "line": 125,
            "description": "Iterates over all database handles and call's their shutdown function.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Array of promise objects, one for each shutdown call",
                "type": "Array"
            },
            "class": "DBManager",
            "module": "Database"
        },
        {
            "file": "include\\error\\pb_error.js",
            "line": 38,
            "description": "Sets the localization key for the error",
            "itemtype": "method",
            "name": "setLocalizationKey",
            "params": [
                {
                    "name": "key",
                    "description": "The localization key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The PBError object",
                "type": "Object"
            },
            "class": "PBError",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\error\\pb_error.js",
            "line": 50,
            "description": "Sets the source for the error",
            "itemtype": "method",
            "name": "setSource",
            "params": [
                {
                    "name": "err",
                    "description": "The error source",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The PBError object",
                "type": "Object"
            },
            "class": "PBError",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 34,
            "description": "The fallback theme (pencilblue)",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_THEME",
            "type": "{String}",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 47,
            "description": "Initializes the request handler prototype by registering the core routes for\nthe system.  This should only be called once at startup.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 65,
            "description": "Generates the controller callback object that will trigger the redirect\nheader to be sent back as part of the response.",
            "static": 1,
            "itemtype": "method",
            "name": "generateRedirect",
            "params": [
                {
                    "name": "location",
                    "description": "The fully qualified or relative URL to be redirected to",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object for the controller to call back with.",
                "type": "Object"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 79,
            "description": "Validates a route descriptor.  The specified object must have a \"controller\"\nproperty that points to a valid file and the \"path\" property must specify a\nvalid URL path structure.",
            "static": 1,
            "itemtype": "method",
            "name": "isValidRoute",
            "params": [
                {
                    "name": "descriptor",
                    "description": "The object to validate",
                    "type": "Object",
                    "props": [
                        {
                            "name": "controller",
                            "description": "The file path to the controller file",
                            "type": "String"
                        },
                        {
                            "name": "path",
                            "description": "The URL path",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 94,
            "description": "Unregisters all routes associated with a theme",
            "static": 1,
            "itemtype": "method",
            "name": "unregisterThemeRoutes",
            "params": [
                {
                    "name": "theme",
                    "description": "The plugin/theme uid",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The number of routes removed",
                "type": "Integer"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 114,
            "description": "Removes a route based on a URL path and theme UID",
            "static": 1,
            "itemtype": "method",
            "name": "unregisterRoute",
            "params": [
                {
                    "name": "The",
                    "description": "URL path",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "theme that owns the route",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the route was found and removed, FALSE if not",
                "type": "Boolean"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 150,
            "description": "Registers a route",
            "static": 1,
            "itemtype": "method",
            "name": "registerRoute",
            "params": [
                {
                    "name": "descriptor",
                    "description": "The route descriptor",
                    "type": "Object",
                    "props": [
                        {
                            "name": "method",
                            "description": "The HTTP method associated with\nthe route",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'ALL'"
                        },
                        {
                            "name": "path",
                            "description": "The URL path for the route.  The route\nsupports wild cards a well as path variables (/get/:id)",
                            "type": "String"
                        },
                        {
                            "name": "controller",
                            "description": "The file path to the controller to\nexecute when the path is matched to an incoming request.",
                            "type": "String"
                        },
                        {
                            "name": "access_level",
                            "description": "Use global constants:\nACCESS_USER,ACCESS_WRITER,ACCESS_EDITOR,ACCESS_MANAGING_EDITOR,ACCESS_ADMINISTRATOR",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "setup_required",
                            "description": "If true the system must have gone\nthrough the setup process in order to pass validation",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "auth_required",
                            "description": "If true, the user making the\nrequest must have successfully authenticated against the system.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "theme",
                    "description": "The plugin/theme UID",
                    "type": "String"
                }
            ],
            "request": "{String} [descriptor.content_type='text/html'] The content type header sent with the response",
            "return": {
                "description": "TRUE if the route was registered, FALSE if not",
                "type": "Boolean"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 229,
            "description": "Generates a regular expression based on the specified path.  In addition the\nalgorithm extracts any path variables that are included in the path.  Paths\ncan include two types of wild cards.  The traditional glob pattern style of\n\"/some/api/*\" can be used as well as path variables (\"/some/api/:action\").\nThe path variables will be passed to the controllers.",
            "static": 1,
            "itemtype": "method",
            "name": "getRoutePattern",
            "params": [
                {
                    "name": "The",
                    "description": "URL path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object containing three properties: The specified\n\"path\". The generated regular expression \"pattern\" as a string. Lastly, a\nhash of the path variables and their position in the path coorelating to its\ndepth in the path.",
                "type": "Object|null"
            },
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 284,
            "description": "Processes a request:\n<ol>\n\t<li>Initialize localization</li>\n\t<li>if Public Route:\n\t\t<ol>\n\t\t\t<li>If Valid Content\n\t\t\t\t<ol><li>Serve Public Content</li></ol>\n\t\t\t</li>\n\t\t\t<li>Else Serve 404</li>\n\t\t</ol>\n\t</li>\n\t<li>Else Parse Cookies</li>\n\t<li>Open/Create a session</li>\n\t<li>Get Route</li>\n</ol>",
            "itemtype": "method",
            "name": "handleRequest",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 335,
            "description": "Serves up public content from an absolute file path",
            "itemtype": "method",
            "name": "servePublicContent",
            "params": [
                {
                    "name": "absolutePath",
                    "description": "An absolute file path to the resource",
                    "type": "String"
                }
            ],
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\http\\request_handler.js",
            "line": 408,
            "description": "TODO Church this up a bit.  Make it a template and controller like 404.\nTODO install an encoder entity since node prints out function names in angle brackets",
            "class": "RequestHandler",
            "module": "ErrorSuccess"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 28,
            "description": "Creates a document object ready to be injected into the database",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "object_type",
                    "description": "The type of object to create",
                    "type": "String"
                },
                {
                    "name": "post",
                    "description": "Key value pair object to prepare",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values are to be split from CSVs into arrays",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values are to be null if empty",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The database ready document object",
                "type": "Object"
            },
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 55,
            "description": "Updates a document object with new properties",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pairs to update with",
                    "type": "Object"
                },
                {
                    "name": "existingObject",
                    "description": "Object to update",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values are to be split from CSVs into arrays",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values are to be null if empty",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The database ready document object",
                "type": "Object"
            },
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 70,
            "description": "Hashes all password fields",
            "itemtype": "method",
            "name": "passwordHash",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 89,
            "description": "Formats email fields",
            "itemtype": "method",
            "name": "emailFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 101,
            "description": "Formats usernames",
            "itemtype": "method",
            "name": "usernameFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 113,
            "description": "Formats access levels",
            "itemtype": "method",
            "name": "accessFormatting",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 125,
            "description": "Formats string items to integers",
            "itemtype": "method",
            "name": "formatIntegerItems",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "integerItems",
                    "description": "Keys whose values should be formatted as integers",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 142,
            "description": "Formats empty items to null values",
            "itemtype": "method",
            "name": "emptyItemsToNull",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "nullIfEmptyItems",
                    "description": "Keys whose values should be null if empty",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\model\\create_document.js",
            "line": 166,
            "description": "Splits CSV items into arrays",
            "itemtype": "method",
            "name": "csvItemsToArrays",
            "params": [
                {
                    "name": "post",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "csvItems",
                    "description": "Keys whose values should be arrays",
                    "type": "Array"
                }
            ],
            "class": "DocumentCreator",
            "module": "Model"
        },
        {
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 40,
            "description": "Register a callback with the service",
            "itemtype": "method",
            "name": "registerFor",
            "params": [
                {
                    "name": "key",
                    "description": "The key to register",
                    "type": "String"
                },
                {
                    "name": "getSubNavItems",
                    "description": "The callback function",
                    "type": "Function"
                }
            ],
            "class": "AdminSubnavService",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\service\\admin\\admin_subnav_service.js",
            "line": 59,
            "description": "Retrieves the sub-nav items",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                },
                {
                    "name": "ls",
                    "description": "The localization object",
                    "type": "Object"
                },
                {
                    "name": "activePill",
                    "description": "The name of the active sub-nav pill",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data object to send to the callback function",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The sub-nav items",
                "type": "Object"
            },
            "class": "AdminSubnavService",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 45,
            "description": "Rerieves the content type",
            "itemtype": "method",
            "name": "getContentType",
            "return": {
                "description": "Content type",
                "type": "String"
            },
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 55,
            "description": "Sets the content type (article, page)",
            "itemtype": "method",
            "name": "setContentType",
            "params": [
                {
                    "name": "type",
                    "description": "The content type",
                    "type": "String"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 65,
            "description": "Finds an article or page by Id",
            "itemtype": "method",
            "name": "findById",
            "params": [
                {
                    "name": "articleId",
                    "description": "The article's object Id",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 76,
            "description": "Finds articles by section",
            "itemtype": "method",
            "name": "findBySection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "The section's object Id",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 87,
            "description": "Finds articles and pages by topic",
            "itemtype": "method",
            "name": "findByTopic",
            "params": [
                {
                    "name": "topicId",
                    "description": "The topic's object Id",
                    "type": "[type]"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 98,
            "description": "Finds articles and pages matching criteria",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "where",
                    "description": "Key value pair object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 147,
            "description": "Retrieves data necessary for displaying an articles and appends it to the\narticle object",
            "itemtype": "method",
            "name": "processArticleForDisplay",
            "params": [
                {
                    "name": "article",
                    "description": "The artice to process",
                    "type": "[type]"
                },
                {
                    "name": "authors",
                    "description": "Available authors retrieved from the database",
                    "type": "[type]"
                },
                {
                    "name": "contentSettings",
                    "description": "Content settings to use for processing",
                    "type": "[type]"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 215,
            "description": "Retrieves the authors of an array of articles",
            "itemtype": "method",
            "name": "getArticleAuthors",
            "params": [
                {
                    "name": "articles",
                    "description": "Array of article objects",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 239,
            "description": "Retrieves the commenters for an array of comments",
            "itemtype": "method",
            "name": "getCommenters",
            "params": [
                {
                    "name": "comments",
                    "description": "Array of comment objects",
                    "type": "Array"
                },
                {
                    "name": "contentSettings",
                    "description": "Content settings to use for processing",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 302,
            "description": "Retrieves the article and byline templates",
            "itemtype": "method",
            "name": "getTemplates",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 317,
            "description": "Retrieves the meta info for an article or page",
            "itemtype": "method",
            "name": "getMetaInfo",
            "params": [
                {
                    "name": "article",
                    "description": "An article or page object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ArticleService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 394,
            "description": "Processes an article or page to insert media",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "articleLayout",
                    "description": "The HTML layout of the article or page",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "[description]",
                    "type": "Function"
                }
            ],
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\article_service.js",
            "line": 421,
            "description": "Replaces an article or page layout's ^media_display^ tag with a media embed",
            "params": [
                {
                    "name": "layout",
                    "description": "The HTML layout of the article or page",
                    "type": "String"
                },
                {
                    "name": "mediaTemplate",
                    "description": "The template of the media embed",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MediaLoader",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 34,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "NAME_FIELD",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 43,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "PEER_OBJECT_TYPE",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 52,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "CHILD_OBJECTS_TYPE",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 61,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "CUST_OBJ_TYPE_PREFIX",
            "type": "{String}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 70,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "AVAILABLE_FIELD_TYPES",
            "type": "{Object}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 85,
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "AVAILABLE_REFERENCE_TYPES",
            "type": "{Object}",
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 402,
            "description": "Validates a Custom Object Type.",
            "itemtype": "method",
            "name": "validateType",
            "params": [
                {
                    "name": "custObjType",
                    "description": "The object to validate",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback function that provides two parameters: The\nfirst, an error, if exists. The second is an array of objects that represent\nvalidation errors.  If the 2nd parameter is an empty array it is safe to\nassume that validation passed.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 472,
            "description": "Validates that the field descriptor for a custom object type.",
            "itemtype": "method",
            "name": "validateFieldDescriptor",
            "params": [
                {
                    "name": "field",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "customTypes",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of objects that contain two properties: field and\nerror",
                "type": "Array"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 499,
            "description": "Retrieves an array of all of the available object types that can be\nreferenced as a child or peer object.",
            "itemtype": "method",
            "name": "getReferenceTypes",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: The first, an\nerror, if occurs.  The second is an array of all of the available object\ntypes that can be referenced as a peer or child object.",
                    "type": "Function"
                }
            ],
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\custom_object_service.js",
            "line": 785,
            "description": "Creates a validation error field",
            "static": 1,
            "itemtype": "method",
            "name": "err",
            "params": [
                {
                    "name": "field",
                    "description": "The field in the object that contains the error",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "A string description of the error",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object that describes the validation error",
                "type": "Object"
            },
            "class": "CustomObjectService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\job_service.js",
            "line": 27,
            "description": "Retrieves the log entries for the specified job from the start date up until\nthe current time.",
            "itemtype": "method",
            "name": "getLogs",
            "params": [
                {
                    "name": "jid",
                    "description": "The job ID",
                    "type": "String"
                },
                {
                    "name": "startingDate",
                    "description": "The lower bound on the \"created\" field of the log\nentry",
                    "type": "Date"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "JobService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\job_service.js",
            "line": 52,
            "description": "Retrieves the job descriptor by ID",
            "itemtype": "method",
            "name": "loadById",
            "params": [
                {
                    "name": "jid",
                    "description": "The job's ID",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "JobService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\media_service.js",
            "line": 28,
            "description": "Retrieves whether a media's file path is valid",
            "itemtype": "method",
            "name": "isValidFilePath",
            "params": [
                {
                    "name": "mediaPath",
                    "description": "The file path of the media",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 38,
            "description": "A setting service that sets and retrieves the settings for plugins",
            "itemtype": "property",
            "name": "pluginSettingsService",
            "type": "{SimpleLayeredService}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 45,
            "description": "A setting service that sets and retrieves the settings for plugins",
            "itemtype": "property",
            "name": "pluginSettingsService",
            "type": "{SimpleLayeredService}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 54,
            "description": "The absolute path to the plugins directory for this PecilBlue installation",
            "itemtype": "property",
            "name": "PLUGINS_DIR",
            "type": "{String}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 61,
            "description": "The name of the file that defines the plugin's properties",
            "itemtype": "property",
            "name": "DETAILS_FILE_NAME",
            "type": "{String}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 68,
            "description": "The name of the directory for each plugin that contains the public resources",
            "itemtype": "property",
            "name": "PUBLIC_DIR_NAME",
            "type": "{String}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 76,
            "description": "A hash of the plugins that are installed and active in this instance of PB.",
            "itemtype": "property",
            "name": "ACTIVE_PLUGINS",
            "type": "{Object}",
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 83,
            "description": "Retrieves the path to the active fav icon.",
            "itemtype": "method",
            "name": "getActiveIcon",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, URL_PATH_TO_ICON)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 99,
            "description": "Remove the active plugin entry from the current PB process.\nNOTE: it is not recommended to call this directly.",
            "static": 1,
            "itemtype": "method",
            "name": "deactivatePlugin",
            "params": [
                {
                    "name": "pluginUid",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 120,
            "description": "Retrieves the main module prototype for the specified active plugin",
            "static": 1,
            "itemtype": "method",
            "name": "getActiveMainModule",
            "params": [
                {
                    "name": "pluginUid",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The prototype that is the plugin's main module.",
                "type": "Function"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 131,
            "description": "Retrieves the names of the active plugins for this instance",
            "itemtype": "method",
            "name": "getActivePluginNames",
            "return": {
                "description": "An array that contain the names of the plugins that\ninitialized successfully within this instance.",
                "type": "Array"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 141,
            "description": "Retrieves a single setting for the specified plugin.",
            "itemtype": "method",
            "name": "getSetting",
            "params": [
                {
                    "name": "settingName",
                    "description": "The name of the setting to retrieve",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who owns the setting",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settingValue).\nNull is returned if the setting does not exist or the specified plugin is not\ninstalled.",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 171,
            "description": "Retrieves all of the settings for the specfied plugin.",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who's settings are being requested"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settings).\nNull is provided in the event that the plugin is not installed."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 183,
            "description": "Replaces a single setting for the specified plugin",
            "itemtype": "method",
            "name": "setSetting",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the setting to change"
                },
                {
                    "name": "value",
                    "description": "The new value for the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin who's setting is being changed."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the setting was persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 229,
            "description": "Replaces the settings for the specified plugin.",
            "itemtype": "method",
            "name": "setSettings",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings object to be validated and persisted"
                },
                {
                    "name": "pluginName",
                    "description": "The name of the plugin who's settings are being represented"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 263,
            "description": "Replaces a single theme setting for the specified plugin",
            "itemtype": "method",
            "name": "setThemeSetting",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the setting to change"
                },
                {
                    "name": "value",
                    "description": "The new value for the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin who's setting is being changed."
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the setting was persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 309,
            "description": "Replaces the theme settings for the specified plugin.",
            "itemtype": "method",
            "name": "setThemeSettings",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings object to be validated and persisted"
                },
                {
                    "name": "pluginName",
                    "description": "The uid of the plugin who's settings are being represented"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were persisted successfully, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 343,
            "description": "Retrieves a single theme setting value.",
            "itemtype": "method",
            "name": "getThemeSetting",
            "params": [
                {
                    "name": "settingName",
                    "description": "The uid of the setting"
                },
                {
                    "name": "pluginName",
                    "description": "The plugin to retrieve the setting from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, settingValue)"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 371,
            "description": "Retrieves the theme settings for the specified plugin",
            "itemtype": "method",
            "name": "getThemeSettings",
            "params": [
                {
                    "name": "pluginName",
                    "description": "The uid of the plugin"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(err, settingsObject)"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 382,
            "description": "Indicates if a plugin by the specified identifier is installed.",
            "itemtype": "method",
            "name": "isInstalled",
            "params": [
                {
                    "name": "pluginIdentifer",
                    "description": "The identifier can either be an ObjectID or the\nplugin name"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the plugin is installed, FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 397,
            "description": "Retrieves a plugin descriptor (plugin document)",
            "itemtype": "method",
            "name": "getPlugin",
            "params": [
                {
                    "name": "pluginIdentifier",
                    "description": "The identifier can either be an ObjectID or the\nplugin name"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, plugin).  If the\nplugin does exist null is provided."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 429,
            "description": "Convenience function to generate a service to handle settings for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "genSettingsService",
            "params": [
                {
                    "name": "objType",
                    "description": "The type of object that will be dealt with.  (plugin_settings,\ntheme_settings)"
                },
                {
                    "name": "useMemory",
                    "description": "Indicates if the generated layered service should\nuse an in memory service.",
                    "type": "Boolean"
                },
                {
                    "name": "useCache",
                    "description": "Indicates if the generated layered service should\nuse a cache service.",
                    "type": "Boolean"
                },
                {
                    "name": "serviceName",
                    "description": "The name of the service"
                }
            ],
            "return": {
                "description": "",
                "type": "SimpleLayeredService"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 461,
            "description": "Loads the settings from a details object and persists them in the DB.  Any\nexisting settings for the plugin are deleted before the new settings are\npersisted.",
            "itemtype": "method",
            "name": "resetSettings",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to extract the settings from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were successfully cleared and reloaded. FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 512,
            "description": "Loads the Theme settings from a details object and persists them in the DB.  Any\nexisting theme settings for the plugin are deleted before the new settings\nare persisted. If the plugin does not have a theme then false is provided in\nthe callback.",
            "itemtype": "method",
            "name": "resetThemeSettings",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to extract the settings from"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the settings were successfully cleared and reloaded. FALSE if not."
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 570,
            "description": "Retrieves the permission set for a given role.  All active plugins are\ninspected.",
            "static": 1,
            "itemtype": "method",
            "name": "getPermissionsForRole",
            "params": [
                {
                    "name": "role",
                    "description": "The role to get permissions for",
                    "type": "Integer|String"
                }
            ],
            "return": {
                "description": "A hash of the permissions",
                "type": "Object"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 597,
            "description": "Retrieves the file path to the public directory for the specified plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "getActivePluginDir",
            "params": [
                {
                    "name": "pluginUid",
                    "description": "A plugin's UID value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File path to the plugin's public directory",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 612,
            "description": "Inidicates if the specified plugin is active in this instance of PB.",
            "static": 1,
            "itemtype": "method",
            "name": "isActivePlugin",
            "params": [
                {
                    "name": "uid",
                    "description": "The unique identifier for a plugin",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if the plugin is active, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 623,
            "description": "Generates a URL path to a public resource for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "genPublicPath",
            "params": [
                {
                    "name": "plugin",
                    "description": "The UID of the plugin",
                    "type": "String"
                },
                {
                    "name": "relativePathToMedia",
                    "description": "The relative path to the resource from\nthe plugin's public directory.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "URL path to the resource",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 639,
            "description": "Retrieves the details for the active plugins.",
            "itemtype": "method",
            "name": "getActivePlugins",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 659,
            "description": "Retrieves the content templates for all of the active plugins",
            "static": 1,
            "itemtype": "method",
            "name": "getActiveContentTemplates",
            "return": {
                "description": "An array of objects",
                "type": "Array"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 681,
            "description": "Retrieves the inactive plugins for this instance of PencilBlue.  An inactive\nplugin is considered one who failed to install or one that failed to start\nproperly.",
            "itemtype": "method",
            "name": "getInactivePlugins",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 702,
            "description": "Retrieves the available plugins.  An available plugin is one who is\nuninstalled but available to be installed.",
            "itemtype": "method",
            "name": "getAvailablePlugins",
            "params": [
                {
                    "name": "active",
                    "description": "An array of plugin detail objects.  Each object is\nrequired to have a uid property that is a string.",
                    "type": "Array"
                },
                {
                    "name": "inactive",
                    "description": "An array of plugin details objects. Each object is\nrequired to have a uid property that is a string.",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 783,
            "description": "Retrieves a map of the system's plugin.  The map provides three properties:\nactive, inactive, available.",
            "itemtype": "method",
            "name": "getPluginMap",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 814,
            "description": "Uninstalls the plugin with the specified UID.",
            "itemtype": "method",
            "name": "uninstallPlugin",
            "params": [
                {
                    "name": "pluginUid",
                    "description": "The unique plugin identifier",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "Required when unintalling from the executing\nprocess instead of calling upon the cluster.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "forCluster",
                            "description": "When true or not provided the function\ninstructs the cluster to uninstall the plugin.  When explicitly FALSE the\nfunction installs the plugin from the executing process.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 856,
            "description": "Installs a plugin by stepping through a series of steps that must be\ncompleted in order.  There is currently no fallback plan for a failed install.\nIn order for a plugin to be fully installed it must perform the following\nactions without error:\n<ol>\n<li>Load and parse the plugin's details.json file</li>\n<li>Pass validation</li>\n<li>Must not already be installed</li>\n<li>Successfully register itself with the system</li>\n<li>Successfully load any plugin settings</li>\n<li>Successfully load any theme settings</li>\n<li>Successfully execute the plugin's onInstall function</li>\n<li>Successfully initialize the plugin for runtime</li>\n</ol>",
            "itemtype": "method",
            "name": "installPlugin",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that contains the\nplugin and its details.json file.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(err, TRUE/FALSE)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 888,
            "description": "Attempts to initialize all installed plugins.",
            "itemtype": "method",
            "name": "initPlugins",
            "params": [
                {
                    "name": "A",
                    "description": "callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 952,
            "description": "Initializes a plugin during startup or just after a plugin has been installed.",
            "itemtype": "method",
            "name": "initPlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin details",
                    "type": "Plugin"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1131,
            "description": "Installs the dependencies for a plugin via NPM.",
            "itemtype": "method",
            "name": "installPluginDependencies",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dependencies",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1184,
            "description": "Loads a module dependencies for the specified plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "require",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "moduleName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The entity returned by the \"require\" call.",
                "type": "*"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1197,
            "description": "Loads the localization files from the specified plugin directory and places\nthem into a hash where the key is the name of the localization file.",
            "itemtype": "method",
            "name": "getLocalizations",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the plugin directory",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1244,
            "description": "Retrieves a plugin service prototype.  It is expected to be a prototype but\nit may also be an instance as along as that instance fufills all\nresponsbilities of the service interface.  When the desired service does not\nexist NULL is returned.",
            "itemtype": "method",
            "name": "getService",
            "params": [
                {
                    "name": "serviceName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pluginUid",
                    "description": "The unique plugin identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Service prototype",
                "type": "Object"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1263,
            "description": "Attempts to require the main module file for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "loadMainModule",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that the plugin is\ncontained within.",
                    "type": "String"
                },
                {
                    "name": "pathToModule",
                    "description": "The name of the main module file.  It is also\nto pass this parameter as the absolute file path to the module.  The\nfunction first checks if the parameter is just the file name then checks to\nsee if it is an absolute path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mainmodule prototype",
                "type": "Function"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1290,
            "description": "Retrieves the absolute file path to a plugin's public directory",
            "static": 1,
            "itemtype": "method",
            "name": "getPublicPath",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that contains the intended\nplugin"
                }
            ],
            "return": {
                "description": "the absolute file path to a plugin's public directory",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1303,
            "static": 1,
            "itemtype": "method",
            "name": "getPluginsDir",
            "return": {
                "description": "The absolute file path to the plugins directory",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1312,
            "description": "Constructs the path to a specific plugin's details.json file",
            "static": 1,
            "itemtype": "method",
            "name": "getDetailsPath",
            "params": [
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory that the plugin is\ncontained within.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute file path to the details.json file for a plugin",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1324,
            "description": "Attempts to load and parse the details.json file for a plugin.",
            "static": 1,
            "itemtype": "method",
            "name": "loadDetailsFile",
            "params": [
                {
                    "name": "filePath",
                    "description": "The absolute path to the details.json file",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, detailsObject)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1351,
            "description": "Validates a plugin's details.json file.",
            "static": 1,
            "itemtype": "method",
            "name": "validateDetails",
            "params": [
                {
                    "name": "details",
                    "description": "The details object to validate",
                    "type": "Object"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory containing the original\ndetails.json file that the details object was derived from.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, TRUE/FALSE).\nTRUE if the details object passes validation, FALSE if not.",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1596,
            "description": "Validates the path to the plugin's icon file.  The path is considered valid\nif the path to a valid file.  The path may be absolute or relative to the\nplugin's public directory.",
            "static": 1,
            "itemtype": "method",
            "name": "validateIconPath",
            "params": [
                {
                    "name": "iconPath",
                    "description": "The path to the icon (image) file"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory housing the plugin"
                }
            ],
            "return": {
                "description": "TRUE if the path is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1618,
            "description": "Validates the path of a main module file.  The path is considered valid if\nthe path points to JS file.  The path may be absolute or relative to the\nspecific plugin directory.",
            "params": [
                {
                    "name": "mmPath",
                    "description": "The relative or absolute path to the main module file"
                },
                {
                    "name": "pluginDirName",
                    "description": "The name of the directory housing the plugin"
                }
            ],
            "return": {
                "description": "TRUE if the path is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1631,
            "description": "Validates a setting from a details.json file.",
            "params": [
                {
                    "name": "setting",
                    "description": "The setting to validate"
                },
                {
                    "name": "position",
                    "description": "The position in the settings array where the setting resides\nas a 0 based index."
                }
            ],
            "return": {
                "description": "The array of errors that were generated.  If no errors were\nproduced an empty array is returned.",
                "type": "Array"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1666,
            "description": "Validates a details.json file's setting value.  The value is required to be a\nstring or a number.  Null, undefined, Arrays, Objects, and prototypes are NOT\nallowed.",
            "static": 1,
            "itemtype": "method",
            "name": "validateSettingValue",
            "params": [
                {
                    "name": "value",
                    "description": "The value to validate",
                    "type": "Boolean|Integer|Float|String"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1679,
            "description": "Retrieves all services (initialized).  The services are provided in the\ncallback.",
            "static": 1,
            "itemtype": "method",
            "name": "getServices",
            "params": [
                {
                    "name": "pathToPlugin",
                    "description": "The absolute file path to the specific plugin directory.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, servicesHash);",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1720,
            "description": "Loads a plugin service and initializes it.  The service is required to\nimplement an \"init\" function. The service is then provided as a parameter in\nthe callback.",
            "static": 1,
            "itemtype": "method",
            "name": "loadService",
            "params": [
                {
                    "name": "pathToService",
                    "description": "The absolute file path to the service javascript file.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(error, initializedService)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1745,
            "description": "Loads the controllers for a plugin by iterating through the files in the\nplugin's controllers directory.",
            "static": 1,
            "itemtype": "method",
            "name": "loadControllers",
            "params": [
                {
                    "name": "pathToPlugin",
                    "description": "The absolute file path to the plugin =",
                    "type": "String"
                },
                {
                    "name": "pluginUid",
                    "description": "The unique identifier for the plugin",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1783,
            "description": "Loads a controller for a plugin and attempts to register the route with the\nRequestHandler.",
            "static": 1,
            "itemtype": "method",
            "name": "loadController",
            "params": [
                {
                    "name": "pathToController",
                    "description": "The absolute file path to the controller",
                    "type": "String"
                },
                {
                    "name": "pluginUid",
                    "description": "The unique identifier for the plugin",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1835,
            "description": "Derives the name of a plugin service instance.  The function attempts to get\nthe name of the service by looking to see if the service has implemented the\ngetName function.  If it has not then the service name is set to be the file\nname minus any extension.",
            "static": 1,
            "itemtype": "method",
            "name": "getServiceName",
            "params": [
                {
                    "name": "pathToService",
                    "description": "The file path to the service"
                },
                {
                    "name": "service",
                    "description": "The service prototype"
                }
            ],
            "return": {
                "description": "The derived service name",
                "type": "String"
            },
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1862,
            "description": "<b>NOTE: DO NOT CALL THIS DIRECTLY</b><br/>\nThe function is called when a command is recevied to uninstall a plugin.\nThe function builds out the appropriate options then calls the\nuninstallPlugin function.  The result is then sent back to the calling\nprocess via the CommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "onUninstallPluginCommandReceived",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "The ID of the in-progress job that this\nprocess is intended to join.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1894,
            "description": "<b>NOTE: DO NOT CALL THIS DIRECTLY</b><br/>\nThe function is called when a command is recevied to validate that a plugin is available to this process for install.\nThe function builds out the appropriate options then calls the\nuninstallPlugin function.  The result is then sent back to the calling\nprocess via the CommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "onIsPluginAvailableCommandReceived",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "The ID of the in-progress job that this\nprocess is intended to join.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1927,
            "description": "<b>NOTE: DO NOT CALL THIS DIRECTLY</b><br/>\nThe function is called when a command is recevied to install plugin\ndependencies.  The result is then sent back to the calling process via the\nCommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "onIsPluginAvailableCommandReceived",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "The ID of the in-progress job that this\nprocess is intended to join.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\plugin_service.js",
            "line": 1959,
            "description": "<b>NOTE: DO NOT CALL THIS DIRECTLY</b><br/>\nThe function is called when a command is recevied to initialize a plugin.\nThe result is then sent back to the calling process via the\nCommandService.",
            "static": 1,
            "itemtype": "method",
            "name": "onIsPluginAvailableCommandReceived",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "jobId",
                            "description": "The ID of the in-progress job that this\nprocess is intended to join.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "PluginService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 18,
            "description": "Service for managing the site's navigation",
            "class": "TemplateService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 525,
            "static": 1,
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "ls",
                    "description": "",
                    "type": "Localization"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "TemplateService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\section_service.js",
            "line": 560,
            "static": 1,
            "itemtype": "method",
            "name": "isValidType",
            "params": [
                {
                    "name": "|{Object}",
                    "description": "type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 70,
            "description": "Indicates if the data from the registered flags\nshould be reprocessed.  The value is FALSE by default.",
            "itemtype": "property",
            "name": "reprocess",
            "type": "{Boolean}",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 92,
            "description": "A container that provides the mapping for global call backs.  These should\nonly be added to at the start of the application or on plugin install/update.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "",
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 113,
            "description": "Sets the prioritized theme to use when loading templates",
            "itemtype": "method",
            "name": "setTheme",
            "params": [
                {
                    "name": "theme",
                    "description": "The name of the theme.",
                    "type": "String"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 123,
            "description": "Retrieves the prioratized theme",
            "itemtype": "method",
            "name": "getTheme",
            "return": {
                "description": "The prioritized theme to use when loading templates",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 133,
            "description": "Retrieves the raw template based on a priority.  The path to the template is\nderived from the specified relative path and the following order of\ndirectories:\n<ol>\n<li>The theme provided by \"getTheme\" if not null</li>\n<li>The globally set active_theme</li>\n<li>Iterates over the list of active plugins looking for the template</li>\n<li>The system template directory</li>\n</ol>",
            "itemtype": "method",
            "name": "getTemplateContentsByPriority",
            "params": [
                {
                    "name": "relativePath",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 192,
            "description": "Loads a template file along with any encountered sub-template files and\nprocesses any flags.  The call back provides any error encountered and a\nsecond parameter that is the transformed content.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "The relative location of the template file.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 214,
            "description": "Scans the template for flags.  The callback provides any error and a second\nparameter that is the populated template with any registered flags replaced.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "content",
                    "description": "The raw content to be inspected for flags",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 263,
            "description": "Called when a flag is encountered by the processing engine.  The function is\nresponsible for delegating out the responsibility of the flag to the\nregistered entity.  Some flags are handled by default (although they can\nalways be overriden locally or globally).  The following flags are considered\n\"baked in\" and will be handled automatically unless overriden:\n<ul>\n<li>^loc_xyz^ - A localization flag.  When provided, the Localization\ninstance will have its \"get\" function called in an attempt to retrieve the\nproperly translated value for the key (the part betwee \"^loc_\" and the ending\n\"^\").\n</li>\n<li>^tmp_somedir=someotherdir=templatefileminusext^ - Specifies a\nsub-template that should be loaded processed.  The file is expected to have\na .html extension.\n</li>\n</ul>",
            "itemtype": "method",
            "name": "processFlag",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag to be processed. The value should NOT contain\nthe carrot (^) prefix or postfix.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 321,
            "description": "When a sub-template flag is encountered by the processing engine this\nfunction is called to parse the flag and delegate out the loading and\nprocessing of the sub-template.",
            "itemtype": "method",
            "name": "handleTemplateReplacement",
            "params": [
                {
                    "name": "flag",
                    "description": "The sub-template flag",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 342,
            "description": "Called when the processing engine encounters a non-sub-template flag.  The\nfunction delegates the content transformation out to either the locally or\nglobally registered function.  In the event that a value was registered and not\na function then the value is used as the second parameter in the callback.\nDuring template re-assembly the value will be converted to a string.",
            "itemtype": "method",
            "name": "handleReplacement",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag to transform",
                    "type": "String"
                },
                {
                    "name": "replacement",
                    "description": "The value can either be a function to handle the\nreplacement or a value.",
                    "type": "Mixed"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 385,
            "description": "Registers a value or function for the specified",
            "itemtype": "method",
            "name": "registerLocal",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag name to map to the value when encountered in a\ntemplate.",
                    "type": "String"
                },
                {
                    "name": "callbackFunctionOrValue",
                    "description": "The function to execute to perform the\ntransformation or the value to substitute in place of the flag.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "TRUE when registered successfully, FALSE if not",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 400,
            "description": "Retrieves the content template names and locations for the active theme.",
            "itemtype": "method",
            "name": "getTemplatesForActiveTheme",
            "params": [
                {
                    "name": "cb",
                    "description": "A call back that provides two parameters: cb(err, [{templateName: templateLocation])",
                    "type": "Function"
                }
            ],
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 454,
            "description": "Retrieves the content templates that are available for use to render\nArticles and pages.",
            "itemtype": "method",
            "name": "getAvailableContentTemplates",
            "return": {
                "description": "An array of template definitions",
                "type": "Array"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 474,
            "description": "Registers a value or function for the specified",
            "static": 1,
            "itemtype": "method",
            "name": "registerGlobal",
            "params": [
                {
                    "name": "flag",
                    "description": "The flag name to map to the value when encountered in a\ntemplate.",
                    "type": "String"
                },
                {
                    "name": "callbackFunctionOrValue",
                    "description": "The function to execute to perform the\ntransformation or the value to substitute in place of the flag.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "TRUE when registered successfully, FALSE if not",
                "type": "Boolean"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 490,
            "description": "Retrieves the default path to a template file based on the assumption that\nthe provided path is relative to the pencilblue/templates/ directory.",
            "static": 1,
            "itemtype": "method",
            "name": "getDefaultPath",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute path",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 503,
            "description": "Retrieves the path to a template file based on the assumption that\nthe provided path is relative to the pencilblue/plugins/[themeName]/templates/ directory.",
            "static": 1,
            "itemtype": "method",
            "name": "getCustomPath",
            "params": [
                {
                    "name": "templateLocation",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute path",
                "type": "String"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 516,
            "description": "Compiles the content be eagerly searching for flags/directives.  The static\ncontent is also placed into an object.  Whether static or a flag, an object\nis created and pushed into an array.  Each object has two properties: \"type\"\nthat describes the type of template part it is (static, flag).  \"val\" the\nstring value of the part.",
            "static": 1,
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "text",
                    "description": "The template text to compile",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "The starting flag marker",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'^'"
                },
                {
                    "name": "end",
                    "description": "The ending flag marker",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'^'"
                }
            ],
            "return": {
                "description": "The array template parts",
                "type": "Array"
            },
            "class": "TemplateService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 609,
            "description": "Encodes the value for an HTML document when a value is provided.",
            "itemtype": "method",
            "name": "encode",
            "params": [
                {
                    "name": "doHtmlEncoding",
                    "description": "Sets the property to encode the value to HTML",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The current value of the htmlEncode property",
                "type": "Boolean"
            },
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 622,
            "description": "Specifies that the value should not be encoded for HTML",
            "itemtype": "method",
            "name": "skipEncode",
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 630,
            "description": "Specifies that the value should be encoded for HTML",
            "itemtype": "method",
            "name": "doEncode",
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 638,
            "description": "Retrieves the processed value represented by this object.",
            "itemtype": "method",
            "name": "val",
            "return": {
                "description": "The processed value",
                "type": "String"
            },
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\template_service.js",
            "line": 651,
            "description": "Overrides the toString function in order to properly serialize the value.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of the value that follows the\nprocessing instructions.",
                "type": "String"
            },
            "class": "TemplateValue",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 33,
            "description": "Takes the URL path and tests it against registered routes.",
            "static": 1,
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The themed route specification for the first route that\nmatches the given URL path.  When no routes match NULL is returned.",
                "type": "Object"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 55,
            "description": "Look at a specific content type to see if a matching URL key exists.  An\noptional ID can be provided to ensure that only an existing key for the\nobject with that ID exists.",
            "itemtype": "method",
            "name": "existsForType",
            "params": [
                {
                    "name": "params",
                    "description": "Contains the options for the function.  \"url\"\n(string) and \"type\" (string) are required.  \"id\" (string) is optional.",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 102,
            "description": "Takes a variable set of arguments and joins them together to form a URL path.",
            "itemtype": "method",
            "name": "urlJoin",
            "return": {
                "description": "a URL path",
                "type": "String"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 120,
            "description": "Takes a url and extracts the wild card part.",
            "itemtype": "method",
            "name": "getCustomUrl",
            "params": [
                {
                    "name": "prefix",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The custom part of the URL",
                "type": "String"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 145,
            "description": "Determines whether a URL is external to the system by parsing the URL and\nthen looking to see if the host matches that of the provided request.",
            "itemtype": "method",
            "name": "isExternalUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "request",
                    "description": "",
                    "type": "Request"
                }
            ],
            "return": {
                "description": "TRUE if the link is external to the system, FALSE if not.",
                "type": "Boolean"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\url_service.js",
            "line": 171,
            "description": "Indicates if the URL is fully qualified, meaning that the URL provides the\n'http' protocol at the beginning of the URL.",
            "itemtype": "method",
            "name": "isFullyQualifiedUrl",
            "params": [
                {
                    "name": "urlStr",
                    "description": "The URL to inspect",
                    "type": "String"
                }
            ],
            "return": {
                "description": "TRUE if fully qualified, FALSE if not",
                "type": "Boolean"
            },
            "class": "UrlService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 28,
            "description": "Gets the full name of a user",
            "itemtype": "method",
            "name": "getFullName",
            "params": [
                {
                    "name": "userId",
                    "description": "The object Id of the user",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 56,
            "description": "Gets the full names for the supplied authors",
            "itemtype": "method",
            "name": "getAuthors",
            "params": [
                {
                    "name": "objArry",
                    "description": "An array of user object",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 76,
            "description": "Retrieves the available access privileges to assign to a user",
            "itemtype": "method",
            "name": "getAdminOptions",
            "params": [
                {
                    "name": "session",
                    "description": "The current session object",
                    "type": "Object"
                },
                {
                    "name": "ls",
                    "description": "The localization object",
                    "type": "Object"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 131,
            "description": "Sends a verification email to an unverified user",
            "itemtype": "method",
            "name": "sendVerificationEmail",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 154,
            "description": "Sends a password reset email to a user",
            "itemtype": "method",
            "name": "sendPasswordResetEmail",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                },
                {
                    "name": "passwordReset",
                    "description": "A password reset object containing the verification code",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 180,
            "description": "Checks to see if a proposed user name or email is already in the system",
            "itemtype": "method",
            "name": "isUserNameOrEmailTaken",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "User object Id to exclude from the search",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 203,
            "description": "Gets the total counts of a username and email in both the user and unverified_user collections",
            "itemtype": "method",
            "name": "getExistingUsernameEmailCounts",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "User object Id to exclude from the search",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\entities\\user_service.js",
            "line": 237,
            "description": "Verifies if a user has the provided access level or higher",
            "itemtype": "method",
            "name": "hasAccessLevel",
            "params": [
                {
                    "name": "uid",
                    "description": "The user's object Id",
                    "type": "String"
                },
                {
                    "name": "accessLevel",
                    "description": "The access level to test against",
                    "type": "Number"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "UserService",
            "module": "Services",
            "submodule": "Entities"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_available_job.js",
            "line": 38,
            "description": "Retrieves the tasks needed to contact each process in the cluster to\nuninstall the plugin.",
            "itemtype": "method",
            "name": "getInitiatorTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginAvailableJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_available_job.js",
            "line": 70,
            "description": "Retrieves the tasks needed to validate that the plugin is available for\ninstall.",
            "itemtype": "method",
            "name": "getWorkerTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginAvailableJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_dependencies_job.js",
            "line": 38,
            "description": "Retrieves the tasks needed to contact each process in the cluster to\nuninstall the plugin.",
            "itemtype": "method",
            "name": "getInitiatorTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginDependenciesJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_dependencies_job.js",
            "line": 71,
            "description": "Retrieves the tasks needed to validate that the plugin is available for\ninstall.",
            "itemtype": "method",
            "name": "getWorkerTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginDependenciesJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_initialize_job.js",
            "line": 38,
            "description": "Retrieves the tasks needed to contact each process in the cluster to\ninitialize the plugin.",
            "itemtype": "method",
            "name": "getInitiatorTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginInitializeJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_initialize_job.js",
            "line": 70,
            "description": "Retrieves the tasks needed to initialize the plugin for this process.",
            "itemtype": "method",
            "name": "getWorkerTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginInitializeJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_install_job.js",
            "line": 49,
            "description": "Retrieves the tasks needed to contact each process in the cluster to\nuninstall the plugin.",
            "itemtype": "method",
            "name": "getInitiatorTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginInstallJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_install_job.js",
            "line": 128,
            "description": "Retrieves 0 tasks because the PluginInstallJob is a coordinator job.  It is\na combination of smaller jobs that execute across the cluster.",
            "itemtype": "method",
            "name": "getWorkerTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginInstallJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_install_job.js",
            "line": 138,
            "itemtype": "method",
            "name": "doPersistenceTasks",
            "class": "PluginInstallJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_job_runner.js",
            "line": 34,
            "description": "The unique identifier of the plugin to be uninstalled",
            "itemtype": "property",
            "name": "pluginUid",
            "type": "{String}",
            "class": "PluginJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_job_runner.js",
            "line": 41,
            "description": "Sets the unique plugin identifier for the plugin to be uninstalled",
            "itemtype": "method",
            "name": "setPluginUid",
            "params": [
                {
                    "name": "The",
                    "description": "plugin identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This instance",
                "type": "PluginUninstallJob"
            },
            "class": "PluginJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_job_runner.js",
            "line": 52,
            "description": "Retrieves the identifier of the plugin to be uninstalled",
            "itemtype": "method",
            "name": "getPluginUid",
            "return": {
                "description": "The plugin UID",
                "type": "String"
            },
            "class": "PluginJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_job_runner.js",
            "line": 61,
            "description": "Called when the tasks have completed execution and isInitiator = FALSE.  The\nfunction ispects the results of each processes' execution and attempts to\ndecipher if an error occurred.  The function calls back with a result object\nthat provides four properties: success (Boolean), id (String), pluginUid\n(String), results (Array of raw results).",
            "itemtype": "method",
            "name": "processClusterResults",
            "params": [
                {
                    "name": "err",
                    "description": "The error that occurred (if any) during task execution",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "An array containing the result of each executed task",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that occurred (if exists) and the second is an object that encloses\nthe properties that describe the job as well as the raw results.",
                    "type": "Function"
                }
            ],
            "class": "PluginJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_uninstall_job.js",
            "line": 49,
            "description": "The command to that intends for the the uninstall job to run",
            "static": 1,
            "itemtype": "property",
            "name": "UNINSTALL_PLUGIN_COMMAND",
            "type": "{String}",
            "class": "PluginUninstallJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_uninstall_job.js",
            "line": 57,
            "description": "Retrieves the tasks needed to contact each process in the cluster to\nuninstall the plugin.",
            "itemtype": "method",
            "name": "getInitiatorTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginUninstallJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_uninstall_job.js",
            "line": 83,
            "description": "Retrieves the tasks needed to uninstall the plugin from this executing\nprocess.  The tasks are executed in series:\n<ol>\n<li>Call the plugin's onUninstall function</li>\n<li>Unregister any routes and controllers</li>\n<li>Remove any plugin settings</li>\n<li>Remove any theme settings</li>\n<li>Remove the plugin record from persistence</li>\n<li>Switch active theme if needed</li>\n<li>Deactivate the plugin from this process</li>\n</ol>",
            "itemtype": "method",
            "name": "getWorkerTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "PluginUninstallJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\plugins\\plugin_uninstall_job.js",
            "line": 213,
            "description": "Called when the tasks have completed execution and isInitiator = FALSE. The\nfunction blindly passes the results of the tasks back to the callback.",
            "params": [
                {
                    "name": "err",
                    "description": "The error that occurred (if any) during task execution",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "An array containing the result of each executed task",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that occurred (if exists) and the second is an array of Boolean\nvalues that indicate the success or failure of each task.",
                    "type": "Function"
                }
            ],
            "class": "PluginUninstallJob",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 37,
            "description": "The number of tasks to run in parallel",
            "itemtype": "property",
            "name": "parallelLimit",
            "type": "{Integer}",
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 44,
            "description": "Sets the number of tasks to run in parallel",
            "itemtype": "method",
            "name": "setParallelLimit",
            "params": [
                {
                    "name": "max",
                    "description": "The maximum number of tasks to run in parallel",
                    "type": "Integer"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 53,
            "description": "Kicks off the set of tasks for the job.  The implementation wraps the items\nin a domain in an attempt to provide a level of error handling.  When a\nqualifying error is intercepted by the domain processResults is called\nproviding the error and all other task execution is halted.",
            "see": [
                "JobRunner#run"
            ],
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 98,
            "description": "Responsible for providing an array or hash of tasks that will be executed by\nthe job.  The extending implmentation MUST override this function or an\nerror will be thrown.",
            "itemtype": "method",
            "name": "getTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 109,
            "description": "Called once after job execution.  It is recommended that extending\nimplmentations use this function to peform any ETL operations to prepare\ndata for the callback.",
            "itemtype": "method",
            "name": "processResults",
            "params": [
                {
                    "name": "err",
                    "description": "The error generated during task execution if exists",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "The result of each tasks' execution.",
                    "type": "Object|Array"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\async_job_runner.js",
            "line": 121,
            "description": "Called directly before the first tasks begins to execute.  It is recommended\nthat the extending implementation override this function in order to call\nthe \"onStart\" function.",
            "itemtype": "method",
            "name": "onBeforeFirstTask",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes one optional error parameter",
                    "type": "Function"
                }
            ],
            "class": "AsyncJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 35,
            "description": "Indicates if the job is to run as the initiator or a worker.  When TRUE, the\njob sends commands to all processes in the cluster to perform the\njob.  When FALSE, the actual job is performed.",
            "itemtype": "property",
            "name": "isInitiator",
            "type": "{Boolean}",
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 44,
            "description": "Indicates if the job is to run as the initiator or a worker.  When TRUE, the\njob sends commands to all processes in the cluster to perform the\njob.  When FALSE, the actual job is performed on this process.",
            "itemtype": "method",
            "name": "setRunAsInitiator",
            "params": [
                {
                    "name": "isInitiator",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "This instance",
                "type": "ClusterJobRunner"
            },
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 57,
            "description": "Retrieves the tasks to be executed by this job.  The tasks provided to the\ncallback are determined by the isInitiator property.",
            "see": [
                "AsyncJobRunner#getTasks"
            ],
            "itemtype": "method",
            "name": "getTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 73,
            "description": "Retrieves the tasks needed to contact each process in the cluster to\nperform the job.",
            "itemtype": "method",
            "name": "getInitiatorTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 83,
            "description": "Retrieves the tasks needed to perform the job on this process.",
            "itemtype": "method",
            "name": "getWorkerTasks",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, Object|Array)",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 92,
            "description": "Called when the job has completed its assigned set of tasks.  The function\nis responsible for processing the results and calling back with the refined\nresult.",
            "see": [
                "AsyncJobRunner#processResults"
            ],
            "itemtype": "method",
            "name": "processResults",
            "params": [
                {
                    "name": "err",
                    "description": "The error that occurred (if any) during task execution",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "An array containing the result of each executed task",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that occurred (if exists) and the second is dependent on the\nisInitiator property.  See processClusterResults and processWorkerResults\nfor more details.",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 131,
            "description": "Called when the tasks have completed execution and isInitiator = FALSE.  The\nfunction ispects the results of each processes' execution and attempts to\ndecipher if an error occurred.  The function calls back with a result object\nthat provides four properties: success (Boolean), id (String), pluginUid\n(String), results (Array of raw results).",
            "itemtype": "method",
            "name": "processClusterResults",
            "params": [
                {
                    "name": "err",
                    "description": "The error that occurred (if any) during task execution",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "An array containing the result of each executed task",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that occurred (if exists) and the second is an object that encloses\nthe properties that describe the job as well as the raw results.",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 148,
            "description": "Called when the tasks have completed execution and isInitiator = FALSE. The\nfunction blindly passes the results of the tasks back to the callback.",
            "params": [
                {
                    "name": "err",
                    "description": "The error that occurred (if any) during task execution",
                    "type": "Error"
                },
                {
                    "name": "results",
                    "description": "An array containing the result of each executed task",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that occurred (if exists) and the second is an array of Boolean\nvalues that indicate the success or failure of each task.",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 161,
            "description": "Called before the start of task execution.  When the property isInitiator =\nTRUE the onStart function is called to mark the start of the job.  It is not\ncalled for others because it is assumed that workers are already part of an\nin-progress cluster job and that an existing job id has been provided.",
            "itemtype": "method",
            "name": "onBeforeFirstTask",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. The first is an\nError (if occurred) and the second is a boolean value that indicates if the\nfunction successfully completed any pre-requsite operations before task\nexecution begins.",
                    "type": "Function"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\cluster_job_runner.js",
            "line": 179,
            "description": "Creates a simple task that sends a command to the entire cluster then waits\nfor all responses.  Success if determined by the lack of an Error in the\ncallback in addition to the lack of an \"error\" property on each item in the\nresults array provided by the cb from the call to send the command.",
            "itemtype": "method",
            "name": "createCommandTask",
            "params": [
                {
                    "name": "type",
                    "description": "The command type",
                    "type": "String"
                },
                {
                    "name": "command",
                    "description": "The command to broadcast to the cluster.",
                    "type": "Object"
                }
            ],
            "class": "ClusterJobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 32,
            "description": "An instace of DAO to provide direct access to the DB if it is needed.",
            "itemtype": "property",
            "name": "dao",
            "type": "{DAO}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 39,
            "description": "Holds the unique identifier for the job",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 46,
            "description": "The percentage of the overall work that this job accounts for.  If this\njob is run by itself then the value should be 1.  This means that 100%\nof the job is completed by this job.  If, for example, the value is .333\nthen it is assumed that this job accounts for 33% or one third of the\nover all work necessary to complete the job.  This is handy when a large\njob is made up of smaller jobs.  This value will assist in allowing the\njobs to calculate their update increments.  The number must be a value\nbetween 0 (exclusive) & 1 (inclusive).",
            "itemtype": "property",
            "name": "taskFactor",
            "type": "{Float}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 62,
            "description": "The name of the persistence entity that contains the log statements for the\njob",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "JOB_LOG_STORE_NAME",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 72,
            "description": "The name of the persistence entity that contains the job descriptor",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "JOB_STORE_NAME",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 81,
            "description": "The status code for a job that is in progress",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_START_STATUS",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 90,
            "description": "The status code for a job that has completed successfully",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_DONE_STATUS",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 99,
            "description": "The status code for a job that has generated a fatal error",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "DEFAULT_ERROR_STATUS",
            "type": "{String}",
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 108,
            "description": "The initialization function sets the job's name and ID as well as provide an\ninstace of DAO.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "name",
                    "description": "The job's name",
                    "type": "String"
                },
                {
                    "name": "jobId",
                    "description": "The job's unique identifier",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 123,
            "description": "Retrieves the unique identifier for the job",
            "itemtype": "method",
            "name": "getId",
            "return": {
                "description": "The job ID",
                "type": "String"
            },
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 145,
            "description": "Call this function once to start the job.  The job will execute the callback\nupon completion.",
            "itemtype": "method",
            "name": "run",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: The first is\nany error that was generated and the second is the implementation specific\nresult of the job.",
                    "type": "Function"
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 157,
            "description": "Logs a message to the system logger as well as to the persistence layer. The\nfunction takes a variable number of arguments.  A string message/pattern\nfollowed by the variables to fill in with that data.  See util.format or the\nimplementation for Winston loggers.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "message",
                    "description": "The message or pattern to log",
                    "type": "String"
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 189,
            "description": "To be called once by the extending implmentation to mark the start of the\njob.  The function persists the job record and makes it available to future\ncalls to onUpdate or onComplete.",
            "itemtype": "method",
            "name": "onStart",
            "params": [
                {
                    "name": "status",
                    "description": "The starting status of the job",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'RUNNING'"
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 209,
            "description": "To be called by the extending implmentation when progress has been made.\nThe incremental amount of progress should be provided keeping in mind that\nthe overall progress should not exceed 100.  Optionally, the status\nparameter may also be included.",
            "itemtype": "method",
            "name": "onUpdate",
            "params": [
                {
                    "name": "progressIncrement",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "status",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\jobs\\job_runner.js",
            "line": 241,
            "description": "Called once by the extending implementation when the job has completed\nexecution whether that be successful completion or by error.",
            "itemtype": "method",
            "name": "onCompleted",
            "params": [
                {
                    "name": "status",
                    "description": "The final status of the job.  If not provided the\nstatus will default to 'COMPLETED' or 'ERRORED' when an error is provided as\nthe second parameter.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "err",
                    "description": "The error, if any, that was generated by the job's\nexecution",
                    "type": "Error"
                }
            ],
            "class": "JobRunner",
            "module": "Services"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 41,
            "description": "Retrieve a value from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 75,
            "description": "Set a value in the cache",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\cache_entity_service.js",
            "line": 116,
            "description": "Purge the cache of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CacheEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 36,
            "description": "Retrieve a value from the database",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DBEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 70,
            "description": "Set a value in the database",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DBEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\db_entity_service.js",
            "line": 122,
            "description": "Purge the database of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "DBEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 32,
            "description": "Retrieve a value from the file system",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 51,
            "description": "Set a value in the file system",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\fs_entity_service.js",
            "line": 63,
            "description": "Purge the file system of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "FSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 35,
            "description": "Retrieve a value from the file system",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 61,
            "description": "Set a value in the file system",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\json_fs_entity_service.js",
            "line": 84,
            "description": "Purge the file system of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "JSONFSEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 37,
            "description": "Retrieve a value from memory",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 66,
            "description": "Set a value in memory",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\memory_entity_service.js",
            "line": 100,
            "description": "Purge membory of a value",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "MemoryEntityService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 48,
            "description": "Retrieves the setting value from various storage areas.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Object"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 104,
            "description": "Persists a new value for the setting.  When the setting does not exist a new\none is created.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\simple_layered_service.js",
            "line": 131,
            "description": "Removes the value from storage.",
            "itemtype": "method",
            "name": "purge",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function"
                }
            ],
            "class": "SimpleLayeredService",
            "module": "Services",
            "submodule": "Storage"
        },
        {
            "file": "include\\service\\template_entity_service.js",
            "line": 40,
            "description": "Retrieve a value from the file system.  Will callback with an object with\ntwo properties.  \"key\" the file path.  \"parts\" an array of objects.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "the file path to the template",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback function that takes two parameters: cb(Error, Object)",
                    "type": "Function"
                }
            ],
            "class": "TemplateEntityService",
            "module": "Services"
        },
        {
            "file": "include\\service\\template_entity_service.js",
            "line": 75,
            "description": "This function is not implemented.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "The absolute file path",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The string content to set",
                    "type": "*"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TemplateEntityService",
            "module": "Services"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 29,
            "description": "The mongo collection that stores the sessions",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 34,
            "description": "Responsible for retrieving the session for persistent storage.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The identifier of the session to retrieve.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [Object])",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 57,
            "description": "Responsible for persisting the session object between user requests",
            "params": [
                {
                    "name": "session",
                    "description": "The session object to store.  The session object must contain\nthe following in addition to other data:\n<pre>\n\n</pre>",
                    "type": "!~YUIDOC_LINE~!\tuid: [primitive]!~YUIDOC_LINE~!"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, 'OK')",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "set",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 83,
            "description": "Deletes a session if it exists.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [int SESSIONS_CLEARED])",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 98,
            "description": "Constructs a query to find a session in Mongo",
            "itemtype": "method",
            "name": "getSessionQuery",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The session identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 111,
            "description": "Queries for any expired sessions in Mongo and deletes them",
            "itemtype": "method",
            "name": "clearExpired",
            "params": [
                {
                    "name": "cb",
                    "description": "cb Callback of form cb(err, [int SESSIONS_CLEARED])",
                    "type": "Function"
                }
            ],
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 135,
            "description": "Responsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\mongo_session_store.js",
            "line": 146,
            "description": "Responsable for ensuring that the mechanism that expires sessions becomes\nactive.",
            "class": "MongoSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 29,
            "description": "The prefix to prepend to the session ID in order to construct a cache key",
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 34,
            "description": "Responsable for retrieving the session for persistent storage.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The identifier of the session to retrieve.",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [Object])",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 54,
            "description": "Responsable for persisting the session object between user requests",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "session",
                    "description": "The session object to store.  The session object must contain\nthe following in addition to other data:\n<pre>\n{\n\tuid: [primitive]\n}\n</pre>",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, 'OK')",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 77,
            "description": "Deletes a session if it exists.",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback of form cb(err, [int SESSIONS_CLEARED])",
                    "type": "Function"
                }
            ],
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 89,
            "description": "Constructs a session cache key provided a session id.",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "[RedisSessionStore.SESSION_KEY_PREFIX][sessionId]",
                "type": "String"
            },
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 98,
            "description": "Responsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\storage\\redis_session_store.js",
            "line": 107,
            "description": "Repsonsible for ensuring that the mechanism that expires sessions becomes\nactive.",
            "class": "RedisSessionStore",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 53,
            "description": "Retrieves a session for the current request.  When the session ID is\navailable the existing session is retrieved otherwise a new session is\ncreated.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "request",
                    "description": "The request descriptor",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "The callback(ERROR, SESSION_OBJ)",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 98,
            "description": "Closes the session and persists it when no other requests are currently\naccessing the session.",
            "itemtype": "method",
            "name": "close",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 137,
            "description": "Sets the session in a state that it should be terminated after the last request has completed.",
            "itemtype": "method",
            "name": "end",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 149,
            "description": "NOTE: This function should only be called <b>AFTER</b> SessionHandler.open\n is called and callsback successfully.",
            "itemtype": "method",
            "name": "gl",
            "params": [
                {
                    "name": "sessionId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Session",
                "type": "Object"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 163,
            "description": "Keeps a reference to the session in memory in case multiple requests come in.",
            "itemtype": "method",
            "name": "setLocal",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 182,
            "description": "Purges the session from local memory unless multiple requests have accessed\nthe session.",
            "itemtype": "method",
            "name": "purgeLocal",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The session identifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 213,
            "description": "Tests if the session is stored locally",
            "itemtype": "method",
            "name": "isLocal",
            "params": [
                {
                    "name": "sessionId",
                    "description": "The ID of the session to search for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the session is stored locally",
                "type": "Boolean"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 224,
            "description": "Creates the shell of a session object",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "request",
                    "description": ""
                }
            ],
            "return": {
                "description": "Session",
                "type": "Object"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 247,
            "description": "Generates a unique client ID based on the user agent and the remote address.",
            "itemtype": "method",
            "name": "getClientId",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Unique Id",
                "type": "String"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 260,
            "description": "Loads a session store based on the configuration.",
            "itemtype": "method",
            "name": "getSessionStore",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 290,
            "description": "Extracts the session id from the returned cookie",
            "itemtype": "method",
            "name": "getSessionIdFromCookie",
            "params": [
                {
                    "name": "request",
                    "description": "The object that describes the incoming user request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Session Id if available NULL if it cannot be found",
                "type": "String"
            },
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\session\\session.js",
            "line": 317,
            "description": "Shuts down the sesison handler and the associated session store",
            "class": "SessionHandler",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 27,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "BROKER",
            "type": "{CommandBroker}",
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 34,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "BROKER",
            "type": "{CommandBroker}",
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 41,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "COMMAND_CHANNEL",
            "type": "{String}",
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 48,
            "description": "A hash of the commands that were sent and expect a response.  Each hash key\ncontains a callback function that will be called when either the receiving\nentity responds or the timeout occurs.",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "AWAITING_RESPONSE",
            "type": "{Object}",
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 59,
            "description": "Initializes the service and the broker implementation.  The broker is\ndetermined by the configuration value of \"command.broker\".  This value can\nbe \"redis\" for the out of the box implementation for Redis or an absolute\npath to another implementation.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, TRUE/FALSE)",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 102,
            "description": "Shuts down the command service and the broker if initialized",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, TRUE/FALSE)",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 120,
            "description": "Registers a handler for incoming commands of the specified type.",
            "static": 1,
            "itemtype": "method",
            "name": "registerForType",
            "params": [
                {
                    "name": "type",
                    "description": "The name/type of the command to handle",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "A function that takes two parameters:\nhandler(channel, command). where channel is a string and command is an\nobject.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if the the handler was registered, FALSE if not.",
                "type": "Boolean"
            },
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 144,
            "description": "Unregisters a handler for the specified type.",
            "static": 1,
            "itemtype": "method",
            "name": "unregisterForType",
            "params": [
                {
                    "name": "type",
                    "description": "The name/type of the command that the handler is\nregistered for",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler function to unregister",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if the handler was unregistered, FALSE if not.",
                "type": "Boolean"
            },
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 171,
            "description": "Responsible for delegating out the received command to the registered\nhandlers.  The command parameter must be an object, must have a type\nproperty that is a string, and must have a registered handler for the\nspecified type.",
            "static": 1,
            "itemtype": "method",
            "name": "notifyOfCommand",
            "params": [
                {
                    "name": "command",
                    "description": "The command to delegate",
                    "type": "Object"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 212,
            "description": "Sends a command to all processes iin the cluster and waits for a response\nfrom all before calling back.",
            "static": 1,
            "itemtype": "method",
            "name": "sendCommandToAllGetResponses",
            "params": [
                {
                    "name": "type",
                    "description": "The name/type of the command being sent",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options for the command.  The options object\nbecomes the command object.  Custom properties to be part of the command can\nbe added.  However, certain properties do have special meaning such as \"id\",\n\"to\", \"from\", \"timeout\", \"includeme\".  These special properties may be\noverriden by this function or one it calls in order for the commands to\nfunction properly.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "ignoreme",
                            "description": "",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "Timeout in milliseconds for each\nprocess to respond.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "2000"
                        },
                        {
                            "name": "progress",
                            "description": "A function called right before each\ncommand is sent.  The function should take two parameters.  The first is the\nindex of the task being executed and the second is the total number of tasks.",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 301,
            "description": "Sends a command to a single process in the cluster expecting a response.",
            "static": 1,
            "itemtype": "method",
            "name": "sendCommandGetResponse",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "onResponse",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 353,
            "description": "Provides a mechanism to respond to a the entity that sent the command.",
            "static": 1,
            "itemtype": "method",
            "name": "sendInResponseTo",
            "params": [
                {
                    "name": "command",
                    "description": "The command that was sent to ths process",
                    "type": "Object"
                },
                {
                    "name": "responseCommand",
                    "description": "The command to send back to the entity that sent the first command.",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Command ID)",
                    "type": "Function"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 384,
            "description": "Sends a command to the cluster",
            "static": 1,
            "itemtype": "method",
            "name": "sendCommand",
            "params": [
                {
                    "name": "type",
                    "description": "The command name/type",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options that will be serialized and sent to the other processes in the cluster",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "to",
                            "description": "The cluster process that should handle the message",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Command ID)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\command_service.js",
            "line": 432,
            "description": "The global handler for incoming commands.  It registers itself with the\nbroker and then when messages are received it verifies that the message is\nmeant for this member of the cluster (or all members) then proceeds to\nhandoff to the function that will delegate out to the handlers.",
            "static": 1,
            "itemtype": "method",
            "name": "onCommandReceived",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel to listen for incoming commands",
                    "type": "String"
                },
                {
                    "name": "command",
                    "description": "The command to verify and delegate",
                    "type": "Object"
                }
            ],
            "class": "CommandService",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 27,
            "description": "Client used to publish commands to the cluster",
            "itemtype": "property",
            "name": "publishClient",
            "type": "{Client}",
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 34,
            "description": "Client used to subscribe to commands to the cluster",
            "itemtype": "property",
            "name": "publishClient",
            "type": "{Client}",
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 43,
            "description": "The hash of handlers for each channel subscribed to",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "SUBSCRIBERS",
            "type": "{Object}",
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 52,
            "description": "Initializes the broker by creating the connections to Redis and registering\nfor the message event.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 71,
            "description": "Shuts down the broker by closing the open connections to Redis.",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 91,
            "description": "Called when a member of the cluster has published a command.  The function\ninspects that it has a handler for the channel then delegates the command\nback to the handler.",
            "itemtype": "method",
            "name": "onCommandReceived",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel the message was pushed to",
                    "type": "String"
                },
                {
                    "name": "commandStr",
                    "description": "The message that was published",
                    "type": "String"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 115,
            "description": "Sends a message to the specified channel",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel to send the message to",
                    "type": "String"
                },
                {
                    "name": "command",
                    "description": "The command to send to the cluster",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, 1 on success/FALSE on failure)",
                    "type": "Function"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\command\\redis_command_broker.js",
            "line": 134,
            "description": "Registers a handler for messages on the specified channel.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "channel",
                    "description": "The channel to listen for messages on",
                    "type": "String"
                },
                {
                    "name": "onCommandReceived",
                    "description": "A handler function that takes two\narguments: onCommandReceived(channel, message) where channel is a string and\nmessage is an object.",
                    "type": "Function"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisCommandBroker",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 32,
            "description": "Retrieves the entire cluster status as an array of status objects.  The '_id'\nproperty uniquely identifies each process/node.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 51,
            "description": "Updates the status of a single node.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the process/node",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "The status information",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 76,
            "description": "Purges all statuses from storage.",
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 92,
            "description": "This function should only be called once at startup.  It is responsible for\nsetting up the collection and ensuring that the TTL index is configured\ncorrectly based on the the executing processes configuration.  <b>NOTE:</b>\nThe collection only supports one TTL value. The last process to startup and\nconfigure the index will win.  Please be careful to ensure that all PB\nprocesses/nodes have the same registry.update_interval value.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\mongo_registration_provider.js",
            "line": 135,
            "description": "Should be called during shutdown.  It is responsible for removing the\nprocess/node from the registry.",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "MongoRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 34,
            "description": "The Redis DB used for storage",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "REGISTRY_DB",
            "type": "{Integer}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 42,
            "description": "The character used to separate the registry key prefix from the unique value\nthat identifies the process/node.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "SEP",
            "type": "{String}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 51,
            "description": "The Redis client used to connect to the service registry",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "CLIENT",
            "type": "{Integer}",
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 59,
            "description": "Retrieves the entire cluster status as an array of status objects.  The '_id'\nproperty uniquely identifies each process/node.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 93,
            "description": "Updates the status of a single node.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the process/node",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "The status information",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 111,
            "description": "Purges all statuses from storage.",
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 128,
            "description": "This function should only be called once at startup.  It is responsible for\ncreating the Redis client that connects to the service registry.  It also\nensures the proper Redis DB is selected.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters. cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 142,
            "description": "Should be called during shutdown.  It is responsible for removing the\nprocess/node from the registry.",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "A callback that takes two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 160,
            "description": "Creates the cache key used to store the status update",
            "static": 1,
            "itemtype": "method",
            "name": "getKey",
            "params": [
                {
                    "name": "id",
                    "description": "The unique identifier for the node/process",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cache key to be used for storing the update",
                "type": "String"
            },
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\registry\\redis_registration_provider.js",
            "line": 171,
            "description": "Creates the glob pattern to be used to find service registry keys",
            "static": 1,
            "itemtype": "method",
            "name": "getPattern",
            "return": {
                "description": "The glob patern to be used to find all status updates",
                "type": "String"
            },
            "class": "RedisRegistrationProvider",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 33,
            "description": "The instance of the RegistrationProvider interface to use as the storage\nprovider.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "PROVIDER",
            "type": "{RedisRegistrationProvider|MongoRegistrationProvider}",
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 42,
            "description": "The default set of functions that gather the default set of information.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "ITEM_CALLBACKS",
            "type": "{Object}",
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 100,
            "description": "The handle to the interval that is set to ensure that updates are regularly\nsent to the storage provider.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "TIMER_HANDLE",
            "type": "{Integer}",
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 109,
            "description": "Retrieves the most recent status from the entire cluster.",
            "itemtype": "method",
            "name": "getClusterStatus",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Array)",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 118,
            "description": "Removes all entries from the server registry",
            "static": 1,
            "itemtype": "method",
            "name": "flush",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 128,
            "description": "Should only be called once at startup.  The function verifies that the\nregistry is enabled and initializes the correct storage provider.",
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 171,
            "description": "Called during shutdown.  The function is responsible for clearing any\nscheduled updates and shutting down the storage provider.",
            "static": 1,
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 190,
            "description": "Registers a function to be called on every status update.  The function\nshould take one parameter: a callback function that accepts two parameters,\nthe first being an error if it occurred and the second being the current\nvalue for the information requested.",
            "static": 1,
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "name",
                    "description": "The name and/or description of the information being\ngathered",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "function to be called to gather the data.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "TRUE if the function is successfully registered, FALSE if not.",
                "type": "Boolean"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 211,
            "description": "Performs the request for information and persists it through the storage\nprovider.",
            "static": 1,
            "itemtype": "method",
            "name": "doRegistration",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 252,
            "description": "Generates the unique key for the PB process/node.",
            "static": 1,
            "itemtype": "method",
            "name": "generateKey",
            "return": {
                "description": "The unique identifier",
                "type": "String"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\server_registration.js",
            "line": 262,
            "description": "Retrieves the first IP address found for the node.",
            "static": 1,
            "itemtype": "method",
            "name": "getIp",
            "return": {
                "description": "The first IP address found for the node",
                "type": "String"
            },
            "class": "ServerRegistration",
            "module": "Session"
        },
        {
            "file": "include\\system\\settings.js",
            "line": 18,
            "description": "SettingServiceFactory - Creates a service that will provide access to settings *",
            "class": "CommentService",
            "module": "Session"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 35,
            "description": "Retrieves the template for comments",
            "itemtype": "method",
            "name": "getCommentsTemplates",
            "params": [
                {
                    "name": "contentSettings",
                    "description": "The content settings to use with retrieval",
                    "type": "Object"
                },
                {
                    "name": "output",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\comments.js",
            "line": 59,
            "description": "Retrieves the necessary user information for a commenter",
            "itemtype": "method",
            "name": "getCommentingUser",
            "params": [
                {
                    "name": "user",
                    "description": "A user object",
                    "type": "Object"
                }
            ],
            "class": "CommentService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\media.js",
            "line": 18,
            "description": "TODO: add options like sizing\nTODO: move hard coded HTML to template",
            "class": "MediaService",
            "module": "Services"
        },
        {
            "file": "include\\theme\\media.js",
            "line": 33,
            "description": "Retrieves the correct embed HTML for a media object",
            "itemtype": "method",
            "name": "getMediaEmbed",
            "params": [
                {
                    "name": "mediaObject",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\media.js",
            "line": 68,
            "description": "Gets the proper CSS style for a media object",
            "itemtype": "method",
            "name": "getMediaStyleString",
            "params": [
                {
                    "name": "template",
                    "description": "Media embed HTML template",
                    "type": "String"
                },
                {
                    "name": "styleString",
                    "description": "The style string from the article layout's media directive",
                    "type": "String"
                }
            ],
            "class": "MediaService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 31,
            "description": "Retrieves the data needed for the top menu",
            "itemtype": "method",
            "name": "getTopMenu",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "localizationService",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 67,
            "description": "Retrieves the information needed to draw account buttons",
            "itemtype": "method",
            "name": "getAccountButtons",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "ls",
                    "description": "The localization service",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\theme\\top_menu.js",
            "line": 132,
            "description": "Returns a bootstrap ready ul list for a nav element",
            "itemtype": "method",
            "name": "getBootstrapNav",
            "params": [
                {
                    "name": "navigation",
                    "description": "Navigation object",
                    "type": "Object"
                },
                {
                    "name": "accountButtons",
                    "description": "Account buttons object",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "TopMenuService",
            "module": "Services",
            "submodule": "Theme"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 29,
            "description": "Pattern to validate a file name",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 38,
            "description": "Pattern to validate a semantic package version",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 47,
            "description": "A pattern to validate an email address",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 56,
            "description": "A pattern to validate a fully qualified URL",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 65,
            "description": "A pattern to validate a relative URL (no protocol, host, or port)",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "type": "{RegExp}",
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 74,
            "description": "Checks to see if the value is a valid ID string",
            "static": 1,
            "itemtype": "method",
            "name": "isIdStr",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 101,
            "description": "Validates an email address",
            "itemtype": "method",
            "name": "validateEmail",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 112,
            "description": "Validates an email address",
            "itemtype": "method",
            "name": "isEmail",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 127,
            "description": "Validates a version number",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateVersionNum",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 138,
            "description": "Validates a version number",
            "itemtype": "method",
            "name": "isVersionNum",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 153,
            "description": "Validates an URL",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateUrl",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 164,
            "description": "Validates an URL",
            "itemtype": "method",
            "name": "isUrl",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 179,
            "description": "Validates a file name",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateSafeFileName",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 190,
            "description": "Validates a file name",
            "itemtype": "method",
            "name": "isSafeFileName",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 205,
            "description": "Validates a string",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 216,
            "description": "Validates a string",
            "itemtype": "method",
            "name": "isStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 230,
            "description": "Validates a string is not empty",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateNonEmptyStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 241,
            "description": "Validates a string is not empty",
            "itemtype": "method",
            "name": "isNonEmptyStr",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 255,
            "description": "Validates an array",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 266,
            "description": "Validates an array",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 280,
            "description": "Validates an object",
            "deprecated": true,
            "itemtype": "method",
            "name": "validateObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 291,
            "description": "Validates an object",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "required",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 305,
            "description": "Validates that the value is an integer.",
            "static": 1,
            "itemtype": "method",
            "name": "isInt",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "Integer"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "Indicates",
                    "description": "if the value must be a number rather than a string representing a number.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 327,
            "description": "Validates that the value is a float.",
            "static": 1,
            "itemtype": "method",
            "name": "isFloat",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "Float"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "Indicates",
                    "description": "if the value must be a number rather than a string representing a number.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 349,
            "description": "Validates that the value is a number.",
            "static": 1,
            "itemtype": "method",
            "name": "isNum",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "Number"
                },
                {
                    "name": "required",
                    "description": "Indicates if the value is required. When\nFALSE, null will be an acceptable value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 366,
            "description": "Validates that the value is null, defined, an empty object, or an empty\nstring.",
            "static": 1,
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "*"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\validation\\validation_service.js",
            "line": 378,
            "description": "Validates that the value is a date object",
            "static": 1,
            "itemtype": "method",
            "name": "isDate",
            "params": [
                {
                    "name": "val",
                    "description": "The value under test",
                    "type": "*"
                }
            ],
            "return": {
                "description": "TRUE if the value is valid, FALSE if not",
                "type": "Boolean"
            },
            "class": "ValidationService",
            "module": "Services",
            "submodule": "Validation"
        },
        {
            "file": "include\\access_management.js",
            "line": 40,
            "description": "Retrieves the localized names of access levels",
            "itemtype": "method",
            "name": "getRoleNames",
            "params": [
                {
                    "name": "ls",
                    "description": "The localization service",
                    "type": "Object"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 64,
            "description": "Returns the constant name of an access level number",
            "itemtype": "method",
            "name": "getRoleName",
            "params": [
                {
                    "name": "accessLevel",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 109,
            "description": "Check to see if a user meets security requirements",
            "itemtype": "method",
            "name": "isAuthorized",
            "params": [
                {
                    "name": "session",
                    "description": "[description]",
                    "type": "Object"
                },
                {
                    "name": "requirements",
                    "description": "Object containing access requirements",
                    "type": "Object"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 136,
            "description": "Check to see if a session is authentic",
            "itemtype": "method",
            "name": "isAuthenticated",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 151,
            "description": "One way encrypt a string",
            "itemtype": "method",
            "name": "encrypt",
            "params": [
                {
                    "name": "valString!~YUIDOC_LINE~!#return",
                    "description": "{String} Encrypted string",
                    "type": "String"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\access_management.js",
            "line": 164,
            "static": 1,
            "itemtype": "method",
            "name": "generatePassword",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "8"
                }
            ],
            "class": "SecurityService",
            "module": "Services",
            "submodule": "Security"
        },
        {
            "file": "include\\admin_navigation.js",
            "line": 165,
            "description": "Retrive the admin navigation hierarchy",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "activeMenuItems",
                    "description": "Array of nav item names that are active",
                    "type": "Array"
                },
                {
                    "name": "ls",
                    "description": "Localization service",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Admin navigation",
                "type": "Object"
            },
            "class": "AdminNavigation",
            "module": "Services",
            "submodule": "Admin"
        },
        {
            "file": "include\\client_js.js",
            "line": 27,
            "description": "Creates a basic AngularJS controller with a repeat directive for templatizing",
            "itemtype": "method",
            "name": "getAngularController",
            "params": [
                {
                    "name": "objects",
                    "description": "Object to be passed into AngularJS scope",
                    "type": "Object"
                },
                {
                    "name": "modules",
                    "description": "Array of AngularJS module names",
                    "type": "Array"
                },
                {
                    "name": "directiveJS",
                    "description": "JavaScript to run after on-finish-render directive",
                    "type": "String"
                }
            ],
            "class": "ClientJS",
            "module": "Services"
        },
        {
            "file": "include\\client_js.js",
            "line": 66,
            "description": "Creates a JS tag that loads the specified url",
            "itemtype": "method",
            "name": "includeJS",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ClientJS",
            "module": "Services"
        },
        {
            "file": "include\\client_js.js",
            "line": 76,
            "description": "Puts the supplied JS code string into a script tag",
            "itemtype": "method",
            "name": "getJSTag",
            "params": [
                {
                    "name": "jsCode",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ClientJS",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 23,
            "description": "Default configuration.  The settings here should be overriden by taking the\nexample file \"sample.config.json\" and modifying it to override the properties\nshown below.  In order to properly override the default configuration do the\nfollowing:\n1) copy \"sample.config.json\" to \"/etc/pencilblue/config.json\"\n2) Override the properties as desired.\n3) Add any custom properties you wish to provide for your specific purposes.",
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\config.js",
            "line": 221,
            "description": "Loads an external configuration.\nNOTE: This should only be called once by the core code at startup.  Calling\nthis function after the server starts may cause unintended behavior across\nthe system.",
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 27,
            "description": "Retrieves the content settings",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 43,
            "description": "Retrieves the default content settings from installation",
            "itemtype": "method",
            "name": "getDefaultSettings",
            "return": {
                "description": "Content settings",
                "type": "Object"
            },
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\content.js",
            "line": 69,
            "description": "Returns a formatted time stamp from a date",
            "itemtype": "method",
            "name": "getTimestampTextFromSettings",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                },
                {
                    "name": "contentSettings",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ContentService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 31,
            "description": "Retrieves a template and sends it as an email",
            "itemtype": "method",
            "name": "sendFromTemplate",
            "params": [
                {
                    "name": "options",
                    "description": "Object containing the email settings and template name",
                    "type": "Object"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 53,
            "description": "Sends an email",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "from",
                    "description": "From name",
                    "type": "String"
                },
                {
                    "name": "to",
                    "description": "To email address",
                    "type": "String"
                },
                {
                    "name": "subject",
                    "description": "Email subject",
                    "type": "String"
                },
                {
                    "name": "body",
                    "description": "Email content",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 107,
            "description": "Retrieves the email settings",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\email.js",
            "line": 120,
            "description": "Retrieves the default email settings from installation",
            "itemtype": "method",
            "name": "getDefaultSettings",
            "return": {
                "description": "Email settings",
                "type": "Object"
            },
            "class": "EmailService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 27,
            "description": "Retrieves the library settings",
            "itemtype": "method",
            "name": "getSettings",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 43,
            "description": "Loads the libraries settings into template service globals. Called on system\nstartup",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 65,
            "description": "Retrieves the default library settings for CDNs",
            "itemtype": "method",
            "name": "getCDNDefaults",
            "return": {
                "description": "CDN defaults",
                "type": "Object"
            },
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\libraries.js",
            "line": 94,
            "description": "Retrieves the default library settings for Bower",
            "itemtype": "method",
            "name": "getBowerDefaults",
            "return": {
                "description": "Bower defaults",
                "type": "Object"
            },
            "class": "LibrariesService",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 38,
            "description": "Localizes a string by searching for keys within the template and replacing\nthem with the specified values.",
            "itemtype": "method",
            "name": "localize",
            "params": [
                {
                    "name": "sets",
                    "description": "The localizations sets to search in",
                    "type": "Array"
                },
                {
                    "name": "text",
                    "description": "The text to localize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The text where keys have been replaced with translated values",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 72,
            "description": "Translates a single key.  The key should not be enclosed by the special '^'\ncharacter.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "defaultVal",
                    "description": "The default value to return if the value can't be found",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 112,
            "description": "Determines the best language to send a user based on the 'accept-language'\nheader in the request",
            "itemtype": "method",
            "name": "best",
            "params": [
                {
                    "name": "request",
                    "description": "The request object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Locale for the request",
                "type": "String"
            },
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\localization.js",
            "line": 135,
            "description": "Initializes the location.  Loads all language packs into memory for fast\nretrieval and sets the supported locales for determining what language to\nsend the user based on their list of acceptable languages.",
            "itemtype": "method",
            "name": "init",
            "class": "Localization",
            "module": "Services"
        },
        {
            "file": "include\\requirements.js",
            "line": 1,
            "description": "Requirements - Responsible for declaring all of the system types and modules\nneeded to construct the system API object.",
            "copyright": "PencilBlue, all rights reserved.",
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 30,
            "description": "Takes an array of promises and waits for each to be resolved before calling\nback.",
            "static": 1,
            "itemtype": "method",
            "name": "onPromisesOk",
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "A",
                    "description": "callback that takes zero arguments.  It is executed when\nall promises have been resolved.",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 55,
            "description": "Clones an object by serializing it and then re-parsing it.\nWARNING: Objects with circular dependencies will cause an error to be thrown.",
            "static": 1,
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "object",
                    "description": "The object to clone",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Cloned object",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 67,
            "description": "Performs a deep merge and returns the result.  <b>NOTE:</b> DO NOT ATTEMPT\nTO MERGE PROPERTIES THAT REFERENCE OTHER PROPERTIES.  This could have\nunintended side-effects as well as cause errors due to circular dependencies.",
            "static": 1,
            "itemtype": "method",
            "name": "deepMerge",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 81,
            "description": "Checks if the supplied object is an errof. If the object is an error the\nfunction will throw the error.",
            "static": 1,
            "itemtype": "method",
            "name": "ane",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check",
                    "type": "Object"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 94,
            "description": "Escapes a regular expression.",
            "static": 1,
            "itemtype": "method",
            "name": "escapeRegExp",
            "params": [
                {
                    "name": "The",
                    "description": "expression to escape",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Escaped regular expression.",
                "type": "String"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 108,
            "description": "Merges the properties from the first parameter into the second. This modifies\nthe second parameter instead of creating a new object.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 122,
            "description": "Creates an object that has both the properties of \"a\" and \"b\".  When both\nobjects have a property with the same name, \"b\"'s value will be preserved.",
            "static": 1,
            "itemtype": "method",
            "name": "union",
            "return": {
                "description": "The union of properties from both a and b.",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 136,
            "description": "Creates a set of tasks that can be executed by the \"async\" module.",
            "static": 1,
            "itemtype": "method",
            "name": "getTasks",
            "params": [
                {
                    "name": "iterable",
                    "description": "The array of items to build tasks for",
                    "type": "Array"
                },
                {
                    "name": "getTaskFunction",
                    "description": "The function that creates and returns the\ntask to be executed.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n<code>\nvar items = ['apple', 'orange'];\nvar tasks = pb.utils.getTasks(items, function(items, i) {\n    return function(callback) {\n        console.log(items[i]);\n        callback(null, null);\n    };\n});\nasync.series(tasks, pb.utils.cb);\n<code>"
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 163,
            "description": "Hashes an array",
            "static": 1,
            "itemtype": "method",
            "name": "arrayToHash",
            "params": [
                {
                    "name": "array",
                    "description": "The array to hash",
                    "type": "Array"
                },
                {
                    "name": "defaultVal",
                    "description": "Default value if the hashing fails",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Hash",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 189,
            "description": "Converts a hash to an array. When provided, the hashKeyProp will be the\nproperty name of each object in the array that holds the hash key.",
            "static": 1,
            "itemtype": "method",
            "name": "hashToArray",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to convert",
                    "type": "Object"
                },
                {
                    "name": "hashKeyProp",
                    "description": "The property name that will hold the hash key.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of each property value in the hash.",
                "type": "Array"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 214,
            "description": "Inverts a hash",
            "static": 1,
            "itemtype": "method",
            "name": "invertHash",
            "params": [
                {
                    "name": "obj",
                    "description": "Hash object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Inverted hash",
                "type": "Object"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 235,
            "description": "Clones an array",
            "static": 1,
            "itemtype": "method",
            "name": "copyArray",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Cloned array",
                "type": "Array"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 254,
            "description": "Pushes all of one array's values into another",
            "static": 1,
            "itemtype": "method",
            "name": "arrayPushAll",
            "params": [
                {
                    "name": "from",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "to",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 271,
            "description": "Empty callback function just used as a place holder if a callback is required\nand the result is not needed.",
            "static": 1,
            "itemtype": "method",
            "name": "cb",
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 281,
            "description": "Creates a unique Id",
            "static": 1,
            "itemtype": "method",
            "name": "uniqueId",
            "return": {
                "description": "Unique Id Object",
                "type": "ObjectID"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 291,
            "description": "Tests if a value is an object",
            "static": 1,
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 302,
            "description": "Tests if a value is an string",
            "static": 1,
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 313,
            "description": "Tests if a value is a function",
            "static": 1,
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 324,
            "description": "Tests if a value is a boolean",
            "static": 1,
            "itemtype": "method",
            "name": "isBoolean",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 335,
            "description": "Retrieves the subdirectories of a path",
            "static": 1,
            "itemtype": "method",
            "name": "getDirectories",
            "params": [
                {
                    "name": "dirPath",
                    "description": "The starting path",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "include\\util.js",
            "line": 372,
            "description": "Provides typical conversions for time",
            "itemtype": "property",
            "name": "TIME",
            "type": "{Object}",
            "class": "Util",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 1,
            "description": "GoogleAnalytics - A sample for exemplifying what the main module file should\nlook like.",
            "author": "Brian Hyder <brian@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 10,
            "description": "Called when the application is being installed for the first time.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 20,
            "description": "Called when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 32,
            "description": "Called when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\ga\\ga.js",
            "line": 58,
            "description": "Called when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\controllers\\blog.js",
            "line": 1,
            "description": "Blog page of the pencilblue theme",
            "author": "Blake Callens <blake@pencilblue.org>",
            "copyright": "PencilBlue 2014, All rights reserved",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\controllers\\blog.js",
            "line": 432,
            "description": "Provides the routes that are to be handled by an instance of this prototype.\nThe route provides a definition of path, permissions, authentication, and\nexpected content type.\nMethod is optional\nPath is required\nPermissions are optional\nAccess levels are optional\nContent type is optional",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback of the form: cb(error, array of objects)"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\controllers\\blog_filter.js",
            "line": 1,
            "description": "BlogFilter - Responsible for looking up a specific filter (section, article, page, author) and rendering it.",
            "author": "Blake Callens <blake@pencilblue.org>",
            "copyright": "PencilBlue, LLC. 2014 All Rights Reserved",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\controllers\\home_page_settings.js",
            "line": 1,
            "description": "HomePageSettings - Settings for the display of home page content in the Portfolio theme",
            "author": "Blake Callens <blake@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC.  All Rights Reserved",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\controllers\\index.js",
            "line": 1,
            "description": "Index - The home page controller of the portfolio theme.",
            "author": "Blake Callens <blake@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC.  All Rights Reserved",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\controllers\\index.js",
            "line": 17,
            "description": "This is the function that will be called by the system's RequestHandler.  It\nwill map the incoming route to the ones below and then instantiate this\nprototype.  The request handler will then proceed to call this function.\nIts callback should contain everything needed in order to provide a response.",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback.  It does not require a an error parameter.  All\nerrors should be handled by the controller and format the appropriate\n response.  The system will attempt to catch any catastrophic errors but\n makes no guarantees."
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\controllers\\index.js",
            "line": 136,
            "description": "Provides the routes that are to be handled by an instance of this prototype.\nThe route provides a definition of path, permissions, authentication, and\nexpected content type.\nMethod is optional\nPath is required\nPermissions are optional\nAccess levels are optional\nContent type is optional",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback of the form: cb(error, array of objects)"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\controllers\\save_home_page_settings.js",
            "line": 1,
            "description": "SaveHomePageSettings - Saves settings for the display of home page content in the Portfolio theme",
            "author": "Blake Callens <blake@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC.  All Rights Reserved",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 1,
            "description": "Portfolio - A portfolio site theme for PencilBlue",
            "author": "Blake Callens <blake@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 9,
            "description": "Called when the application is being installed for the first time.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 19,
            "description": "Called when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 31,
            "description": "Called when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\portfolio\\portfolio.js",
            "line": 56,
            "description": "Called when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\controllers\\hello_world.js",
            "line": 1,
            "description": "HelloWorld - A sample controller to show how to register a controller and \nroutes for the controller.",
            "author": "Brian Hyder <brian@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC.  All Rights Reserved",
            "return": {
                "description": ""
            },
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\controllers\\hello_world.js",
            "line": 19,
            "description": "This is the function that will be called by the system's RequestHandler.  It \nwill map the incoming route to the ones below and then instantiate this \nprototype.  The request handler will then proceed to call this function.  \nIts callback should contain everything needed in order to provide a response.",
            "itemtype": "method",
            "name": "render",
            "see": [
                "BaseController#render"
            ],
            "params": [
                {
                    "name": "cb",
                    "description": "The callback.  It does not require a an error parameter.  All \nerrors should be handled by the controller and format the appropriate\n response.  The system will attempt to catch any catastrophic errors but \n makes no guarantees."
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\controllers\\hello_world.js",
            "line": 85,
            "description": "Retrieves the navigation for the page.",
            "params": [
                {
                    "name": "cb",
                    "description": "Callback that provides three parameters: cb(Error, navigation, accountButtons);",
                    "type": "Function"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\controllers\\hello_world.js",
            "line": 97,
            "description": "Provides the routes that are to be handled by an instance of this prototype.  \nThe route provides a definition of path, permissions, authentication, and \nexpected content type. \nMethod is optional\nPath is required\nPermissions are optional\nAccess levels are optional\nContent type is optional",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback of the form: cb(error, array of objects)"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\controllers\\test_page.js",
            "line": 1,
            "description": "HelloWorld - A sample controller to show how to register a controller and \nroutes for the controller.",
            "author": "Brian Hyder <brian@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC.  All Rights Reserved",
            "return": {
                "description": ""
            },
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\controllers\\test_page.js",
            "line": 17,
            "description": "This is the function that will be called by the system's RequestHandler.  It \nwill map the incoming route to the ones below and then instantiate this \nprototype.  The request handler will then proceed to call this function.  \nIts callback should contain everything needed in order to provide a response.",
            "itemtype": "method",
            "name": "render",
            "see": [
                "BaseController#render"
            ],
            "params": [
                {
                    "name": "cb",
                    "description": "The callback.  It does not require a an error parameter.  All \nerrors should be handled by the controller and format the appropriate\n response.  The system will attempt to catch any catastrophic errors but \n makes no guarantees."
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\controllers\\test_page.js",
            "line": 41,
            "description": "Provides the routes that are to be handled by an instance of this prototype.  \nThe route provides a definition of path, permissions, authentication, and \nexpected content type. \nMethod is optional\nPath is required\nPermissions are optional\nAccess levels are optional\nContent type is optional",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback of the form: cb(error, array of objects)"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\services\\text_creator.js",
            "line": 1,
            "description": "TextCreaterService - An example of a service that generates random text.",
            "author": "Brian Hyder <brian@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC.  All Rights Reserved",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\services\\text_creator.js",
            "line": 12,
            "description": "This function is called when the service is being setup by the system.  It is \nresponsible for any setup that is needed when first created.  The services \nare all instantiated at once and are not added to the platform untill all \ninitialization is complete.  Relying on other plugin services in the \ninitialization could result in failure.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that should provide one argument: cb(error) or cb(null) \nif initialization proceeded successfully."
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\services\\text_creator.js",
            "line": 27,
            "description": "Generates a random string of 5 characters.  The service functions can return \nvalues or use call backs.  There is no standard for how a service should \nprovide functionality.  The only requirement is that an instance be provided \nas the exported object with the understanding that services should be \nstateless.",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 1,
            "description": "SamplePlugin - A sample for exemplifying what the main module file should\nlook like.",
            "author": "Brian Hyder <brian@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC",
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 10,
            "description": "Called when the application is being installed for the first time.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(Error, Boolean).\nThe result should be TRUE on success and FALSE on failure"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 20,
            "description": "Called when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(Error, Boolean).\nThe result should be TRUE on success and FALSE on failure"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 32,
            "description": "Called when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(Error, Boolean).\nThe result should be TRUE on success and FALSE on failure"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\sample\\sample.js",
            "line": 44,
            "description": "Called when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(Error, Boolean).\nThe result should be TRUE on success and FALSE on failure"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\controllers\\import_action.js",
            "line": 31,
            "see": [
                "BaseController#render"
            ],
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ImportWP",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\services\\wp_xml_parse.js",
            "line": 22,
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\services\\wp_xml_parse.js",
            "line": 29,
            "description": "The absolute file path to the directory that stores media",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "property",
            "name": "MEDIA_DIRECTORY",
            "type": "{String}",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\services\\wp_xml_parse.js",
            "line": 38,
            "static": 1,
            "itemtype": "method",
            "name": "init",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\wp_import.js",
            "line": 1,
            "description": "WordPress Import: import a WordPress blog's content into PencilBlue",
            "author": "Blake Callens <blake@pencilblue.org>",
            "copyright": "2014 PencilBlue, LLC",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\wp_import.js",
            "line": 9,
            "description": "Called when the application is being installed for the first time.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\wp_import.js",
            "line": 19,
            "description": "Called when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\wp_import.js",
            "line": 31,
            "description": "Called when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "plugins\\wp_import\\wp_import.js",
            "line": 56,
            "description": "Called when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that must be called upon completion.  cb(err, result).\nThe result is ignored"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 31,
            "description": "To be called when the configuration is loaded.  The function is responsible\nfor triggered the startup of the HTTP connection listener as well as start a\nconnection pool to the core DB.",
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 54,
            "description": "Initializes the request handler.  This causes all system routes to be\nregistered.",
            "static": 1,
            "itemtype": "method",
            "name": "initRequestHandler",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 66,
            "description": "Initializes the installed plugins.",
            "static": 1,
            "itemtype": "method",
            "name": "initPlugins",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 76,
            "description": "Attempts to initialize a connection pool to the core database",
            "static": 1,
            "itemtype": "method",
            "name": "initDBConnections",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 99,
            "description": "Initializes the HTTP server(s).  When SSL is enabled two servers are created.\nOne to handle incoming HTTP traffic and one to handle HTTPS traffic.",
            "static": 1,
            "itemtype": "method",
            "name": "initServer",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, Boolean)",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 139,
            "description": "The function that handles normal server traffic.  The function ensures that\nthe incoming request is delegated out appropriately.  When SSL Termination\nis in use if the 'x-forwarded-proto' header does equal 'https' then the\nrequest is delegated to the handoff function so the request can be\nredirected appropriately.",
            "static": 1,
            "itemtype": "method",
            "name": "onHttpConnect",
            "params": [
                {
                    "name": "req",
                    "description": "The incoming request",
                    "type": "Request"
                },
                {
                    "name": "resp",
                    "description": "The outgoing response",
                    "type": "Response"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 170,
            "description": "Handles traffic that comes in for HTTP when SSL is enabled.  The request is\nredirected to the appropriately protected HTTPS url.",
            "static": 1,
            "itemtype": "method",
            "name": "onHttpConnectForHandoff",
            "params": [
                {
                    "name": "req",
                    "description": "The incoming request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "The outgoing response",
                    "type": "Response"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 194,
            "description": "Initializes server registration.",
            "static": 1,
            "itemtype": "method",
            "name": "initServerRegistration",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 204,
            "description": "Initializes the command service by calling its \"init\" function.",
            "static": 1,
            "itemtype": "method",
            "name": "initCommandService",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        },
        {
            "file": "pencilblue.js",
            "line": 214,
            "description": "Initializes the libraries service",
            "static": 1,
            "itemtype": "method",
            "name": "initLibraries",
            "params": [
                {
                    "name": "cb",
                    "description": "A callback that provides two parameters: cb(Error, [RESULT])",
                    "type": "Function"
                }
            ],
            "class": "PencilBlue",
            "module": "Services"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: cclass",
            "line": " controllers\\actions\\admin\\content\\pages\\edit_page.js:18"
        },
        {
            "message": "param name missing: {Object}",
            "line": " controllers\\base_controller.js:314"
        },
        {
            "message": "unknown tag: request",
            "line": " include\\http\\request_handler.js:150"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\localization.js:38"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\localization.js:72"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " include\\localization.js:112"
        },
        {
            "message": "unknown tag: copyright",
            "line": " include\\requirements.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\ga\\ga.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\portfolio\\controllers\\blog.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\portfolio\\controllers\\blog_filter.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\portfolio\\controllers\\home_page_settings.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\portfolio\\controllers\\index.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\portfolio\\controllers\\save_home_page_settings.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\portfolio\\portfolio.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\sample\\controllers\\hello_world.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " plugins\\sample\\controllers\\hello_world.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\sample\\controllers\\test_page.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " plugins\\sample\\controllers\\test_page.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\sample\\services\\text_creator.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\sample\\sample.js:1"
        },
        {
            "message": "unknown tag: copyright",
            "line": " plugins\\wp_import\\wp_import.js:1"
        },
        {
            "message": "Missing item type\nDeletes an article",
            "line": " controllers\\actions\\admin\\content\\articles\\delete_article.js:18"
        },
        {
            "message": "Missing item type\nEdits an article",
            "line": " controllers\\actions\\admin\\content\\articles\\edit_article.js:18"
        },
        {
            "message": "Missing item type\nCreates a new article",
            "line": " controllers\\actions\\admin\\content\\articles\\new_article.js:18"
        },
        {
            "message": "Missing item type\nDeletes a comment",
            "line": " controllers\\actions\\admin\\content\\comments\\delete_comment.js:18"
        },
        {
            "message": "Missing item type\nDeletes an object",
            "line": " controllers\\actions\\admin\\content\\custom_objects\\delete_object.js:18"
        },
        {
            "message": "Missing item type\nDeletes an object type",
            "line": " controllers\\actions\\admin\\content\\custom_objects\\delete_object_type.js:18"
        },
        {
            "message": "Missing item type\nAdds new media",
            "line": " controllers\\actions\\admin\\content\\media\\add_media.js:18"
        },
        {
            "message": "Missing item type\nDeletes media",
            "line": " controllers\\actions\\admin\\content\\media\\delete_media.js:18"
        },
        {
            "message": "Missing item type\nEdits media",
            "line": " controllers\\actions\\admin\\content\\media\\edit_media.js:18"
        },
        {
            "message": "Missing item type\nAdds new media from inside a non-media form",
            "line": " controllers\\actions\\admin\\content\\media\\inline_add_media.js:18"
        },
        {
            "message": "Missing item type\nUploads a media file to the system",
            "line": " controllers\\actions\\admin\\content\\media\\upload_media.js:18"
        },
        {
            "message": "Missing item type\nDeletes a page",
            "line": " controllers\\actions\\admin\\content\\pages\\delete_page.js:18"
        },
        {
            "message": "Missing item type\nEdits a page",
            "line": " controllers\\actions\\admin\\content\\pages\\edit_page.js:18"
        },
        {
            "message": "Missing item type\nDeletes a section",
            "line": " controllers\\actions\\admin\\content\\sections\\delete_section.js:18"
        },
        {
            "message": "Missing item type\nEdits a section",
            "line": " controllers\\actions\\admin\\content\\sections\\edit_section.js:18"
        },
        {
            "message": "Missing item type\nCreates a new section",
            "line": " controllers\\actions\\admin\\content\\sections\\new_section.js:18"
        },
        {
            "message": "Missing item type\nUpdates the navigation",
            "line": " controllers\\actions\\admin\\content\\sections\\section_map.js:18"
        },
        {
            "message": "Missing item type\nDeletes a topic",
            "line": " controllers\\actions\\admin\\content\\topics\\delete_topic.js:18"
        },
        {
            "message": "Missing item type\nImports a CSV of topics",
            "line": " controllers\\actions\\admin\\content\\topics\\import_topics.js:18"
        },
        {
            "message": "Missing item type\nCreates a new topic",
            "line": " controllers\\actions\\admin\\content\\topics\\new_topic.js:18"
        },
        {
            "message": "Missing item type\nSaves the site's setting to call home",
            "line": " controllers\\actions\\admin\\site_settings\\configuration.js:18"
        },
        {
            "message": "Missing item type\nSaves the site's content settings",
            "line": " controllers\\actions\\admin\\site_settings\\content.js:18"
        },
        {
            "message": "Missing item type\nSaves the site's email settings",
            "line": " controllers\\actions\\admin\\site_settings\\email.js:18"
        },
        {
            "message": "Missing item type\nSaves the site's content settings",
            "line": " controllers\\actions\\admin\\site_settings\\libraries.js:18"
        },
        {
            "message": "Missing item type\nSaves the site's theme settings",
            "line": " controllers\\actions\\admin\\themes\\index.js:18"
        },
        {
            "message": "Missing item type\nChanges a user's password",
            "line": " controllers\\actions\\admin\\users\\change_password.js:18"
        },
        {
            "message": "Missing item type\nDeletes an unverified user",
            "line": " controllers\\actions\\admin\\users\\delete_unverified_user.js:18"
        },
        {
            "message": "Missing item type\nDeletes a user",
            "line": " controllers\\actions\\admin\\users\\delete_user.js:18"
        },
        {
            "message": "Missing item type\nEdits a user",
            "line": " controllers\\actions\\admin\\users\\edit_user.js:18"
        },
        {
            "message": "Missing item type\nCreates a new user",
            "line": " controllers\\actions\\admin\\users\\new_user.js:18"
        },
        {
            "message": "Missing item type\nSends a password reset email",
            "line": " controllers\\actions\\admin\\users\\send_password_reset.js:18"
        },
        {
            "message": "Missing item type\nVerifies a user",
            "line": " controllers\\actions\\admin\\users\\verify_user.js:18"
        },
        {
            "message": "Missing item type\nChanges the logged in user's password",
            "line": " controllers\\actions\\user\\manage_account\\change_password.js:18"
        },
        {
            "message": "Missing item type\nEdits the logged in user's information",
            "line": " controllers\\actions\\user\\manage_account\\profile.js:18"
        },
        {
            "message": "Missing item type\nResends an account verification email",
            "line": " controllers\\actions\\user\\resend_verification.js:18"
        },
        {
            "message": "Missing item type\nResets the logged in user's password",
            "line": " controllers\\actions\\user\\reset_password.js:18"
        },
        {
            "message": "Missing item type\nCreates an READER level user",
            "line": " controllers\\actions\\user\\sign_up.js:18"
        },
        {
            "message": "Missing item type\nTests the token from a verication email and verifies the user if correct",
            "line": " controllers\\actions\\user\\verify_email.js:18"
        },
        {
            "message": "Missing item type\nSends a password reset email",
            "line": " controllers\\actions\\forgot_password.js:18"
        },
        {
            "message": "Missing item type\nAuthenticates a user",
            "line": " controllers\\actions\\login.js:18"
        },
        {
            "message": "Missing item type\nLogs a user out of the system",
            "line": " controllers\\actions\\logout.js:18"
        },
        {
            "message": "Missing item type\nCreates the initial admin user",
            "line": " controllers\\actions\\setup.js:18"
        },
        {
            "message": "Missing item type\nInterface for editing an article",
            "line": " controllers\\admin\\content\\articles\\edit_article.js:18"
        },
        {
            "message": "Missing item type\nInterface for managing articles",
            "line": " controllers\\admin\\content\\articles\\manage_articles.js:18"
        },
        {
            "message": "Missing item type\nInterface for creating a new article",
            "line": " controllers\\admin\\content\\articles\\new_article.js:18"
        },
        {
            "message": "Missing item type\nInterface for editing an object",
            "line": " controllers\\admin\\content\\custom_objects\\edit_object.js:18"
        },
        {
            "message": "Missing item type\nInterface for adding media",
            "line": " controllers\\admin\\content\\media\\add_media.js:18"
        },
        {
            "message": "Missing item type\nInterface for editing media",
            "line": " controllers\\admin\\content\\media\\edit_media.js:18"
        },
        {
            "message": "Missing item type\nInterface for managing media",
            "line": " controllers\\admin\\content\\media\\manage_media.js:18"
        },
        {
            "message": "Missing item type\nInterface for editing a page",
            "line": " controllers\\admin\\content\\pages\\edit_page.js:18"
        },
        {
            "message": "Missing item type\nInterface for managing pages",
            "line": " controllers\\admin\\content\\pages\\manage_pages.js:18"
        },
        {
            "message": "Missing item type\nInterface for creating a new page",
            "line": " controllers\\admin\\content\\pages\\new_page.js:18"
        },
        {
            "message": "Missing item type\nInterface for editing a section",
            "line": " controllers\\admin\\content\\sections\\edit_section.js:18"
        },
        {
            "message": "Missing item type\nInterface for creating a section",
            "line": " controllers\\admin\\content\\sections\\new_section.js:18"
        },
        {
            "message": "Missing item type\nInterface for editing the navigation",
            "line": " controllers\\admin\\content\\sections\\section_map.js:18"
        },
        {
            "message": "Missing item type\nInterface for importing topics from CSV",
            "line": " controllers\\admin\\content\\topics\\import_topics.js:18"
        },
        {
            "message": "Missing item type\nInterface for managing topics",
            "line": " controllers\\admin\\content\\topics\\manage_topics.js:18"
        },
        {
            "message": "Missing item type\nInterface for creating new topics",
            "line": " controllers\\admin\\content\\topics\\new_topic.js:18"
        },
        {
            "message": "Missing item type\nParent articles controller",
            "line": " controllers\\admin\\content\\articles.js:18"
        },
        {
            "message": "Missing item type\nParent comments controller",
            "line": " controllers\\admin\\content\\comments.js:18"
        },
        {
            "message": "Missing item type\nParent custom objects controller",
            "line": " controllers\\admin\\content\\custom_objects.js:18"
        },
        {
            "message": "Missing item type\nParent media controller",
            "line": " controllers\\admin\\content\\media.js:18"
        },
        {
            "message": "Missing item type\nParent pages controller",
            "line": " controllers\\admin\\content\\pages.js:18"
        },
        {
            "message": "Missing item type\nParent sections controller",
            "line": " controllers\\admin\\content\\sections.js:18"
        },
        {
            "message": "Missing item type\nParent topics controller",
            "line": " controllers\\admin\\content\\topics.js:18"
        },
        {
            "message": "Missing item type\nInterface for viewing plugin details",
            "line": " controllers\\admin\\plugins\\details.js:18"
        },
        {
            "message": "Missing item type\nInterface for managing plugins",
            "line": " controllers\\admin\\plugins\\index.js:18"
        },
        {
            "message": "Missing item type\nInterface for changing a plugin's settings",
            "line": " controllers\\admin\\plugins\\settings.js:18"
        },
        {
            "message": "Missing item type\nInterface for displaying the site's configuration settings",
            "line": " controllers\\admin\\site_settings\\configuration.js:18"
        },
        {
            "message": "Missing item type\nInterface for the site's content settings",
            "line": " controllers\\admin\\site_settings\\content.js:18"
        },
        {
            "message": "Missing item type\nInterface for the site's email settings",
            "line": " controllers\\admin\\site_settings\\email.js:18"
        },
        {
            "message": "Missing item type\nInterface for the site's libraries settings",
            "line": " controllers\\admin\\site_settings\\libraries.js:18"
        },
        {
            "message": "Missing item type\nInterface for managing themes",
            "line": " controllers\\admin\\themes\\index.js:18"
        },
        {
            "message": "Missing item type\nInterface for changing a theme's settings",
            "line": " controllers\\admin\\themes\\settings.js:18"
        },
        {
            "message": "Missing item type\nInterface for changing the logged in user's password",
            "line": " controllers\\admin\\users\\change_password.js:18"
        },
        {
            "message": "Missing item type\nInterface for editing a user",
            "line": " controllers\\admin\\users\\edit_user.js:18"
        },
        {
            "message": "Missing item type\nInterface for managing users",
            "line": " controllers\\admin\\users\\manage_users.js:18"
        },
        {
            "message": "Missing item type\nInterface for creating a new user",
            "line": " controllers\\admin\\users\\new_user.js:18"
        },
        {
            "message": "Missing item type\nInterface for displaying how a plugin's user permissions are organized",
            "line": " controllers\\admin\\users\\permissions.js:18"
        },
        {
            "message": "Missing item type\nInterface for managing users",
            "line": " controllers\\admin\\users\\unverified_users.js:18"
        },
        {
            "message": "Missing item type",
            "line": " controllers\\admin\\index.js:28"
        },
        {
            "message": "Missing item type\nInterface for admin login",
            "line": " controllers\\admin\\login.js:18"
        },
        {
            "message": "Missing item type\nParent site settings controller",
            "line": " controllers\\admin\\site_settings.js:18"
        },
        {
            "message": "Missing item type\nParent users controller",
            "line": " controllers\\admin\\users.js:18"
        },
        {
            "message": "Missing item type\nAutomatic draft saving of pages",
            "line": " controllers\\api\\admin\\content\\pages\\save_draft.js:18"
        },
        {
            "message": "Missing item type\nController to properly route and handle remote calls to interact with\nthe UrlService",
            "line": " controllers\\api\\admin\\url_api.js:18"
        },
        {
            "message": "Missing item type\nProvides the hash of all actions supported by this controller",
            "line": " controllers\\api\\admin\\url_api.js:39"
        },
        {
            "message": "Missing item type\nValidates any path parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded.",
            "line": " controllers\\api\\admin\\url_api.js:46"
        },
        {
            "message": "Missing item type\nValidates any query parameters for the specified action.  The callback will\nprovide an array of validation errors. When the array is empty it is safe to\nassume that validation succeeded.",
            "line": " controllers\\api\\admin\\url_api.js:55"
        },
        {
            "message": "Missing item type\nThe \"exists\" action handler.  Calls the UrlService function <i>exists</i> to\nsee whether or not the provided URL path could trigger a controller to be\nexecuted.",
            "line": " controllers\\api\\admin\\url_api.js:79"
        },
        {
            "message": "Missing item type\nThe \"exists_for\" action handler.  Calls the UrlService function\n<i>existsForType</i> to see whether or not the provided URL path the URL key\nof that particular object type.",
            "line": " controllers\\api\\admin\\url_api.js:92"
        },
        {
            "message": "Missing item type\nCreates a new comment",
            "line": " controllers\\api\\comments\\new_comment.js:18"
        },
        {
            "message": "Missing item type\nRetrieve articles",
            "line": " controllers\\api\\content\\get_articles.js:18"
        },
        {
            "message": "Missing item type\nGet articles within indices, for real time pagination",
            "line": " controllers\\api\\content\\get_articles.js:30"
        },
        {
            "message": "Missing item type\nRetrieve a media embed",
            "line": " controllers\\api\\content\\get_media_embed.js:18"
        },
        {
            "message": "Missing item type\nSearch for headline or subheading matching search term",
            "line": " controllers\\api\\content\\search.js:18"
        },
        {
            "message": "Missing item type\nChecks to see if the proposed name for a custom object type is available",
            "line": " controllers\\api\\custom_objects\\get_object_type_name_available.js:18"
        },
        {
            "message": "Missing item type\nChecks to see if the proposed username is available",
            "line": " controllers\\api\\user\\get_username_available.js:18"
        },
        {
            "message": "Missing item type\n404 error",
            "line": " controllers\\error\\404.js:18"
        },
        {
            "message": "Missing item type\nInterface for logged in user to change password",
            "line": " controllers\\user\\change_password.js:18"
        },
        {
            "message": "Missing item type\nInterface for logging in",
            "line": " controllers\\user\\login.js:18"
        },
        {
            "message": "Missing item type\nInterface for logged in user to manage account information",
            "line": " controllers\\user\\manage_account.js:18"
        },
        {
            "message": "Missing item type\nInterface for resending a verification email",
            "line": " controllers\\user\\resend_verification.js:18"
        },
        {
            "message": "Missing item type\nInterface for creating a new READER level user",
            "line": " controllers\\user\\sign_up.js:18"
        },
        {
            "message": "Missing item type\nVerification email sent page",
            "line": " controllers\\user\\verification_sent.js:18"
        },
        {
            "message": "Missing item type\nLoads a single article",
            "line": " controllers\\article.js:18"
        },
        {
            "message": "Missing item type\nDeletes objects from the database",
            "line": " controllers\\delete_controller.js:18"
        },
        {
            "message": "Missing item type\nRSS Feed",
            "line": " controllers\\feed.js:18"
        },
        {
            "message": "Missing item type\nIndex page of the pencilblue theme",
            "line": " controllers\\index.js:18"
        },
        {
            "message": "Missing item type\nRetrieves the name of the page.  The page's headhile",
            "line": " controllers\\page.js:76"
        },
        {
            "message": "Missing item type\nPreview an article or page",
            "line": " controllers\\preview.js:18"
        },
        {
            "message": "Missing item type\nLoads a section",
            "line": " controllers\\section.js:18"
        },
        {
            "message": "Missing item type\nInitial setup page",
            "line": " controllers\\setup.js:18"
        },
        {
            "message": "Missing item type\nGoogle sitemap",
            "line": " controllers\\sitemap.js:18"
        },
        {
            "message": "Missing item type",
            "line": " include\\dao\\cache.js:45"
        },
        {
            "message": "Missing item type\nLegacy variable used to reference the main database\nTODO Remove this once all references are converted over.",
            "line": " include\\dao\\db_manager.js:23"
        },
        {
            "message": "Missing item type\nKeeps track of all active DBs with active connection pools.",
            "line": " include\\dao\\db_manager.js:39"
        },
        {
            "message": "Missing item type\nTODO Church this up a bit.  Make it a template and controller like 404.\nTODO install an encoder entity since node prints out function names in angle brackets",
            "line": " include\\http\\request_handler.js:408"
        },
        {
            "message": "Missing item type\nReplaces an article or page layout's ^media_display^ tag with a media embed",
            "line": " include\\service\\entities\\article_service.js:421"
        },
        {
            "message": "Missing item type\nValidates the path of a main module file.  The path is considered valid if\nthe path points to JS file.  The path may be absolute or relative to the\nspecific plugin directory.",
            "line": " include\\service\\entities\\plugin_service.js:1618"
        },
        {
            "message": "Missing item type\nValidates a setting from a details.json file.",
            "line": " include\\service\\entities\\plugin_service.js:1631"
        },
        {
            "message": "Missing item type\nService for managing the site's navigation",
            "line": " include\\service\\entities\\section_service.js:18"
        },
        {
            "message": "Missing item type\nCalled when the tasks have completed execution and isInitiator = FALSE. The\nfunction blindly passes the results of the tasks back to the callback.",
            "line": " include\\service\\jobs\\plugins\\plugin_uninstall_job.js:213"
        },
        {
            "message": "Missing item type\nCalled when the tasks have completed execution and isInitiator = FALSE. The\nfunction blindly passes the results of the tasks back to the callback.",
            "line": " include\\service\\jobs\\cluster_job_runner.js:148"
        },
        {
            "message": "Missing item type\nThe mongo collection that stores the sessions",
            "line": " include\\session\\storage\\mongo_session_store.js:29"
        },
        {
            "message": "Missing item type\nResponsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "line": " include\\session\\storage\\mongo_session_store.js:135"
        },
        {
            "message": "Missing item type\nResponsable for ensuring that the mechanism that expires sessions becomes\nactive.",
            "line": " include\\session\\storage\\mongo_session_store.js:146"
        },
        {
            "message": "Missing item type\nThe prefix to prepend to the session ID in order to construct a cache key",
            "line": " include\\session\\storage\\redis_session_store.js:29"
        },
        {
            "message": "Missing item type\nConstructs a session cache key provided a session id.",
            "line": " include\\session\\storage\\redis_session_store.js:89"
        },
        {
            "message": "Missing item type\nResponsable for shutting down the session store and any resources used for\nreaping expired sessions.",
            "line": " include\\session\\storage\\redis_session_store.js:98"
        },
        {
            "message": "Missing item type\nRepsonsible for ensuring that the mechanism that expires sessions becomes\nactive.",
            "line": " include\\session\\storage\\redis_session_store.js:107"
        },
        {
            "message": "Missing item type\nShuts down the sesison handler and the associated session store",
            "line": " include\\session\\session.js:317"
        },
        {
            "message": "Missing item type\nSettingServiceFactory - Creates a service that will provide access to settings *",
            "line": " include\\system\\settings.js:18"
        },
        {
            "message": "Missing item type\nTODO: add options like sizing\nTODO: move hard coded HTML to template",
            "line": " include\\theme\\media.js:18"
        },
        {
            "message": "Missing item type\nDefault configuration.  The settings here should be overriden by taking the\nexample file \"sample.config.json\" and modifying it to override the properties\nshown below.  In order to properly override the default configuration do the\nfollowing:\n1) copy \"sample.config.json\" to \"/etc/pencilblue/config.json\"\n2) Override the properties as desired.\n3) Add any custom properties you wish to provide for your specific purposes.",
            "line": " include\\config.js:23"
        },
        {
            "message": "Missing item type\nLoads an external configuration.\nNOTE: This should only be called once by the core code at startup.  Calling\nthis function after the server starts may cause unintended behavior across\nthe system.",
            "line": " include\\config.js:221"
        },
        {
            "message": "Missing item type\nRequirements - Responsible for declaring all of the system types and modules\nneeded to construct the system API object.",
            "line": " include\\requirements.js:1"
        },
        {
            "message": "Missing item type\nGoogleAnalytics - A sample for exemplifying what the main module file should\nlook like.",
            "line": " plugins\\ga\\ga.js:1"
        },
        {
            "message": "Missing item type\nCalled when the application is being installed for the first time.",
            "line": " plugins\\ga\\ga.js:10"
        },
        {
            "message": "Missing item type\nCalled when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "line": " plugins\\ga\\ga.js:20"
        },
        {
            "message": "Missing item type\nCalled when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "line": " plugins\\ga\\ga.js:32"
        },
        {
            "message": "Missing item type\nCalled when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "line": " plugins\\ga\\ga.js:58"
        },
        {
            "message": "Missing item type\nBlog page of the pencilblue theme",
            "line": " plugins\\portfolio\\controllers\\blog.js:1"
        },
        {
            "message": "Missing item type\nProvides the routes that are to be handled by an instance of this prototype.\nThe route provides a definition of path, permissions, authentication, and\nexpected content type.\nMethod is optional\nPath is required\nPermissions are optional\nAccess levels are optional\nContent type is optional",
            "line": " plugins\\portfolio\\controllers\\blog.js:432"
        },
        {
            "message": "Missing item type\nBlogFilter - Responsible for looking up a specific filter (section, article, page, author) and rendering it.",
            "line": " plugins\\portfolio\\controllers\\blog_filter.js:1"
        },
        {
            "message": "Missing item type\nHomePageSettings - Settings for the display of home page content in the Portfolio theme",
            "line": " plugins\\portfolio\\controllers\\home_page_settings.js:1"
        },
        {
            "message": "Missing item type\nIndex - The home page controller of the portfolio theme.",
            "line": " plugins\\portfolio\\controllers\\index.js:1"
        },
        {
            "message": "Missing item type\nThis is the function that will be called by the system's RequestHandler.  It\nwill map the incoming route to the ones below and then instantiate this\nprototype.  The request handler will then proceed to call this function.\nIts callback should contain everything needed in order to provide a response.",
            "line": " plugins\\portfolio\\controllers\\index.js:17"
        },
        {
            "message": "Missing item type\nProvides the routes that are to be handled by an instance of this prototype.\nThe route provides a definition of path, permissions, authentication, and\nexpected content type.\nMethod is optional\nPath is required\nPermissions are optional\nAccess levels are optional\nContent type is optional",
            "line": " plugins\\portfolio\\controllers\\index.js:136"
        },
        {
            "message": "Missing item type\nSaveHomePageSettings - Saves settings for the display of home page content in the Portfolio theme",
            "line": " plugins\\portfolio\\controllers\\save_home_page_settings.js:1"
        },
        {
            "message": "Missing item type\nPortfolio - A portfolio site theme for PencilBlue",
            "line": " plugins\\portfolio\\portfolio.js:1"
        },
        {
            "message": "Missing item type\nCalled when the application is being installed for the first time.",
            "line": " plugins\\portfolio\\portfolio.js:9"
        },
        {
            "message": "Missing item type\nCalled when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "line": " plugins\\portfolio\\portfolio.js:19"
        },
        {
            "message": "Missing item type\nCalled when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "line": " plugins\\portfolio\\portfolio.js:31"
        },
        {
            "message": "Missing item type\nCalled when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "line": " plugins\\portfolio\\portfolio.js:56"
        },
        {
            "message": "Missing item type\nHelloWorld - A sample controller to show how to register a controller and \nroutes for the controller.",
            "line": " plugins\\sample\\controllers\\hello_world.js:1"
        },
        {
            "message": "Missing item type\nRetrieves the navigation for the page.",
            "line": " plugins\\sample\\controllers\\hello_world.js:85"
        },
        {
            "message": "Missing item type\nProvides the routes that are to be handled by an instance of this prototype.  \nThe route provides a definition of path, permissions, authentication, and \nexpected content type. \nMethod is optional\nPath is required\nPermissions are optional\nAccess levels are optional\nContent type is optional",
            "line": " plugins\\sample\\controllers\\hello_world.js:97"
        },
        {
            "message": "Missing item type\nHelloWorld - A sample controller to show how to register a controller and \nroutes for the controller.",
            "line": " plugins\\sample\\controllers\\test_page.js:1"
        },
        {
            "message": "Missing item type\nProvides the routes that are to be handled by an instance of this prototype.  \nThe route provides a definition of path, permissions, authentication, and \nexpected content type. \nMethod is optional\nPath is required\nPermissions are optional\nAccess levels are optional\nContent type is optional",
            "line": " plugins\\sample\\controllers\\test_page.js:41"
        },
        {
            "message": "Missing item type\nTextCreaterService - An example of a service that generates random text.",
            "line": " plugins\\sample\\services\\text_creator.js:1"
        },
        {
            "message": "Missing item type\nThis function is called when the service is being setup by the system.  It is \nresponsible for any setup that is needed when first created.  The services \nare all instantiated at once and are not added to the platform untill all \ninitialization is complete.  Relying on other plugin services in the \ninitialization could result in failure.",
            "line": " plugins\\sample\\services\\text_creator.js:12"
        },
        {
            "message": "Missing item type\nGenerates a random string of 5 characters.  The service functions can return \nvalues or use call backs.  There is no standard for how a service should \nprovide functionality.  The only requirement is that an instance be provided \nas the exported object with the understanding that services should be \nstateless.",
            "line": " plugins\\sample\\services\\text_creator.js:27"
        },
        {
            "message": "Missing item type\nSamplePlugin - A sample for exemplifying what the main module file should\nlook like.",
            "line": " plugins\\sample\\sample.js:1"
        },
        {
            "message": "Missing item type\nCalled when the application is being installed for the first time.",
            "line": " plugins\\sample\\sample.js:10"
        },
        {
            "message": "Missing item type\nCalled when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "line": " plugins\\sample\\sample.js:20"
        },
        {
            "message": "Missing item type\nCalled when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "line": " plugins\\sample\\sample.js:32"
        },
        {
            "message": "Missing item type\nCalled when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "line": " plugins\\sample\\sample.js:44"
        },
        {
            "message": "Missing item type",
            "line": " plugins\\wp_import\\services\\wp_xml_parse.js:22"
        },
        {
            "message": "Missing item type\nWordPress Import: import a WordPress blog's content into PencilBlue",
            "line": " plugins\\wp_import\\wp_import.js:1"
        },
        {
            "message": "Missing item type\nCalled when the application is being installed for the first time.",
            "line": " plugins\\wp_import\\wp_import.js:9"
        },
        {
            "message": "Missing item type\nCalled when the application is uninstalling this plugin.  The plugin should\nmake every effort to clean up any plugin-specific DB items or any in function\noverrides it makes.",
            "line": " plugins\\wp_import\\wp_import.js:19"
        },
        {
            "message": "Missing item type\nCalled when the application is starting up. The function is also called at\nthe end of a successful install. It is guaranteed that all core PB services\nwill be available including access to the core DB.",
            "line": " plugins\\wp_import\\wp_import.js:31"
        },
        {
            "message": "Missing item type\nCalled when the application is gracefully shutting down.  No guarantees are\nprovided for how much time will be provided the plugin to shut down.",
            "line": " plugins\\wp_import\\wp_import.js:56"
        },
        {
            "message": "Missing item type\nTo be called when the configuration is loaded.  The function is responsible\nfor triggered the startup of the HTTP connection listener as well as start a\nconnection pool to the core DB.",
            "line": " pencilblue.js:31"
        }
    ]
}